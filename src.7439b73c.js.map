{"version":3,"sources":["node_modules/three/three.js","src/index.js"],"names":["document","getElementById","innerHTML"],"mappings":"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AAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAEA,EAAA,GAAA,EAAA,EACA,EAAA,IAAA,EAAA,EACA,EAAA,GAAA,EAEA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,IAAA,EAAA,EAEA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,IAAA,EAAA,OAEA,GAAA,QAAA,EAAA,MAAA,CAEA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAEA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAEA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,IAAA,EAEA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,IAAA,EAAA,OAEA,GAAA,QAAA,EAAA,MAAA,CAEA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAEA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,IAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAEA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAEA,EAAA,IAAA,EAAA,EACA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,OAEA,GAAA,QAAA,EAAA,MAAA,CAEA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAEA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAEA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAEA,EAAA,IAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,IAAA,EAAA,OAEA,GAAA,QAAA,EAAA,MAAA,CAEA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAEA,EAAA,GAAA,E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","file":"src.7439b73c.js","sourceRoot":"..","sourcesContent":["var self = self || {};// File:src/Three.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = { REVISION: '77' };\r\n\r\n//\r\n\r\nif ( typeof define === 'function' && define.amd ) {\r\n\r\n\tdefine( 'three', THREE );\r\n\r\n} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {\r\n\r\n\tmodule.exports = THREE;\r\n\r\n}\r\n\r\n// Polyfills\r\n\r\nif ( Number.EPSILON === undefined ) {\r\n\r\n\tNumber.EPSILON = Math.pow( 2, - 52 );\r\n\r\n}\r\n\r\n//\r\n\r\nif ( Math.sign === undefined ) {\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n\r\n\tMath.sign = function ( x ) {\r\n\r\n\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\r\n\r\n\t};\r\n\r\n}\r\n\r\nif ( Function.prototype.name === undefined ) {\r\n\r\n\t// Missing in IE9-11.\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\r\n\r\n\tObject.defineProperty( Function.prototype, 'name', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n}\r\n\r\nif ( Object.assign === undefined ) {\r\n\r\n\t// Missing in IE.\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n\r\n\t( function () {\r\n\r\n\t\tObject.assign = function ( target ) {\r\n\r\n\t\t\t'use strict';\r\n\r\n\t\t\tif ( target === undefined || target === null ) {\r\n\r\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar output = Object( target );\r\n\r\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\r\n\r\n\t\t\t\tvar source = arguments[ index ];\r\n\r\n\t\t\t\tif ( source !== undefined && source !== null ) {\r\n\r\n\t\t\t\t\tfor ( var nextKey in source ) {\r\n\r\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\r\n\r\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t};\r\n\r\n\t} )();\r\n\r\n}\r\n\r\n//\r\n\r\nObject.assign( THREE, {\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\r\n\r\n\tMOUSE: { LEFT: 0, MIDDLE: 1, RIGHT: 2 },\r\n\r\n\t// GL STATE CONSTANTS\r\n\r\n\tCullFaceNone: 0,\r\n\tCullFaceBack: 1,\r\n\tCullFaceFront: 2,\r\n\tCullFaceFrontBack: 3,\r\n\r\n\tFrontFaceDirectionCW: 0,\r\n\tFrontFaceDirectionCCW: 1,\r\n\r\n\t// SHADOWING TYPES\r\n\r\n\tBasicShadowMap: 0,\r\n\tPCFShadowMap: 1,\r\n\tPCFSoftShadowMap: 2,\r\n\r\n\t// MATERIAL CONSTANTS\r\n\r\n\t// side\r\n\r\n\tFrontSide: 0,\r\n\tBackSide: 1,\r\n\tDoubleSide: 2,\r\n\r\n\t// shading\r\n\r\n\tFlatShading: 1,\r\n\tSmoothShading: 2,\r\n\r\n\t// colors\r\n\r\n\tNoColors: 0,\r\n\tFaceColors: 1,\r\n\tVertexColors: 2,\r\n\r\n\t// blending modes\r\n\r\n\tNoBlending: 0,\r\n\tNormalBlending: 1,\r\n\tAdditiveBlending: 2,\r\n\tSubtractiveBlending: 3,\r\n\tMultiplyBlending: 4,\r\n\tCustomBlending: 5,\r\n\r\n\t// custom blending equations\r\n\t// (numbers start from 100 not to clash with other\r\n\t// mappings to OpenGL constants defined in Texture.js)\r\n\r\n\tAddEquation: 100,\r\n\tSubtractEquation: 101,\r\n\tReverseSubtractEquation: 102,\r\n\tMinEquation: 103,\r\n\tMaxEquation: 104,\r\n\r\n\t// custom blending destination factors\r\n\r\n\tZeroFactor: 200,\r\n\tOneFactor: 201,\r\n\tSrcColorFactor: 202,\r\n\tOneMinusSrcColorFactor: 203,\r\n\tSrcAlphaFactor: 204,\r\n\tOneMinusSrcAlphaFactor: 205,\r\n\tDstAlphaFactor: 206,\r\n\tOneMinusDstAlphaFactor: 207,\r\n\r\n\t// custom blending source factors\r\n\r\n\t//ZeroFactor: 200,\r\n\t//OneFactor: 201,\r\n\t//SrcAlphaFactor: 204,\r\n\t//OneMinusSrcAlphaFactor: 205,\r\n\t//DstAlphaFactor: 206,\r\n\t//OneMinusDstAlphaFactor: 207,\r\n\tDstColorFactor: 208,\r\n\tOneMinusDstColorFactor: 209,\r\n\tSrcAlphaSaturateFactor: 210,\r\n\r\n\t// depth modes\r\n\r\n\tNeverDepth: 0,\r\n\tAlwaysDepth: 1,\r\n\tLessDepth: 2,\r\n\tLessEqualDepth: 3,\r\n\tEqualDepth: 4,\r\n\tGreaterEqualDepth: 5,\r\n\tGreaterDepth: 6,\r\n\tNotEqualDepth: 7,\r\n\r\n\r\n\t// TEXTURE CONSTANTS\r\n\r\n\tMultiplyOperation: 0,\r\n\tMixOperation: 1,\r\n\tAddOperation: 2,\r\n\r\n\t// Tone Mapping modes\r\n\r\n\tNoToneMapping: 0, // do not do any tone mapping, not even exposure (required for special purpose passes.)\r\n\tLinearToneMapping: 1, // only apply exposure.\r\n\tReinhardToneMapping: 2,\r\n\tUncharted2ToneMapping: 3, // John Hable\r\n\tCineonToneMapping: 4, // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\r\n\r\n\t// Mapping modes\r\n\r\n\tUVMapping: 300,\r\n\r\n\tCubeReflectionMapping: 301,\r\n\tCubeRefractionMapping: 302,\r\n\r\n\tEquirectangularReflectionMapping: 303,\r\n\tEquirectangularRefractionMapping: 304,\r\n\r\n\tSphericalReflectionMapping: 305,\r\n\tCubeUVReflectionMapping: 306,\r\n\tCubeUVRefractionMapping: 307,\r\n\r\n\t// Wrapping modes\r\n\r\n\tRepeatWrapping: 1000,\r\n\tClampToEdgeWrapping: 1001,\r\n\tMirroredRepeatWrapping: 1002,\r\n\r\n\t// Filters\r\n\r\n\tNearestFilter: 1003,\r\n\tNearestMipMapNearestFilter: 1004,\r\n\tNearestMipMapLinearFilter: 1005,\r\n\tLinearFilter: 1006,\r\n\tLinearMipMapNearestFilter: 1007,\r\n\tLinearMipMapLinearFilter: 1008,\r\n\r\n\t// Data types\r\n\r\n\tUnsignedByteType: 1009,\r\n\tByteType: 1010,\r\n\tShortType: 1011,\r\n\tUnsignedShortType: 1012,\r\n\tIntType: 1013,\r\n\tUnsignedIntType: 1014,\r\n\tFloatType: 1015,\r\n\tHalfFloatType: 1025,\r\n\r\n\t// Pixel types\r\n\r\n\t//UnsignedByteType: 1009,\r\n\tUnsignedShort4444Type: 1016,\r\n\tUnsignedShort5551Type: 1017,\r\n\tUnsignedShort565Type: 1018,\r\n\r\n\t// Pixel formats\r\n\r\n\tAlphaFormat: 1019,\r\n\tRGBFormat: 1020,\r\n\tRGBAFormat: 1021,\r\n\tLuminanceFormat: 1022,\r\n\tLuminanceAlphaFormat: 1023,\r\n\t// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\r\n\tRGBEFormat: THREE.RGBAFormat, //1024;\r\n\tDepthFormat: 1026,\r\n\r\n\t// DDS / ST3C Compressed texture formats\r\n\r\n\tRGB_S3TC_DXT1_Format: 2001,\r\n\tRGBA_S3TC_DXT1_Format: 2002,\r\n\tRGBA_S3TC_DXT3_Format: 2003,\r\n\tRGBA_S3TC_DXT5_Format: 2004,\r\n\r\n\t// PVRTC compressed texture formats\r\n\r\n\tRGB_PVRTC_4BPPV1_Format: 2100,\r\n\tRGB_PVRTC_2BPPV1_Format: 2101,\r\n\tRGBA_PVRTC_4BPPV1_Format: 2102,\r\n\tRGBA_PVRTC_2BPPV1_Format: 2103,\r\n\r\n\t// ETC compressed texture formats\r\n\r\n\tRGB_ETC1_Format: 2151,\r\n\r\n\t// Loop styles for AnimationAction\r\n\r\n\tLoopOnce: 2200,\r\n\tLoopRepeat: 2201,\r\n\tLoopPingPong: 2202,\r\n\r\n\t// Interpolation\r\n\r\n\tInterpolateDiscrete: 2300,\r\n\tInterpolateLinear: 2301,\r\n\tInterpolateSmooth: 2302,\r\n\r\n\t// Interpolant ending modes\r\n\r\n\tZeroCurvatureEnding: 2400,\r\n\tZeroSlopeEnding: 2401,\r\n\tWrapAroundEnding: 2402,\r\n\r\n\t// Triangle Draw modes\r\n\r\n\tTrianglesDrawMode: 0,\r\n\tTriangleStripDrawMode: 1,\r\n\tTriangleFanDrawMode: 2,\r\n\r\n\t// Texture Encodings\r\n\r\n\tLinearEncoding: 3000, // No encoding at all.\r\n\tsRGBEncoding: 3001,\r\n\tGammaEncoding: 3007, // uses GAMMA_FACTOR, for backwards compatibility with WebGLRenderer.gammaInput/gammaOutput\r\n\r\n\t// The following Texture Encodings are for RGB-only (no alpha) HDR light emission sources.\r\n\t// These encodings should not specified as output encodings except in rare situations.\r\n\tRGBEEncoding: 3002, // AKA Radiance.\r\n\tLogLuvEncoding: 3003,\r\n\tRGBM7Encoding: 3004,\r\n\tRGBM16Encoding: 3005,\r\n\tRGBDEncoding: 3006, // MaxRange is 256.\r\n\r\n\t// Depth packing strategies\r\n\r\n\tBasicDepthPacking: 3200, // for writing to float textures for high precision or for visualizing results in RGB buffers\r\n\tRGBADepthPacking: 3201 // for packing into RGBA buffers.\r\n\r\n} );\r\n\r\n// File:src/math/Color.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Color = function ( r, g, b ) {\r\n\r\n\tif ( g === undefined && b === undefined ) {\r\n\r\n\t\t// r is THREE.Color, hex or string\r\n\t\treturn this.set( r );\r\n\r\n\t}\r\n\r\n\treturn this.setRGB( r, g, b );\r\n\r\n};\r\n\r\nTHREE.Color.prototype = {\r\n\r\n\tconstructor: THREE.Color,\r\n\r\n\tr: 1, g: 1, b: 1,\r\n\r\n\tset: function ( value ) {\r\n\r\n\t\tif ( value instanceof THREE.Color ) {\r\n\r\n\t\t\tthis.copy( value );\r\n\r\n\t\t} else if ( typeof value === 'number' ) {\r\n\r\n\t\t\tthis.setHex( value );\r\n\r\n\t\t} else if ( typeof value === 'string' ) {\r\n\r\n\t\t\tthis.setStyle( value );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.r = scalar;\r\n\t\tthis.g = scalar;\r\n\t\tthis.b = scalar;\r\n\r\n\t},\r\n\r\n\tsetHex: function ( hex ) {\r\n\r\n\t\thex = Math.floor( hex );\r\n\r\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRGB: function ( r, g, b ) {\r\n\r\n\t\tthis.r = r;\r\n\t\tthis.g = g;\r\n\t\tthis.b = b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetHSL: function () {\r\n\r\n\t\tfunction hue2rgb( p, q, t ) {\r\n\r\n\t\t\tif ( t < 0 ) t += 1;\r\n\t\t\tif ( t > 1 ) t -= 1;\r\n\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\r\n\t\t\tif ( t < 1 / 2 ) return q;\r\n\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\r\n\t\t\treturn p;\r\n\r\n\t\t}\r\n\r\n\t\treturn function ( h, s, l ) {\r\n\r\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\t\th = THREE.Math.euclideanModulo( h, 1 );\r\n\t\t\ts = THREE.Math.clamp( s, 0, 1 );\r\n\t\t\tl = THREE.Math.clamp( l, 0, 1 );\r\n\r\n\t\t\tif ( s === 0 ) {\r\n\r\n\t\t\t\tthis.r = this.g = this.b = l;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\t\tvar q = ( 2 * l ) - p;\r\n\r\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetStyle: function ( style ) {\r\n\r\n\t\tfunction handleAlpha( string ) {\r\n\r\n\t\t\tif ( string === undefined ) return;\r\n\r\n\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tvar m;\r\n\r\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\r\n\r\n\t\t\t// rgb / hsl\r\n\r\n\t\t\tvar color;\r\n\t\t\tvar name = m[ 1 ];\r\n\t\t\tvar components = m[ 2 ];\r\n\r\n\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\tcase 'rgb':\r\n\t\t\t\tcase 'rgba':\r\n\r\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'hsl':\r\n\t\t\t\tcase 'hsla':\r\n\r\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\r\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\r\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\r\n\r\n\t\t\t// hex color\r\n\r\n\t\t\tvar hex = m[ 1 ];\r\n\t\t\tvar size = hex.length;\r\n\r\n\t\t\tif ( size === 3 ) {\r\n\r\n\t\t\t\t// #ff0\r\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\r\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t} else if ( size === 6 ) {\r\n\r\n\t\t\t\t// #ff0000\r\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\r\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( style && style.length > 0 ) {\r\n\r\n\t\t\t// color keywords\r\n\t\t\tvar hex = THREE.ColorKeywords[ style ];\r\n\r\n\t\t\tif ( hex !== undefined ) {\r\n\r\n\t\t\t\t// red\r\n\t\t\t\tthis.setHex( hex );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// unknown color\r\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\r\n\t},\r\n\r\n\tcopy: function ( color ) {\r\n\r\n\t\tthis.r = color.r;\r\n\t\tthis.g = color.g;\r\n\t\tthis.b = color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyGammaToLinear: function ( color, gammaFactor ) {\r\n\r\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\r\n\t\tthis.r = Math.pow( color.r, gammaFactor );\r\n\t\tthis.g = Math.pow( color.g, gammaFactor );\r\n\t\tthis.b = Math.pow( color.b, gammaFactor );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyLinearToGamma: function ( color, gammaFactor ) {\r\n\r\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\r\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\r\n\r\n\t\tthis.r = Math.pow( color.r, safeInverse );\r\n\t\tthis.g = Math.pow( color.g, safeInverse );\r\n\t\tthis.b = Math.pow( color.b, safeInverse );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertGammaToLinear: function () {\r\n\r\n\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\tthis.r = r * r;\r\n\t\tthis.g = g * g;\r\n\t\tthis.b = b * b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertLinearToGamma: function () {\r\n\r\n\t\tthis.r = Math.sqrt( this.r );\r\n\t\tthis.g = Math.sqrt( this.g );\r\n\t\tthis.b = Math.sqrt( this.b );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetHex: function () {\r\n\r\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\r\n\r\n\t},\r\n\r\n\tgetHexString: function () {\r\n\r\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\r\n\r\n\t},\r\n\r\n\tgetHSL: function ( optionalTarget ) {\r\n\r\n\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\r\n\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\r\n\r\n\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\tvar max = Math.max( r, g, b );\r\n\t\tvar min = Math.min( r, g, b );\r\n\r\n\t\tvar hue, saturation;\r\n\t\tvar lightness = ( min + max ) / 2.0;\r\n\r\n\t\tif ( min === max ) {\r\n\r\n\t\t\thue = 0;\r\n\t\t\tsaturation = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar delta = max - min;\r\n\r\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\r\n\t\t\tswitch ( max ) {\r\n\r\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\r\n\t\t\t}\r\n\r\n\t\t\thue /= 6;\r\n\r\n\t\t}\r\n\r\n\t\thsl.h = hue;\r\n\t\thsl.s = saturation;\r\n\t\thsl.l = lightness;\r\n\r\n\t\treturn hsl;\r\n\r\n\t},\r\n\r\n\tgetStyle: function () {\r\n\r\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\r\n\r\n\t},\r\n\r\n\toffsetHSL: function ( h, s, l ) {\r\n\r\n\t\tvar hsl = this.getHSL();\r\n\r\n\t\thsl.h += h; hsl.s += s; hsl.l += l;\r\n\r\n\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( color ) {\r\n\r\n\t\tthis.r += color.r;\r\n\t\tthis.g += color.g;\r\n\t\tthis.b += color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddColors: function ( color1, color2 ) {\r\n\r\n\t\tthis.r = color1.r + color2.r;\r\n\t\tthis.g = color1.g + color2.g;\r\n\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.r += s;\r\n\t\tthis.g += s;\r\n\t\tthis.b += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( color ) {\r\n\r\n\t\tthis.r *= color.r;\r\n\t\tthis.g *= color.g;\r\n\t\tthis.b *= color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.r *= s;\r\n\t\tthis.g *= s;\r\n\t\tthis.b *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( color, alpha ) {\r\n\r\n\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( c ) {\r\n\r\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.r = array[ offset ];\r\n\t\tthis.g = array[ offset + 1 ];\r\n\t\tthis.b = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.r;\r\n\t\tarray[ offset + 1 ] = this.g;\r\n\t\tarray[ offset + 2 ] = this.b;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\r\n// File:src/math/Quaternion.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Quaternion = function ( x, y, z, w ) {\r\n\r\n\tthis._x = x || 0;\r\n\tthis._y = y || 0;\r\n\tthis._z = z || 0;\r\n\tthis._w = ( w !== undefined ) ? w : 1;\r\n\r\n};\r\n\r\nTHREE.Quaternion.prototype = {\r\n\r\n\tconstructor: THREE.Quaternion,\r\n\r\n\tget x () {\r\n\r\n\t\treturn this._x;\r\n\r\n\t},\r\n\r\n\tset x ( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget y () {\r\n\r\n\t\treturn this._y;\r\n\r\n\t},\r\n\r\n\tset y ( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget z () {\r\n\r\n\t\treturn this._z;\r\n\r\n\t},\r\n\r\n\tset z ( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget w () {\r\n\r\n\t\treturn this._w;\r\n\r\n\t},\r\n\r\n\tset w ( value ) {\r\n\r\n\t\tthis._w = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t},\r\n\r\n\tcopy: function ( quaternion ) {\r\n\r\n\t\tthis._x = quaternion.x;\r\n\t\tthis._y = quaternion.y;\r\n\t\tthis._z = quaternion.z;\r\n\t\tthis._w = quaternion.w;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromEuler: function ( euler, update ) {\r\n\r\n\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\r\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t}\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\tvar c1 = Math.cos( euler._x / 2 );\r\n\t\tvar c2 = Math.cos( euler._y / 2 );\r\n\t\tvar c3 = Math.cos( euler._z / 2 );\r\n\t\tvar s1 = Math.sin( euler._x / 2 );\r\n\t\tvar s2 = Math.sin( euler._y / 2 );\r\n\t\tvar s3 = Math.sin( euler._z / 2 );\r\n\r\n\t\tvar order = euler.order;\r\n\r\n\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t}\r\n\r\n\t\tif ( update !== false ) this.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\tthis._x = axis.x * s;\r\n\t\tthis._y = axis.y * s;\r\n\t\tthis._z = axis.z * s;\r\n\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\ts;\r\n\r\n\t\tif ( trace > 0 ) {\r\n\r\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\tthis._w = 0.25 / s;\r\n\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\tthis._x = 0.25 * s;\r\n\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\tthis._y = 0.25 * s;\r\n\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t}\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromUnitVectors: function () {\r\n\r\n\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\r\n\r\n\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\tvar v1, r;\r\n\r\n\t\tvar EPS = 0.000001;\r\n\r\n\t\treturn function ( vFrom, vTo ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tr = vFrom.dot( vTo ) + 1;\r\n\r\n\t\t\tif ( r < EPS ) {\r\n\r\n\t\t\t\tr = 0;\r\n\r\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tv1.crossVectors( vFrom, vTo );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._x = v1.x;\r\n\t\t\tthis._y = v1.y;\r\n\t\t\tthis._z = v1.z;\r\n\t\t\tthis._w = r;\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tinverse: function () {\r\n\r\n\t\treturn this.conjugate().normalize();\r\n\r\n\t},\r\n\r\n\tconjugate: function () {\r\n\r\n\t\tthis._x *= - 1;\r\n\t\tthis._y *= - 1;\r\n\t\tthis._z *= - 1;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\tvar l = this.length();\r\n\r\n\t\tif ( l === 0 ) {\r\n\r\n\t\t\tthis._x = 0;\r\n\t\t\tthis._y = 0;\r\n\t\t\tthis._z = 0;\r\n\t\t\tthis._w = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl = 1 / l;\r\n\r\n\t\t\tthis._x = this._x * l;\r\n\t\t\tthis._y = this._y * l;\r\n\t\t\tthis._z = this._z * l;\r\n\t\t\tthis._w = this._w * l;\r\n\r\n\t\t}\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( q, p ) {\r\n\r\n\t\tif ( p !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t},\r\n\r\n\tpremultiply: function ( q ) {\r\n\r\n\t\treturn this.multiplyQuaternions( q, this );\r\n\r\n\t},\r\n\r\n\tmultiplyQuaternions: function ( a, b ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tslerp: function ( qb, t ) {\r\n\r\n\t\tif ( t === 0 ) return this;\r\n\t\tif ( t === 1 ) return this.copy( qb );\r\n\r\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\tthis._w = - qb._w;\r\n\t\t\tthis._x = - qb._x;\r\n\t\t\tthis._y = - qb._y;\r\n\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.copy( qb );\r\n\r\n\t\t}\r\n\r\n\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\tthis._w = w;\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\r\n\r\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\r\n\r\n\t\t\tthis._w = 0.5 * ( w + this._w );\r\n\t\t\tthis._x = 0.5 * ( x + this._x );\r\n\t\t\tthis._y = 0.5 * ( y + this._y );\r\n\t\t\tthis._z = 0.5 * ( z + this._z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( quaternion ) {\r\n\r\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis._x = array[ offset ];\r\n\t\tthis._y = array[ offset + 1 ];\r\n\t\tthis._z = array[ offset + 2 ];\r\n\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tonChange: function ( callback ) {\r\n\r\n\t\tthis.onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tonChangeCallback: function () {}\r\n\r\n};\r\n\r\nObject.assign( THREE.Quaternion, {\r\n\r\n\tslerp: function( qa, qb, qm, t ) {\r\n\r\n\t\treturn qm.copy( qa ).slerp( qb, t );\r\n\r\n\t},\r\n\r\n\tslerpFlat: function(\r\n\t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\r\n\r\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\r\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\tvar s = 1 - t,\r\n\r\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\r\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar tDir = t * dir;\r\n\r\n\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\tx0 *= f;\r\n\t\t\t\ty0 *= f;\r\n\t\t\t\tz0 *= f;\r\n\t\t\t\tw0 *= f;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdst[ dstOffset ] = x0;\r\n\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/math/Vector2.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author egraether / http://egraether.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.Vector2 = function ( x, y ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\r\n};\r\n\r\nTHREE.Vector2.prototype = {\r\n\r\n\tconstructor: THREE.Vector2,\r\n\r\n\tget width() {\r\n\r\n\t\treturn this.x;\r\n\r\n\t},\r\n\r\n\tset width( value ) {\r\n\r\n\t\tthis.x = value;\r\n\r\n\t},\r\n\r\n\tget height() {\r\n\r\n\t\treturn this.y;\r\n\r\n\t},\r\n\r\n\tset height( value ) {\r\n\r\n\t\tthis.y = value;\r\n\r\n\t},\r\n\r\n\t//\r\n\r\n\tset: function ( x, y ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tif ( isFinite( scalar ) ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min, max;\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\tmin = new THREE.Vector2();\r\n\t\t\t\tmax = new THREE.Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.set( minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclampLength: function ( min, max ) {\r\n\r\n\t\tvar length = this.length();\r\n\r\n\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\r\n\r\n\t},\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tangle: function () {\r\n\r\n\t\t// computes the angle in radians with respect to the positive x-axis\r\n\r\n\t\tvar angle = Math.atan2( this.y, this.x );\r\n\r\n\t\tif ( angle < 0 ) angle += 2 * Math.PI;\r\n\r\n\t\treturn angle;\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\treturn dx * dx + dy * dy;\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.multiplyScalar( length / this.length() );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tindex = index * attribute.itemSize + offset;\r\n\r\n\t\tthis.x = attribute.array[ index ];\r\n\t\tthis.y = attribute.array[ index + 1 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateAround: function ( center, angle ) {\r\n\r\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\tvar x = this.x - center.x;\r\n\t\tvar y = this.y - center.y;\r\n\r\n\t\tthis.x = x * c - y * s + center.x;\r\n\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Vector3.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author *kile / http://kile.stravaganza.org/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Vector3 = function ( x, y, z ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\r\n};\r\n\r\nTHREE.Vector3.prototype = {\r\n\r\n\tconstructor: THREE.Vector3,\r\n\r\n\tset: function ( x, y, z ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tif ( isFinite( scalar ) ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x * b.x;\r\n\t\tthis.y = a.y * b.y;\r\n\t\tthis.z = a.z * b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyEuler: function () {\r\n\r\n\t\tvar quaternion;\r\n\r\n\t\treturn function applyEuler( euler ) {\r\n\r\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\r\n\r\n\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyAxisAngle: function () {\r\n\r\n\t\tvar quaternion;\r\n\r\n\t\treturn function applyAxisAngle( axis, angle ) {\r\n\r\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\r\n\r\n\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyMatrix3: function ( m ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyProjection: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 projection matrix\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar e = m.elements;\r\n\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\r\n\r\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\r\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\r\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyQuaternion: function ( q ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n\t\t// calculate quat * vector\r\n\r\n\t\tvar ix =  qw * x + qy * z - qz * y;\r\n\t\tvar iy =  qw * y + qz * x - qx * z;\r\n\t\tvar iz =  qw * z + qx * y - qy * x;\r\n\t\tvar iw = - qx * x - qy * y - qz * z;\r\n\r\n\t\t// calculate result * inverse quat\r\n\r\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tproject: function () {\r\n\r\n\t\tvar matrix;\r\n\r\n\t\treturn function project( camera ) {\r\n\r\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\r\n\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\r\n\t\t\treturn this.applyProjection( matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tunproject: function () {\r\n\r\n\t\tvar matrix;\r\n\r\n\t\treturn function unproject( camera ) {\r\n\r\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\r\n\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\r\n\t\t\treturn this.applyProjection( matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttransformDirection: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t// vector interpreted as a direction\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\treturn this.normalize();\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min, max;\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\tmin = new THREE.Vector3();\r\n\t\t\t\tmax = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.set( minVal, minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclampLength: function ( min, max ) {\r\n\r\n\t\tvar length = this.length();\r\n\r\n\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\r\n\r\n\t},\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.multiplyScalar( length / this.length() );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t},\r\n\r\n\tcross: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tthis.x = y * v.z - z * v.y;\r\n\t\tthis.y = z * v.x - x * v.z;\r\n\t\tthis.z = x * v.y - y * v.x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcrossVectors: function ( a, b ) {\r\n\r\n\t\tvar ax = a.x, ay = a.y, az = a.z;\r\n\t\tvar bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\tthis.x = ay * bz - az * by;\r\n\t\tthis.y = az * bx - ax * bz;\r\n\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tprojectOnVector: function () {\r\n\r\n\t\tvar v1, dot;\r\n\r\n\t\treturn function projectOnVector( vector ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tv1.copy( vector ).normalize();\r\n\r\n\t\t\tdot = this.dot( v1 );\r\n\r\n\t\t\treturn this.copy( v1 ).multiplyScalar( dot );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tprojectOnPlane: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function projectOnPlane( planeNormal ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\t\treturn this.sub( v1 );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\treflect: function () {\r\n\r\n\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t// normal is assumed to have unit length\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function reflect( normal ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tangleTo: function ( v ) {\r\n\r\n\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\treturn Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n\r\n\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t},\r\n\r\n\tsetFromSpherical: function( s ) {\r\n\r\n\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\r\n\r\n\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\r\n\t\tthis.y = Math.cos( s.phi ) * s.radius;\r\n\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrixPosition: function ( m ) {\r\n\r\n\t\treturn this.setFromMatrixColumn( m, 3 );\r\n\r\n\t},\r\n\r\n\tsetFromMatrixScale: function ( m ) {\r\n\r\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\tthis.x = sx;\r\n\t\tthis.y = sy;\r\n\t\tthis.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrixColumn: function ( m, index ) {\r\n\r\n\t\tif ( typeof m === 'number' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\r\n\t\t\tvar temp = m\r\n\t\t\tm = index;\r\n\t\t\tindex = temp;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tindex = index * attribute.itemSize + offset;\r\n\r\n\t\tthis.x = attribute.array[ index ];\r\n\t\tthis.y = attribute.array[ index + 1 ];\r\n\t\tthis.z = attribute.array[ index + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Vector4.js\r\n\r\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Vector4 = function ( x, y, z, w ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n};\r\n\r\nTHREE.Vector4.prototype = {\r\n\r\n\tconstructor: THREE.Vector4,\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\t\tthis.w = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetW: function ( w ) {\r\n\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tcase 3: this.w = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tcase 3: return this.w;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\t\tthis.w += v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\t\tthis.w += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\t\tthis.w = a.w + b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\t\tthis.w += v.w * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\t\tthis.w -= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\t\tthis.w -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\t\tthis.w = a.w - b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tif ( isFinite( scalar ) ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\t\t\tthis.w *= scalar;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\t\t\tthis.w = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\t this.x = 1;\r\n\t\t\t this.y = 0;\r\n\t\t\t this.z = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t this.x = q.x / s;\r\n\t\t\t this.y = q.y / s;\r\n\t\t\t this.z = q.z / s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\tte = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t// singularity found\r\n\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\tangle = Math.PI;\r\n\r\n\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t}\r\n\r\n\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\r\n\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\r\n\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min, max;\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\tmin = new THREE.Vector4();\r\n\t\t\t\tmax = new THREE.Vector4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\t\tthis.w = Math.round( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\t\tthis.w = - this.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.multiplyScalar( length / this.length() );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tindex = index * attribute.itemSize + offset;\r\n\r\n\t\tthis.x = attribute.array[ index ];\r\n\t\tthis.y = attribute.array[ index + 1 ];\r\n\t\tthis.z = attribute.array[ index + 2 ];\r\n\t\tthis.w = attribute.array[ index + 3 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Euler.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Euler = function ( x, y, z, order ) {\r\n\r\n\tthis._x = x || 0;\r\n\tthis._y = y || 0;\r\n\tthis._z = z || 0;\r\n\tthis._order = order || THREE.Euler.DefaultOrder;\r\n\r\n};\r\n\r\nTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\r\n\r\nTHREE.Euler.DefaultOrder = 'XYZ';\r\n\r\nTHREE.Euler.prototype = {\r\n\r\n\tconstructor: THREE.Euler,\r\n\r\n\tget x () {\r\n\r\n\t\treturn this._x;\r\n\r\n\t},\r\n\r\n\tset x ( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget y () {\r\n\r\n\t\treturn this._y;\r\n\r\n\t},\r\n\r\n\tset y ( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget z () {\r\n\r\n\t\treturn this._z;\r\n\r\n\t},\r\n\r\n\tset z ( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget order () {\r\n\r\n\t\treturn this._order;\r\n\r\n\t},\r\n\r\n\tset order ( value ) {\r\n\r\n\t\tthis._order = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tset: function ( x, y, z, order ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._order = order || this._order;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\r\n\t},\r\n\r\n\tcopy: function ( euler ) {\r\n\r\n\t\tthis._x = euler._x;\r\n\t\tthis._y = euler._y;\r\n\t\tthis._z = euler._z;\r\n\t\tthis._order = euler._order;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m, order, update ) {\r\n\r\n\t\tvar clamp = THREE.Math.clamp;\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements;\r\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\torder = order || this._order;\r\n\r\n\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._y = 0;\r\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\r\n\r\n\t\t}\r\n\r\n\t\tthis._order = order;\r\n\r\n\t\tif ( update !== false ) this.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromQuaternion: function () {\r\n\r\n\t\tvar matrix;\r\n\r\n\t\treturn function ( q, order, update ) {\r\n\r\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\r\n\t\t\tmatrix.makeRotationFromQuaternion( q );\r\n\r\n\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetFromVector3: function ( v, order ) {\r\n\r\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\r\n\r\n\t},\r\n\r\n\treorder: function () {\r\n\r\n\t\t// WARNING: this discards revolution information -bhouston\r\n\r\n\t\tvar q = new THREE.Quaternion();\r\n\r\n\t\treturn function ( newOrder ) {\r\n\r\n\t\t\tq.setFromEuler( this );\r\n\t\t\t\r\n\t\t\treturn this.setFromQuaternion( q, newOrder );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tequals: function ( euler ) {\r\n\r\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array ) {\r\n\r\n\t\tthis._x = array[ 0 ];\r\n\t\tthis._y = array[ 1 ];\r\n\t\tthis._z = array[ 2 ];\r\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\ttoVector3: function ( optionalResult ) {\r\n\r\n\t\tif ( optionalResult ) {\r\n\r\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn new THREE.Vector3( this._x, this._y, this._z );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tonChange: function ( callback ) {\r\n\r\n\t\tthis.onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tonChangeCallback: function () {}\r\n\r\n};\r\n\r\n// File:src/math/Line3.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Line3 = function ( start, end ) {\r\n\r\n\tthis.start = ( start !== undefined ) ? start : new THREE.Vector3();\r\n\tthis.end = ( end !== undefined ) ? end : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Line3.prototype = {\r\n\r\n\tconstructor: THREE.Line3,\r\n\r\n\tset: function ( start, end ) {\r\n\r\n\t\tthis.start.copy( start );\r\n\t\tthis.end.copy( end );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( line ) {\r\n\r\n\t\tthis.start.copy( line.start );\r\n\t\tthis.end.copy( line.end );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tdelta: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.subVectors( this.end, this.start );\r\n\r\n\t},\r\n\r\n\tdistanceSq: function () {\r\n\r\n\t\treturn this.start.distanceToSquared( this.end );\r\n\r\n\t},\r\n\r\n\tdistance: function () {\r\n\r\n\t\treturn this.start.distanceTo( this.end );\r\n\r\n\t},\r\n\r\n\tat: function ( t, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\r\n\r\n\t},\r\n\r\n\tclosestPointToPointParameter: function () {\r\n\r\n\t\tvar startP = new THREE.Vector3();\r\n\t\tvar startEnd = new THREE.Vector3();\r\n\r\n\t\treturn function ( point, clampToLine ) {\r\n\r\n\t\t\tstartP.subVectors( point, this.start );\r\n\t\t\tstartEnd.subVectors( this.end, this.start );\r\n\r\n\t\t\tvar startEnd2 = startEnd.dot( startEnd );\r\n\t\t\tvar startEnd_startP = startEnd.dot( startP );\r\n\r\n\t\t\tvar t = startEnd_startP / startEnd2;\r\n\r\n\t\t\tif ( clampToLine ) {\r\n\r\n\t\t\t\tt = THREE.Math.clamp( t, 0, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn t;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\r\n\r\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\tthis.start.applyMatrix4( matrix );\r\n\t\tthis.end.applyMatrix4( matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( line ) {\r\n\r\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Box2.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Box2 = function ( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( + Infinity, + Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );\r\n\r\n};\r\n\r\nTHREE.Box2.prototype = {\r\n\r\n\tconstructor: THREE.Box2,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector2();\r\n\r\n\t\treturn function ( center, size ) {\r\n\r\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = + Infinity;\r\n\t\tthis.max.x = this.max.y = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tisEmpty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tsize: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t     point.y < this.min.y || point.y > this.max.y ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point, optionalTarget ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\r\n\t\treturn result.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\r\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector2();\r\n\r\n\t\treturn function ( point ) {\r\n\r\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Box3.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Box3 = function ( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( + Infinity, + Infinity, + Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );\r\n\r\n};\r\n\r\nTHREE.Box3.prototype = {\r\n\r\n\tconstructor: THREE.Box3,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromArray: function ( array ) {\r\n\r\n\t\tvar minX = + Infinity;\r\n\t\tvar minY = + Infinity;\r\n\t\tvar minZ = + Infinity;\r\n\r\n\t\tvar maxX = - Infinity;\r\n\t\tvar maxY = - Infinity;\r\n\t\tvar maxZ = - Infinity;\r\n\r\n\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\tvar x = array[ i ];\r\n\t\t\tvar y = array[ i + 1 ];\r\n\t\t\tvar z = array[ i + 2 ];\r\n\r\n\t\t\tif ( x < minX ) minX = x;\r\n\t\t\tif ( y < minY ) minY = y;\r\n\t\t\tif ( z < minZ ) minZ = z;\r\n\r\n\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\tif ( y > maxY ) maxY = y;\r\n\t\t\tif ( z > maxZ ) maxZ = z;\r\n\r\n\t\t}\r\n\r\n\t\tthis.min.set( minX, minY, minZ );\r\n\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( center, size ) {\r\n\r\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetFromObject: function () {\r\n\r\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t// accounting for both the object's, and children's, world transforms\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( object ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tobject.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\tobject.traverse( function ( node ) {\r\n\r\n\t\t\t\tvar geometry = node.geometry;\r\n\r\n\t\t\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\r\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\r\n\r\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry && geometry.attributes[ 'position' ] !== undefined ) {\r\n\r\n\t\t\t\t\t\tvar positions = geometry.attributes[ 'position' ].array;\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\tv1.fromArray( positions, i );\r\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\r\n\r\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\r\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tisEmpty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tsize: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t\t point.y < this.min.y || point.y > this.max.y ||\r\n\t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\r\n\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point, optionalTarget ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn result.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\r\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tintersectsSphere: ( function () {\r\n\r\n\t\tvar closestPoint;\r\n\r\n\t\treturn function intersectsSphere( sphere ) {\r\n\r\n\t\t\tif ( closestPoint === undefined ) closestPoint = new THREE.Vector3();\r\n\r\n\t\t\t// Find the point on the AABB closest to the sphere center.\r\n\t\t\tthis.clampPoint( sphere.center, closestPoint );\r\n\r\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\r\n\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t// We compute the minimum and maximum dot product values. If those values\r\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\r\n\r\n\t\tvar min, max;\r\n\r\n\t\tif ( plane.normal.x > 0 ) {\r\n\r\n\t\t\tmin = plane.normal.x * this.min.x;\r\n\t\t\tmax = plane.normal.x * this.max.x;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin = plane.normal.x * this.max.x;\r\n\t\t\tmax = plane.normal.x * this.min.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.y > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.y * this.min.y;\r\n\t\t\tmax += plane.normal.y * this.max.y;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.y * this.max.y;\r\n\t\t\tmax += plane.normal.y * this.min.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.z > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.z * this.min.z;\r\n\t\t\tmax += plane.normal.z * this.max.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.z * this.max.z;\r\n\t\t\tmax += plane.normal.z * this.min.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn ( min <= plane.constant && max >= plane.constant );\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( point ) {\r\n\r\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetBoundingSphere: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Sphere();\r\n\r\n\t\t\tresult.center = this.center();\r\n\t\t\tresult.radius = this.size( v1 ).length() * 0.5;\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\r\n\t\tif( this.isEmpty() ) this.makeEmpty();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function () {\r\n\r\n\t\tvar points = [\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3()\r\n\t\t];\r\n\r\n\t\treturn function ( matrix ) {\r\n\r\n\t\t\t// transform of empty box is an empty box.\r\n\t\t\tif( this.isEmpty() ) return this;\r\n\r\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\r\n\r\n\t\t\tthis.setFromPoints( points );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Matrix3.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n * @author tschw\r\n */\r\n\r\nTHREE.Matrix3 = function () {\r\n\r\n\tthis.elements = new Float32Array( [\r\n\r\n\t\t1, 0, 0,\r\n\t\t0, 1, 0,\r\n\t\t0, 0, 1\r\n\r\n\t] );\r\n\r\n\tif ( arguments.length > 0 ) {\r\n\r\n\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Matrix3.prototype = {\r\n\r\n\tconstructor: THREE.Matrix3,\r\n\r\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\r\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\r\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().fromArray( this.elements );\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tvar me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\r\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\r\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrix4: function( m ) {\r\n\r\n\t\tvar me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 4 ], me[  8 ],\r\n\t\t\tme[ 1 ], me[ 5 ], me[  9 ],\r\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyToVector3Array: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function ( array, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = array.length;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\r\n\r\n\t\t\t\tv1.fromArray( array, j );\r\n\t\t\t\tv1.applyMatrix3( this );\r\n\t\t\t\tv1.toArray( array, j );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyToBuffer: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function applyToBuffer( buffer, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\r\n\r\n\t\t\t\tv1.x = buffer.getX( j );\r\n\t\t\t\tv1.y = buffer.getY( j );\r\n\t\t\t\tv1.z = buffer.getZ( j );\r\n\r\n\t\t\t\tv1.applyMatrix3( this );\r\n\r\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buffer;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\r\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( matrix, throwOnDegenerate ) {\r\n\r\n\t\tif ( matrix instanceof THREE.Matrix4 ) {\r\n\r\n\t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\r\n\r\n\t\t}\r\n\r\n\t\tvar me = matrix.elements,\r\n\t\t\tte = this.elements,\r\n\r\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\r\n\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\r\n\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\r\n\r\n\t\t\tt11 = n33 * n22 - n32 * n23,\r\n\t\t\tt12 = n32 * n13 - n33 * n12,\r\n\t\t\tt13 = n23 * n12 - n22 * n13,\r\n\r\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\r\n\r\n\t\tif ( det === 0 ) {\r\n\r\n\t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnDegenerate || false ) {\r\n\r\n\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.identity();\r\n\t\t}\r\n\t\t\r\n\t\tvar detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\r\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\r\n\r\n\t\tte[ 3 ] = t12 * detInv;\r\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\r\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\r\n\r\n\t\tte[ 6 ] = t13 * detInv;\r\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\r\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar tmp, m = this.elements;\r\n\r\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\r\n\t\t\t\t\"- just use .toArray instead.\" );\r\n\r\n\t\treturn this.toArray( array, offset );\r\n\r\n\t},\r\n\r\n\tgetNormalMatrix: function ( matrix4 ) {\r\n\r\n\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\r\n\r\n\t},\r\n\r\n\ttransposeIntoArray: function ( r ) {\r\n\r\n\t\tvar m = this.elements;\r\n\r\n\t\tr[ 0 ] = m[ 0 ];\r\n\t\tr[ 1 ] = m[ 3 ];\r\n\t\tr[ 2 ] = m[ 6 ];\r\n\t\tr[ 3 ] = m[ 1 ];\r\n\t\tr[ 4 ] = m[ 4 ];\r\n\t\tr[ 5 ] = m[ 7 ];\r\n\t\tr[ 6 ] = m[ 2 ];\r\n\t\tr[ 7 ] = m[ 5 ];\r\n\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array ) {\r\n\r\n\t\tthis.elements.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\tarray[ offset + 8 ]  = te[ 8 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Matrix4.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author jordi_ros / http://plattsoft.com\r\n * @author D1plo1d / http://github.com/D1plo1d\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author timknip / http://www.floorplanner.com/\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Matrix4 = function () {\r\n\r\n\tthis.elements = new Float32Array( [\r\n\r\n\t\t1, 0, 0, 0,\r\n\t\t0, 1, 0, 0,\r\n\t\t0, 0, 1, 0,\r\n\t\t0, 0, 0, 1\r\n\r\n\t] );\r\n\r\n\tif ( arguments.length > 0 ) {\r\n\r\n\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Matrix4.prototype = {\r\n\r\n\tconstructor: THREE.Matrix4,\r\n\r\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Matrix4().fromArray( this.elements );\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tthis.elements.set( m.elements );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyPosition: function ( m ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tte[ 12 ] = me[ 12 ];\r\n\t\tte[ 13 ] = me[ 13 ];\r\n\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\tthis.set(\r\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t0,       0,       0,       1\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractRotation: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function ( m ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\r\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\r\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmakeRotationFromEuler: function ( euler ) {\r\n\r\n\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t}\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\r\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - c * f;\r\n\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\tte[ 1 ] = a * f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\tte[ 4 ] = - a * f;\r\n\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\tte[ 2 ] = - a * d;\r\n\t\t\tte[ 6 ] = b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\tte[ 1 ] = c * f;\r\n\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\tte[ 2 ] = - d;\r\n\t\t\tte[ 6 ] = b * c;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\tte[ 1 ] = f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\tte[ 2 ] = - d * e;\r\n\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - f;\r\n\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\tte[ 6 ] = b * e;\r\n\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t}\r\n\r\n\t\t// last column\r\n\t\tte[ 3 ] = 0;\r\n\t\tte[ 7 ] = 0;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\t// bottom row\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationFromQuaternion: function ( q ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\r\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\r\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\tte[ 0 ] = 1 - ( yy + zz );\r\n\t\tte[ 4 ] = xy - wz;\r\n\t\tte[ 8 ] = xz + wy;\r\n\r\n\t\tte[ 1 ] = xy + wz;\r\n\t\tte[ 5 ] = 1 - ( xx + zz );\r\n\t\tte[ 9 ] = yz - wx;\r\n\r\n\t\tte[ 2 ] = xz - wy;\r\n\t\tte[ 6 ] = yz + wx;\r\n\t\tte[ 10 ] = 1 - ( xx + yy );\r\n\r\n\t\t// last column\r\n\t\tte[ 3 ] = 0;\r\n\t\tte[ 7 ] = 0;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\t// bottom row\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar x, y, z;\r\n\r\n\t\treturn function ( eye, target, up ) {\r\n\r\n\t\t\tif ( x === undefined ) {\r\n\r\n\t\t\t\tx = new THREE.Vector3();\r\n\t\t\t\ty = new THREE.Vector3();\r\n\t\t\t\tz = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tz.subVectors( eye, target ).normalize();\r\n\r\n\t\t\tif ( z.lengthSq() === 0 ) {\r\n\r\n\t\t\t\tz.z = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tx.crossVectors( up, z ).normalize();\r\n\r\n\t\t\tif ( x.lengthSq() === 0 ) {\r\n\r\n\t\t\t\tz.z += 0.0001;\r\n\t\t\t\tx.crossVectors( up, z ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ty.crossVectors( z, x );\r\n\r\n\r\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\r\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\r\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmultiply: function ( m, n ) {\r\n\r\n\t\tif ( n !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\treturn this.multiplyMatrices( m, n );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t},\r\n\r\n\tpremultiply: function ( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t},\r\n\r\n\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\tvar ae = a.elements;\r\n\t\tvar be = b.elements;\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyToArray: function ( a, b, r ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tthis.multiplyMatrices( a, b );\r\n\r\n\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\r\n\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\r\n\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\r\n\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyToVector3Array: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function ( array, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = array.length;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\r\n\r\n\t\t\t\tv1.fromArray( array, j );\r\n\t\t\t\tv1.applyMatrix4( this );\r\n\t\t\t\tv1.toArray( array, j );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyToBuffer: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function applyToBuffer( buffer, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\r\n\r\n\t\t\t\tv1.x = buffer.getX( j );\r\n\t\t\t\tv1.y = buffer.getY( j );\r\n\t\t\t\tv1.z = buffer.getZ( j );\r\n\r\n\t\t\t\tv1.applyMatrix4( this );\r\n\r\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buffer;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t//TODO: make this more efficient\r\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\treturn (\r\n\t\t\tn41 * (\r\n\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t - n12 * n23 * n34\r\n\t\t\t) +\r\n\t\t\tn42 * (\r\n\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t - n14 * n23 * n31\r\n\t\t\t) +\r\n\t\t\tn43 * (\r\n\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t - n12 * n24 * n31\r\n\t\t\t) +\r\n\t\t\tn44 * (\r\n\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t + n12 * n23 * n31\r\n\t\t\t)\r\n\r\n\t\t);\r\n\r\n\t},\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar tmp;\r\n\r\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\r\n\t\t\t\t\"- just use .toArray instead.\" );\r\n\r\n\t\treturn this.toArray( array, offset );\r\n\r\n\t},\r\n\r\n\tgetPosition: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\r\n\r\n\t\t\treturn v1.setFromMatrixColumn( this, 3 );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetPosition: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 12 ] = v.x;\r\n\t\tte[ 13 ] = v.y;\r\n\t\tte[ 14 ] = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( m, throwOnDegenerate ) {\r\n\r\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\tvar te = this.elements,\r\n\t\t\tme = m.elements,\r\n\r\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\r\n\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\r\n\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\r\n\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\r\n\r\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n\t\tif ( det === 0 ) {\r\n\r\n\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnDegenerate || false ) {\r\n\r\n\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.identity();\r\n\r\n\t\t}\r\n\t\t\r\n\t\tvar detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\r\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\r\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 4 ] = t12 * detInv;\r\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\r\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\r\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 8 ] = t13 * detInv;\r\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\r\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\r\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\r\n\r\n\t\tte[ 12 ] = t14 * detInv;\r\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\r\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\r\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tscale: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetMaxScaleOnAxis: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t},\r\n\r\n\tmakeTranslation: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, x,\r\n\t\t\t0, 1, 0, y,\r\n\t\t\t0, 0, 1, z,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationX: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0,  0, 0,\r\n\t\t\t0, c, - s, 0,\r\n\t\t\t0, s,  c, 0,\r\n\t\t\t0, 0,  0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationY: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t c, 0, s, 0,\r\n\t\t\t 0, 1, 0, 0,\r\n\t\t\t- s, 0, c, 0,\r\n\t\t\t 0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationZ: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, - s, 0, 0,\r\n\t\t\ts,  c, 0, 0,\r\n\t\t\t0,  0, 1, 0,\r\n\t\t\t0,  0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationAxis: function ( axis, angle ) {\r\n\r\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\t\tvar t = 1 - c;\r\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\tvar tx = t * x, ty = t * y;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\t return this;\r\n\r\n\t},\r\n\r\n\tmakeScale: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0, 0,\r\n\t\t\t0, y, 0, 0,\r\n\t\t\t0, 0, z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcompose: function ( position, quaternion, scale ) {\r\n\r\n\t\tthis.makeRotationFromQuaternion( quaternion );\r\n\t\tthis.scale( scale );\r\n\t\tthis.setPosition( position );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdecompose: function () {\r\n\r\n\t\tvar vector, matrix;\r\n\r\n\t\treturn function ( position, quaternion, scale ) {\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tvector = new THREE.Vector3();\r\n\t\t\t\tmatrix = new THREE.Matrix4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t\t// if determine is negative, we need to invert one scale\r\n\t\t\tvar det = this.determinant();\r\n\t\t\tif ( det < 0 ) {\r\n\r\n\t\t\t\tsx = - sx;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tposition.x = te[ 12 ];\r\n\t\t\tposition.y = te[ 13 ];\r\n\t\t\tposition.z = te[ 14 ];\r\n\r\n\t\t\t// scale the rotation part\r\n\r\n\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\r\n\r\n\t\t\tvar invSX = 1 / sx;\r\n\t\t\tvar invSY = 1 / sy;\r\n\t\t\tvar invSZ = 1 / sz;\r\n\r\n\t\t\tmatrix.elements[ 0 ] *= invSX;\r\n\t\t\tmatrix.elements[ 1 ] *= invSX;\r\n\t\t\tmatrix.elements[ 2 ] *= invSX;\r\n\r\n\t\t\tmatrix.elements[ 4 ] *= invSY;\r\n\t\t\tmatrix.elements[ 5 ] *= invSY;\r\n\t\t\tmatrix.elements[ 6 ] *= invSY;\r\n\r\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\r\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\r\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\r\n\r\n\t\t\tquaternion.setFromRotationMatrix( matrix );\r\n\r\n\t\t\tscale.x = sx;\r\n\t\t\tscale.y = sy;\r\n\t\t\tscale.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = 2 * near / ( right - left );\r\n\t\tvar y = 2 * near / ( top - bottom );\r\n\r\n\t\tvar a = ( right + left ) / ( right - left );\r\n\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\tvar d = - 2 * far * near / ( far - near );\r\n\r\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakePerspective: function ( fov, aspect, near, far ) {\r\n\r\n\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\r\n\t\tvar ymin = - ymax;\r\n\t\tvar xmin = ymin * aspect;\r\n\t\tvar xmax = ymax * aspect;\r\n\r\n\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\r\n\r\n\t},\r\n\r\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar w = 1.0 / ( right - left );\r\n\t\tvar h = 1.0 / ( top - bottom );\r\n\t\tvar p = 1.0 / ( far - near );\r\n\r\n\t\tvar x = ( right + left ) * w;\r\n\t\tvar y = ( top + bottom ) * h;\r\n\t\tvar z = ( far + near ) * p;\r\n\r\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( matrix ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = matrix.elements;\r\n\r\n\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array ) {\r\n\r\n\t\tthis.elements.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\tarray[ offset + 8 ]  = te[ 8 ];\r\n\t\tarray[ offset + 9 ]  = te[ 9 ];\r\n\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Ray.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Ray = function ( origin, direction ) {\r\n\r\n\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\r\n\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Ray.prototype = {\r\n\r\n\tconstructor: THREE.Ray,\r\n\r\n\tset: function ( origin, direction ) {\r\n\r\n\t\tthis.origin.copy( origin );\r\n\t\tthis.direction.copy( direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( ray ) {\r\n\r\n\t\tthis.origin.copy( ray.origin );\r\n\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tat: function ( t, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\r\n\t},\r\n\r\n\tlookAt: function ( v ) {\r\n\r\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trecast: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( t ) {\r\n\r\n\t\t\tthis.origin.copy( this.at( t, v1 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclosestPointToPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\tresult.subVectors( point, this.origin );\r\n\t\tvar directionDistance = result.dot( this.direction );\r\n\r\n\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\treturn result.copy( this.origin );\r\n\r\n\t\t}\r\n\r\n\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\r\n\t},\r\n\r\n\tdistanceSqToPoint: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( point ) {\r\n\r\n\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\r\n\r\n\t\t\t// point behind the ray\r\n\r\n\t\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\t\treturn this.origin.distanceToSquared( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\t\treturn v1.distanceToSquared( point );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tdistanceSqToSegment: function () {\r\n\r\n\t\tvar segCenter = new THREE.Vector3();\r\n\t\tvar segDir = new THREE.Vector3();\r\n\t\tvar diff = new THREE.Vector3();\r\n\r\n\t\treturn function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\r\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\r\n\t\t\t// It returns the min distance between the ray and the segment\r\n\t\t\t// defined by v0 and v1\r\n\t\t\t// It can also set two optional targets :\r\n\t\t\t// - The closest point on the ray\r\n\t\t\t// - The closest point on the segment\r\n\r\n\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t\tdiff.copy( this.origin ).sub( segCenter );\r\n\r\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\t\tvar a01 = - this.direction.dot( segDir );\r\n\t\t\tvar b0 = diff.dot( this.direction );\r\n\t\t\tvar b1 = - diff.dot( segDir );\r\n\t\t\tvar c = diff.lengthSq();\r\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\r\n\t\t\tvar s0, s1, sqrDist, extDet;\r\n\r\n\t\t\tif ( det > 0 ) {\r\n\r\n\t\t\t\t// The ray and segment are not parallel.\r\n\r\n\t\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\t\textDet = segExtent * det;\r\n\r\n\t\t\t\tif ( s0 >= 0 ) {\r\n\r\n\t\t\t\t\tif ( s1 >= - extDet ) {\r\n\r\n\t\t\t\t\t\tif ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\r\n\t\t\t\t\t\t\tvar invDet = 1 / det;\r\n\t\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// region 1\r\n\r\n\t\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 5\r\n\r\n\t\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( s1 <= - extDet ) {\r\n\r\n\t\t\t\t\t\t// region 4\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else if ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t// region 3\r\n\r\n\t\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 2\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Ray and segment are parallel.\r\n\r\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnRay ) {\r\n\r\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnSegment ) {\r\n\r\n\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn sqrDist;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectSphere: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( sphere, optionalTarget ) {\r\n\r\n\t\t\tv1.subVectors( sphere.center, this.origin );\r\n\t\t\tvar tca = v1.dot( this.direction );\r\n\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\r\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\r\n\r\n\t\t\tif ( d2 > radius2 ) return null;\r\n\r\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\r\n\r\n\t\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\t\tvar t0 = tca - thc;\r\n\r\n\t\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\t\tvar t1 = tca + thc;\r\n\r\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\r\n\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\r\n\r\n\t\t\t// test to see if t0 is behind the ray:\r\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\r\n\r\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\t\treturn this.at( t0, optionalTarget );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\r\n\r\n\t},\r\n\r\n\tdistanceToPlane: function ( plane ) {\r\n\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\t// Return if the ray never intersects the plane\r\n\r\n\t\treturn t >= 0 ? t :  null;\r\n\r\n\t},\r\n\r\n\tintersectPlane: function ( plane, optionalTarget ) {\r\n\r\n\t\tvar t = this.distanceToPlane( plane );\r\n\r\n\t\tif ( t === null ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.at( t, optionalTarget );\r\n\r\n\t},\r\n\r\n\r\n\r\n\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t// check if the ray lies on the plane first\r\n\r\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\r\n\r\n\t\tif ( distToPoint === 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator * distToPoint < 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tintersectBox: function ( box, optionalTarget ) {\r\n\r\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\r\n\t\tvar invdirx = 1 / this.direction.x,\r\n\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\tinvdirz = 1 / this.direction.z;\r\n\r\n\t\tvar origin = this.origin;\r\n\r\n\t\tif ( invdirx >= 0 ) {\r\n\r\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\r\n\t\t}\r\n\r\n\t\tif ( invdiry >= 0 ) {\r\n\r\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\r\n\r\n\t\t// These lines also handle the case where tmin or tmax is NaN\r\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\r\n\r\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\r\n\r\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\r\n\r\n\t\tif ( invdirz >= 0 ) {\r\n\r\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\r\n\r\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\r\n\r\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\r\n\r\n\t\t//return point closest to the ray (positive side)\r\n\r\n\t\tif ( tmax < 0 ) return null;\r\n\r\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\r\n\r\n\t},\r\n\r\n\tintersectsBox: ( function () {\r\n\r\n\t\tvar v = new THREE.Vector3();\r\n\r\n\t\treturn function ( box ) {\r\n\r\n\t\t\treturn this.intersectBox( box, v ) !== null;\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tintersectTriangle: function () {\r\n\r\n\t\t// Compute the offset origin, edges, and normal.\r\n\t\tvar diff = new THREE.Vector3();\r\n\t\tvar edge1 = new THREE.Vector3();\r\n\t\tvar edge2 = new THREE.Vector3();\r\n\t\tvar normal = new THREE.Vector3();\r\n\r\n\t\treturn function ( a, b, c, backfaceCulling, optionalTarget ) {\r\n\r\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\r\n\r\n\t\t\tedge1.subVectors( b, a );\r\n\t\t\tedge2.subVectors( c, a );\r\n\t\t\tnormal.crossVectors( edge1, edge2 );\r\n\r\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\t\tvar DdN = this.direction.dot( normal );\r\n\t\t\tvar sign;\r\n\r\n\t\t\tif ( DdN > 0 ) {\r\n\r\n\t\t\t\tif ( backfaceCulling ) return null;\r\n\t\t\t\tsign = 1;\r\n\r\n\t\t\t} else if ( DdN < 0 ) {\r\n\r\n\t\t\t\tsign = - 1;\r\n\t\t\t\tDdN = - DdN;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdiff.subVectors( this.origin, a );\r\n\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\r\n\r\n\t\t\t// b1 < 0, no intersection\r\n\t\t\tif ( DdQxE2 < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\r\n\r\n\t\t\t// b2 < 0, no intersection\r\n\t\t\tif ( DdE1xQ < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// b1+b2 > 1, no intersection\r\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Line intersects triangle, check if ray does.\r\n\t\t\tvar QdN = - sign * diff.dot( normal );\r\n\r\n\t\t\t// t < 0, no intersection\r\n\t\t\tif ( QdN < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Ray intersects triangle.\r\n\t\t\treturn this.at( QdN / DdN, optionalTarget );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyMatrix4: function ( matrix4 ) {\r\n\r\n\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\r\n\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\tthis.direction.sub( this.origin );\r\n\t\tthis.direction.normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( ray ) {\r\n\r\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Sphere.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Sphere = function ( center, radius ) {\r\n\r\n\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\r\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\r\n};\r\n\r\nTHREE.Sphere.prototype = {\r\n\r\n\tconstructor: THREE.Sphere,\r\n\r\n\tset: function ( center, radius ) {\r\n\r\n\t\tthis.center.copy( center );\r\n\t\tthis.radius = radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function () {\r\n\r\n\t\tvar box = new THREE.Box3();\r\n\r\n\t\treturn function ( points, optionalCenter ) {\r\n\r\n\t\t\tvar center = this.center;\r\n\r\n\t\t\tif ( optionalCenter !== undefined ) {\r\n\r\n\t\t\t\tcenter.copy( optionalCenter );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbox.setFromPoints( points ).center( center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( sphere ) {\r\n\r\n\t\tthis.center.copy( sphere.center );\r\n\t\tthis.radius = sphere.radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\treturn ( this.radius <= 0 );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar radiusSum = this.radius + sphere.radius;\r\n\r\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\treturn box.intersectsSphere( this );\r\n\r\n\t},\r\n\r\n\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t// We use the following equation to compute the signed distance from\r\n\t\t// the center of the sphere to the plane.\r\n\t\t//\r\n\t\t// distance = q * n - d\r\n\t\t//\r\n\t\t// If this distance is greater than the radius of the sphere,\r\n\t\t// then there is no intersection.\r\n\r\n\t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tresult.copy( point );\r\n\r\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\tresult.sub( this.center ).normalize();\r\n\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\tgetBoundingBox: function ( optionalTarget ) {\r\n\r\n\t\tvar box = optionalTarget || new THREE.Box3();\r\n\r\n\t\tbox.set( this.center, this.center );\r\n\t\tbox.expandByScalar( this.radius );\r\n\r\n\t\treturn box;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\tthis.center.applyMatrix4( matrix );\r\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.center.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( sphere ) {\r\n\r\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Frustum.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\tthis.planes = [\r\n\r\n\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\r\n\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\r\n\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\r\n\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\r\n\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\r\n\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\r\n\r\n\t];\r\n\r\n};\r\n\r\nTHREE.Frustum.prototype = {\r\n\r\n\tconstructor: THREE.Frustum,\r\n\r\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tplanes[ 0 ].copy( p0 );\r\n\t\tplanes[ 1 ].copy( p1 );\r\n\t\tplanes[ 2 ].copy( p2 );\r\n\t\tplanes[ 3 ].copy( p3 );\r\n\t\tplanes[ 4 ].copy( p4 );\r\n\t\tplanes[ 5 ].copy( p5 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( frustum ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrix: function ( m ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\t\tvar me = m.elements;\r\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\r\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\r\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\r\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\r\n\r\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tintersectsObject: function () {\r\n\r\n\t\tvar sphere = new THREE.Sphere();\r\n\r\n\t\treturn function ( object ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( geometry.boundingSphere === null )\r\n\t\t\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\t\tsphere.copy( geometry.boundingSphere )\r\n\t\t\t\t.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectsSprite: function () {\r\n\r\n\t\tvar sphere = new THREE.Sphere();\r\n\r\n\t\treturn function ( sprite ) {\r\n\r\n\t\t\tsphere.center.set( 0, 0, 0 );\r\n\t\t\tsphere.radius = 0.7071067811865476;\r\n\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\r\n\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\t\tvar center = sphere.center;\r\n\t\tvar negRadius = - sphere.radius;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\tif ( distance < negRadius ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tintersectsBox: function () {\r\n\r\n\t\tvar p1 = new THREE.Vector3(),\r\n\t\t\tp2 = new THREE.Vector3();\r\n\r\n\t\treturn function ( box ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\r\n\r\n\t\t\t\tvar plane = planes[ i ];\r\n\r\n\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\r\n\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\r\n\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\r\n\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\r\n\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\r\n\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\r\n\r\n\t\t\t\t// if both outside plane, no intersection\r\n\r\n\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Plane.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Plane = function ( normal, constant ) {\r\n\r\n\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\r\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\r\n};\r\n\r\nTHREE.Plane.prototype = {\r\n\r\n\tconstructor: THREE.Plane,\r\n\r\n\tset: function ( normal, constant ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = constant;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponents: function ( x, y, z, w ) {\r\n\r\n\t\tthis.normal.set( x, y, z );\r\n\t\tthis.constant = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCoplanarPoints: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\r\n\t\treturn function ( a, b, c ) {\r\n\r\n\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( plane ) {\r\n\r\n\t\tthis.normal.copy( plane.normal );\r\n\t\tthis.constant = plane.constant;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\r\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.constant *= - 1;\r\n\t\tthis.normal.negate();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t},\r\n\r\n\tdistanceToSphere: function ( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t},\r\n\r\n\tprojectPoint: function ( point, optionalTarget ) {\r\n\r\n\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\r\n\r\n\t},\r\n\r\n\torthoPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\r\n\r\n\t},\r\n\r\n\tintersectLine: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( line, optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t\tvar direction = line.delta( v1 );\r\n\r\n\t\t\tvar denominator = this.normal.dot( direction );\r\n\r\n\t\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\r\n\t\t\t\t\treturn result.copy( line.start );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\t\tif ( t < 0 || t > 1 ) {\r\n\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectsLine: function ( line ) {\r\n\r\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\tvar startSign = this.distanceToPoint( line.start );\r\n\t\tvar endSign = this.distanceToPoint( line.end );\r\n\r\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\treturn box.intersectsPlane( this );\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\treturn sphere.intersectsPlane( this );\r\n\r\n\t},\r\n\r\n\tcoplanarPoint: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar m1 = new THREE.Matrix3();\r\n\r\n\t\treturn function ( matrix, optionalNormalMatrix ) {\r\n\r\n\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\r\n\r\n\t\t\t// transform normal based on theory here:\r\n\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\r\n\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\r\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\r\n\t\t\tthis.constant = - referencePoint.dot( normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.constant = this.constant - offset.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( plane ) {\r\n\r\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Spherical.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\r\n *\r\n * The poles (phi) are at the positive and negative y axis.\r\n * The equator starts at positive z.\r\n */\r\n\r\nTHREE.Spherical = function ( radius, phi, theta ) {\r\n\r\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\r\n\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\r\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.Spherical.prototype = {\r\n\r\n\tconstructor: THREE.Spherical,\r\n\r\n\tset: function ( radius, phi, theta ) {\r\n\r\n\t\tthis.radius = radius;\r\n\t\tthis.phi = phi;\r\n\t\tthis.theta = theta;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( other ) {\r\n\r\n\t\tthis.radius.copy( other.radius );\r\n\t\tthis.phi.copy( other.phi );\r\n\t\tthis.theta.copy( other.theta );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// restrict phi to be betwee EPS and PI-EPS\r\n\tmakeSafe: function() {\r\n\r\n\t\tvar EPS = 0.000001;\r\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromVector3: function( vec3 ) {\r\n\r\n\t\tthis.radius = vec3.length();\r\n\r\n\t\tif ( this.radius === 0 ) {\r\n\r\n\t\t\tthis.theta = 0;\r\n\t\t\tthis.phi = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\r\n\t\t\tthis.phi = Math.acos( THREE.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n};\r\n\r\n// File:src/math/Math.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Math = {\r\n\r\n\tDEG2RAD: Math.PI / 180,\r\n\tRAD2DEG: 180 / Math.PI,\r\n\r\n\tgenerateUUID: function () {\r\n\r\n\t\t// http://www.broofa.com/Tools/Math.uuid.htm\r\n\r\n\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\r\n\t\tvar uuid = new Array( 36 );\r\n\t\tvar rnd = 0, r;\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tfor ( var i = 0; i < 36; i ++ ) {\r\n\r\n\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\r\n\r\n\t\t\t\t\tuuid[ i ] = '-';\r\n\r\n\t\t\t\t} else if ( i === 14 ) {\r\n\r\n\t\t\t\t\tuuid[ i ] = '4';\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\r\n\t\t\t\t\tr = rnd & 0xf;\r\n\t\t\t\t\trnd = rnd >> 4;\r\n\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn uuid.join( '' );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclamp: function ( value, min, max ) {\r\n\r\n\t\treturn Math.max( min, Math.min( max, value ) );\r\n\r\n\t},\r\n\r\n\t// compute euclidian modulo of m % n\r\n\t// https://en.wikipedia.org/wiki/Modulo_operation\r\n\r\n\teuclideanModulo: function ( n, m ) {\r\n\r\n\t\treturn ( ( n % m ) + m ) % m;\r\n\r\n\t},\r\n\r\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\r\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n\t},\r\n\r\n\t// http://en.wikipedia.org/wiki/Smoothstep\r\n\r\n\tsmoothstep: function ( x, min, max ) {\r\n\r\n\t\tif ( x <= min ) return 0;\r\n\t\tif ( x >= max ) return 1;\r\n\r\n\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\treturn x * x * ( 3 - 2 * x );\r\n\r\n\t},\r\n\r\n\tsmootherstep: function ( x, min, max ) {\r\n\r\n\t\tif ( x <= min ) return 0;\r\n\t\tif ( x >= max ) return 1;\r\n\r\n\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n\t},\r\n\r\n\trandom16: function () {\r\n\r\n\t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\r\n\t\treturn Math.random();\r\n\r\n\t},\r\n\r\n\t// Random integer from <low, high> interval\r\n\r\n\trandInt: function ( low, high ) {\r\n\r\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n\t},\r\n\r\n\t// Random float from <low, high> interval\r\n\r\n\trandFloat: function ( low, high ) {\r\n\r\n\t\treturn low + Math.random() * ( high - low );\r\n\r\n\t},\r\n\r\n\t// Random float from <-range/2, range/2> interval\r\n\r\n\trandFloatSpread: function ( range ) {\r\n\r\n\t\treturn range * ( 0.5 - Math.random() );\r\n\r\n\t},\r\n\r\n\tdegToRad: function ( degrees ) {\r\n\r\n\t\treturn degrees * THREE.Math.DEG2RAD;\r\n\r\n\t},\r\n\r\n\tradToDeg: function ( radians ) {\r\n\r\n\t\treturn radians * THREE.Math.RAD2DEG;\r\n\r\n\t},\r\n\r\n\tisPowerOfTwo: function ( value ) {\r\n\r\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\r\n\t},\r\n\r\n\tnearestPowerOfTwo: function ( value ) {\r\n\r\n\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t},\r\n\r\n\tnextPowerOfTwo: function ( value ) {\r\n\r\n\t\tvalue --;\r\n\t\tvalue |= value >> 1;\r\n\t\tvalue |= value >> 2;\r\n\t\tvalue |= value >> 4;\r\n\t\tvalue |= value >> 8;\r\n\t\tvalue |= value >> 16;\r\n\t\tvalue ++;\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Spline.js\r\n\r\n/**\r\n * Spline from Tween.js, slightly optimized (and trashed)\r\n * http://sole.github.com/tween.js/examples/05_spline.html\r\n *\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Spline = function ( points ) {\r\n\r\n\tthis.points = points;\r\n\r\n\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\r\n\tpoint, intPoint, weight, w2, w3,\r\n\tpa, pb, pc, pd;\r\n\r\n\tthis.initFromArray = function ( a ) {\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0; i < a.length; i ++ ) {\r\n\r\n\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.getPoint = function ( k ) {\r\n\r\n\t\tpoint = ( this.points.length - 1 ) * k;\r\n\t\tintPoint = Math.floor( point );\r\n\t\tweight = point - intPoint;\r\n\r\n\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\r\n\t\tc[ 1 ] = intPoint;\r\n\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\r\n\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\r\n\r\n\t\tpa = this.points[ c[ 0 ] ];\r\n\t\tpb = this.points[ c[ 1 ] ];\r\n\t\tpc = this.points[ c[ 2 ] ];\r\n\t\tpd = this.points[ c[ 3 ] ];\r\n\r\n\t\tw2 = weight * weight;\r\n\t\tw3 = weight * w2;\r\n\r\n\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\r\n\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\r\n\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\r\n\r\n\t\treturn v3;\r\n\r\n\t};\r\n\r\n\tthis.getControlPointsArray = function () {\r\n\r\n\t\tvar i, p, l = this.points.length,\r\n\t\t\tcoords = [];\r\n\r\n\t\tfor ( i = 0; i < l; i ++ ) {\r\n\r\n\t\t\tp = this.points[ i ];\r\n\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\r\n\r\n\t\t}\r\n\r\n\t\treturn coords;\r\n\r\n\t};\r\n\r\n\t// approximate length by summing linear segments\r\n\r\n\tthis.getLength = function ( nSubDivisions ) {\r\n\r\n\t\tvar i, index, nSamples, position,\r\n\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\r\n\t\t\toldPosition = new THREE.Vector3(),\r\n\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\tchunkLengths = [],\r\n\t\t\ttotalLength = 0;\r\n\r\n\t\t// first point has 0 length\r\n\r\n\t\tchunkLengths[ 0 ] = 0;\r\n\r\n\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\r\n\r\n\t\tnSamples = this.points.length * nSubDivisions;\r\n\r\n\t\toldPosition.copy( this.points[ 0 ] );\r\n\r\n\t\tfor ( i = 1; i < nSamples; i ++ ) {\r\n\r\n\t\t\tindex = i / nSamples;\r\n\r\n\t\t\tposition = this.getPoint( index );\r\n\t\t\ttmpVec.copy( position );\r\n\r\n\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\r\n\r\n\t\t\toldPosition.copy( position );\r\n\r\n\t\t\tpoint = ( this.points.length - 1 ) * index;\r\n\t\t\tintPoint = Math.floor( point );\r\n\r\n\t\t\tif ( intPoint !== oldIntPoint ) {\r\n\r\n\t\t\t\tchunkLengths[ intPoint ] = totalLength;\r\n\t\t\t\toldIntPoint = intPoint;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// last point ends with total length\r\n\r\n\t\tchunkLengths[ chunkLengths.length ] = totalLength;\r\n\r\n\t\treturn { chunks: chunkLengths, total: totalLength };\r\n\r\n\t};\r\n\r\n\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\r\n\r\n\t\tvar i, j,\r\n\t\t\tindex, indexCurrent, indexNext,\r\n\t\t\trealDistance,\r\n\t\t\tsampling, position,\r\n\t\t\tnewpoints = [],\r\n\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\tsl = this.getLength();\r\n\r\n\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\r\n\r\n\t\tfor ( i = 1; i < this.points.length; i ++ ) {\r\n\r\n\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\r\n\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\r\n\r\n\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\r\n\r\n\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\r\n\r\n\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\r\n\t\t\tindexNext = i / ( this.points.length - 1 );\r\n\r\n\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\r\n\r\n\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\r\n\r\n\t\t\t\tposition = this.getPoint( index );\r\n\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.points = newpoints;\r\n\r\n\t};\r\n\r\n\t// Catmull-Rom\r\n\r\n\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5,\r\n\t\t\tv1 = ( p3 - p1 ) * 0.5;\r\n\r\n\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Triangle.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Triangle = function ( a, b, c ) {\r\n\r\n\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\r\n\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\r\n\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Triangle.normal = function () {\r\n\r\n\tvar v0 = new THREE.Vector3();\r\n\r\n\treturn function ( a, b, c, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tresult.subVectors( c, b );\r\n\t\tv0.subVectors( a, b );\r\n\t\tresult.cross( v0 );\r\n\r\n\t\tvar resultLengthSq = result.lengthSq();\r\n\t\tif ( resultLengthSq > 0 ) {\r\n\r\n\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn result.set( 0, 0, 0 );\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// static/instance method to calculate barycentric coordinates\r\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\nTHREE.Triangle.barycoordFromPoint = function () {\r\n\r\n\tvar v0 = new THREE.Vector3();\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\r\n\treturn function ( point, a, b, c, optionalTarget ) {\r\n\r\n\t\tv0.subVectors( c, a );\r\n\t\tv1.subVectors( b, a );\r\n\t\tv2.subVectors( point, a );\r\n\r\n\t\tvar dot00 = v0.dot( v0 );\r\n\t\tvar dot01 = v0.dot( v1 );\r\n\t\tvar dot02 = v0.dot( v2 );\r\n\t\tvar dot11 = v1.dot( v1 );\r\n\t\tvar dot12 = v1.dot( v2 );\r\n\r\n\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t// collinear or singular triangle\r\n\t\tif ( denom === 0 ) {\r\n\r\n\t\t\t// arbitrary location outside of triangle?\r\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\t\treturn result.set( - 2, - 1, - 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvar invDenom = 1 / denom;\r\n\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t\t// barycentric coordinates must always sum to 1\r\n\t\treturn result.set( 1 - u - v, v, u );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Triangle.containsPoint = function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\r\n\treturn function ( point, a, b, c ) {\r\n\r\n\t\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\r\n\r\n\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Triangle.prototype = {\r\n\r\n\tconstructor: THREE.Triangle,\r\n\r\n\tset: function ( a, b, c ) {\r\n\r\n\t\tthis.a.copy( a );\r\n\t\tthis.b.copy( b );\r\n\t\tthis.c.copy( c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.copy( points[ i0 ] );\r\n\t\tthis.b.copy( points[ i1 ] );\r\n\t\tthis.c.copy( points[ i2 ] );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( triangle ) {\r\n\r\n\t\tthis.a.copy( triangle.a );\r\n\t\tthis.b.copy( triangle.b );\r\n\t\tthis.c.copy( triangle.c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tarea: function () {\r\n\r\n\t\tvar v0 = new THREE.Vector3();\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tv0.subVectors( this.c, this.b );\r\n\t\t\tv1.subVectors( this.a, this.b );\r\n\r\n\t\t\treturn v0.cross( v1 ).length() * 0.5;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmidpoint: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t},\r\n\r\n\tnormal: function ( optionalTarget ) {\r\n\r\n\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\r\n\r\n\t},\r\n\r\n\tplane: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Plane();\r\n\r\n\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tbarycoordFromPoint: function ( point, optionalTarget ) {\r\n\r\n\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tclosestPointToPoint: function () {\r\n\r\n\t\tvar plane, edgeList, projectedPoint, closestPoint;\r\n\r\n\t\treturn function closestPointToPoint( point, optionalTarget ) {\r\n\r\n\t\t\tif ( plane === undefined ) {\r\n\r\n\t\t\t\tplane = new THREE.Plane();\r\n\t\t\t\tedgeList = [ new THREE.Line3(), new THREE.Line3(), new THREE.Line3() ];\r\n\t\t\t\tprojectedPoint = new THREE.Vector3();\r\n\t\t\t\tclosestPoint = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\tvar minDistance = Infinity;\r\n\r\n\t\t\t// project the point onto the plane of the triangle\r\n\r\n\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\t\t\tplane.projectPoint( point, projectedPoint );\r\n\r\n\t\t\t// check if the projection lies within the triangle\r\n\r\n\t\t\tif( this.containsPoint( projectedPoint ) === true ) {\r\n\r\n\t\t\t\t// if so, this is the closest point\r\n\r\n\t\t\t\tresult.copy( projectedPoint );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\r\n\r\n\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\r\n\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\r\n\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\r\n\r\n\t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\r\n\r\n\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\r\n\r\n\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\r\n\r\n\t\t\t\t\tif( distance < minDistance ) {\r\n\r\n\t\t\t\t\t\tminDistance = distance;\r\n\r\n\t\t\t\t\t\tresult.copy( closestPoint );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tequals: function ( triangle ) {\r\n\r\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Interpolant.js\r\n\r\n/**\r\n * Abstract base class of interpolants over parametric samples.\r\n *\r\n * The parameter domain is one dimensional, typically the time or a path\r\n * along a curve defined by the data.\r\n *\r\n * The sample values can have any dimensionality and derived classes may\r\n * apply special interpretations to the data.\r\n *\r\n * This class provides the interval seek in a Template Method, deferring\r\n * the actual interpolation to derived classes.\r\n *\r\n * Time complexity is O(1) for linear access crossing at most two points\r\n * and O(log N) for random access, where N is the number of positions.\r\n *\r\n * References:\r\n *\r\n * \t\thttp://www.oodesign.com/template-method-pattern.html\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.Interpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tthis.parameterPositions = parameterPositions;\r\n\tthis._cachedIndex = 0;\r\n\r\n\tthis.resultBuffer = resultBuffer !== undefined ?\r\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\r\n\tthis.sampleValues = sampleValues;\r\n\tthis.valueSize = sampleSize;\r\n\r\n};\r\n\r\nTHREE.Interpolant.prototype = {\r\n\r\n\tconstructor: THREE.Interpolant,\r\n\r\n\tevaluate: function( t ) {\r\n\r\n\t\tvar pp = this.parameterPositions,\r\n\t\t\ti1 = this._cachedIndex,\r\n\r\n\t\t\tt1 = pp[   i1   ],\r\n\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\tvalidate_interval: {\r\n\r\n\t\t\tseek: {\r\n\r\n\t\t\t\tvar right;\r\n\r\n\t\t\t\tlinear_scan: {\r\n//- See http://jsperf.com/comparison-to-undefined/3\r\n//- slower code:\r\n//-\r\n//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\r\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\r\n\r\n\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\r\n\r\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\r\n\r\n\t\t\t\t\t\t\t\t// after end\r\n\r\n\t\t\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\r\n\t\t\t\t\t\t\tt0 = t1;\r\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t < t1 ) {\r\n\r\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// prepare binary search on the right side of the index\r\n\t\t\t\t\t\tright = pp.length;\r\n\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t}\r\n\r\n//- slower code:\r\n//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\r\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\r\n\r\n\t\t\t\t\t\t// looping?\r\n\r\n\t\t\t\t\t\tvar t1global = pp[ 1 ];\r\n\r\n\t\t\t\t\t\tif ( t < t1global ) {\r\n\r\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\r\n\t\t\t\t\t\t\tt0 = t1global;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// linear reverse scan\r\n\r\n\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\r\n\r\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t// before start\r\n\r\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\r\n\t\t\t\t\t\t\tt1 = t0;\r\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t >= t0 ) {\r\n\r\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// prepare binary search on the left side of the index\r\n\t\t\t\t\t\tright = i1;\r\n\t\t\t\t\t\ti1 = 0;\r\n\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// the interval is valid\r\n\r\n\t\t\t\t\tbreak validate_interval;\r\n\r\n\t\t\t\t} // linear scan\r\n\r\n\t\t\t\t// binary search\r\n\r\n\t\t\t\twhile ( i1 < right ) {\r\n\r\n\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\r\n\r\n\t\t\t\t\tif ( t < pp[ mid ] ) {\r\n\r\n\t\t\t\t\t\tright = mid;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ti1 = mid + 1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tt1 = pp[   i1   ];\r\n\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\t\t\t// check boundary cases, again\r\n\r\n\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} // seek\r\n\r\n\t\t\tthis._cachedIndex = i1;\r\n\r\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\r\n\r\n\t\t} // validate_interval\r\n\r\n\t\treturn this.interpolate_( i1, t0, t, t1 );\r\n\r\n\t},\r\n\r\n\tsettings: null, // optional, subclass-specific settings structure\r\n\t// Note: The indirection allows central control of many interpolants.\r\n\r\n\t// --- Protected interface\r\n\r\n\tDefaultSettings_: {},\r\n\r\n\tgetSettings_: function() {\r\n\r\n\t\treturn this.settings || this.DefaultSettings_;\r\n\r\n\t},\r\n\r\n\tcopySampleValue_: function( index ) {\r\n\r\n\t\t// copies a sample value to the result buffer\r\n\r\n\t\tvar result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\t\t\toffset = index * stride;\r\n\r\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] = values[ offset + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\t// Template methods for derived classes:\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\tthrow new Error( \"call to abstract method\" );\r\n\t\t// implementations shall return this.resultBuffer\r\n\r\n\t},\r\n\r\n\tintervalChanged_: function( i1, t0, t1 ) {\r\n\r\n\t\t// empty\r\n\r\n\t}\r\n\r\n};\r\n\r\nObject.assign( THREE.Interpolant.prototype, {\r\n\r\n\tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\r\n\t\tTHREE.Interpolant.prototype.copySampleValue_,\r\n\r\n\tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\r\n\t\tTHREE.Interpolant.prototype.copySampleValue_\r\n\r\n} );\r\n\r\n// File:src/math/interpolants/CubicInterpolant.js\r\n\r\n/**\r\n * Fast and simple cubic spline interpolant.\r\n *\r\n * It was derived from a Hermitian construction setting the first derivative\r\n * at each sample position to the linear slope between neighboring positions\r\n * over their parameter interval.\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.CubicInterpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tTHREE.Interpolant.call(\r\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\tthis._weightPrev = -0;\r\n\tthis._offsetPrev = -0;\r\n\tthis._weightNext = -0;\r\n\tthis._offsetNext = -0;\r\n\r\n};\r\n\r\nTHREE.CubicInterpolant.prototype =\r\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\r\n\tconstructor: THREE.CubicInterpolant,\r\n\r\n\tDefaultSettings_: {\r\n\r\n\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\r\n\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\r\n\r\n\t},\r\n\r\n\tintervalChanged_: function( i1, t0, t1 ) {\r\n\r\n\t\tvar pp = this.parameterPositions,\r\n\t\t\tiPrev = i1 - 2,\r\n\t\t\tiNext = i1 + 1,\r\n\r\n\t\t\ttPrev = pp[ iPrev ],\r\n\t\t\ttNext = pp[ iNext ];\r\n\r\n\t\tif ( tPrev === undefined ) {\r\n\r\n\t\t\tswitch ( this.getSettings_().endingStart ) {\r\n\r\n\t\t\t\tcase THREE.ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t// f'(t0) = 0\r\n\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\ttPrev = 2 * t0 - t1;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.WrapAroundEnding:\r\n\r\n\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\tiPrev = pp.length - 2;\r\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\r\n\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\ttPrev = t1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( tNext === undefined ) {\r\n\r\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\r\n\r\n\t\t\t\tcase THREE.ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t// f'(tN) = 0\r\n\t\t\t\t\tiNext = i1;\r\n\t\t\t\t\ttNext = 2 * t1 - t0;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.WrapAroundEnding:\r\n\r\n\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\tiNext = 1;\r\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\r\n\t\t\t\t\tiNext = i1 - 1;\r\n\t\t\t\t\ttNext = t0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar halfDt = ( t1 - t0 ) * 0.5,\r\n\t\t\tstride = this.valueSize;\r\n\r\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\r\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\r\n\t\tthis._offsetPrev = iPrev * stride;\r\n\t\tthis._offsetNext = iNext * stride;\r\n\r\n\t},\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\tvar result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\r\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\r\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\r\n\r\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\tpp = p * p,\r\n\t\t\tppp = pp * p;\r\n\r\n\t\t// evaluate polynomials\r\n\r\n\t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\r\n\t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\r\n\t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\r\n\t\tvar sN =       wN   * ppp   -           wN      * pp;\r\n\r\n\t\t// combine data linearly\r\n\r\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] =\r\n\t\t\t\t\tsP * values[ oP + i ] +\r\n\t\t\t\t\ts0 * values[ o0 + i ] +\r\n\t\t\t\t\ts1 * values[ o1 + i ] +\r\n\t\t\t\t\tsN * values[ oN + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/math/interpolants/DiscreteInterpolant.js\r\n\r\n/**\r\n *\r\n * Interpolant that evaluates to the sample value at the position preceeding\r\n * the parameter.\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.DiscreteInterpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tTHREE.Interpolant.call(\r\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n};\r\n\r\nTHREE.DiscreteInterpolant.prototype =\r\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\r\n\tconstructor: THREE.DiscreteInterpolant,\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/math/interpolants/LinearInterpolant.js\r\n\r\n/**\r\n * @author tschw\r\n */\r\n\r\nTHREE.LinearInterpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tTHREE.Interpolant.call(\r\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n};\r\n\r\nTHREE.LinearInterpolant.prototype =\r\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\r\n\tconstructor: THREE.LinearInterpolant,\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\tvar result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\toffset1 = i1 * stride,\r\n\t\t\toffset0 = offset1 - stride,\r\n\r\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\tweight0 = 1 - weight1;\r\n\r\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] =\r\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\r\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/math/interpolants/QuaternionLinearInterpolant.js\r\n\r\n/**\r\n * Spherical linear unit quaternion interpolant.\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.QuaternionLinearInterpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tTHREE.Interpolant.call(\r\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n};\r\n\r\nTHREE.QuaternionLinearInterpolant.prototype =\r\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\r\n\tconstructor: THREE.QuaternionLinearInterpolant,\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\tvar result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\toffset = i1 * stride,\r\n\r\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\r\n\r\n\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\r\n\r\n\t\t\tTHREE.Quaternion.slerpFlat( result, 0,\r\n\t\t\t\t\tvalues, offset - stride, values, offset, alpha );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/core/Clock.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Clock = function ( autoStart ) {\r\n\r\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\r\n\r\n\tthis.startTime = 0;\r\n\tthis.oldTime = 0;\r\n\tthis.elapsedTime = 0;\r\n\r\n\tthis.running = false;\r\n\r\n};\r\n\r\nTHREE.Clock.prototype = {\r\n\r\n\tconstructor: THREE.Clock,\r\n\r\n\tstart: function () {\r\n\r\n\t\tthis.startTime = ( performance || Date ).now();\r\n\r\n\t\tthis.oldTime = this.startTime;\r\n\t\tthis.running = true;\r\n\r\n\t},\r\n\r\n\tstop: function () {\r\n\r\n\t\tthis.getElapsedTime();\r\n\t\tthis.running = false;\r\n\r\n\t},\r\n\r\n\tgetElapsedTime: function () {\r\n\r\n\t\tthis.getDelta();\r\n\t\treturn this.elapsedTime;\r\n\r\n\t},\r\n\r\n\tgetDelta: function () {\r\n\r\n\t\tvar diff = 0;\r\n\r\n\t\tif ( this.autoStart && ! this.running ) {\r\n\r\n\t\t\tthis.start();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.running ) {\r\n\r\n\t\t\tvar newTime = ( performance || Date ).now();\r\n\r\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\r\n\t\t\tthis.oldTime = newTime;\r\n\r\n\t\t\tthis.elapsedTime += diff;\r\n\r\n\t\t}\r\n\r\n\t\treturn diff;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/EventDispatcher.js\r\n\r\n/**\r\n * https://github.com/mrdoob/eventdispatcher.js/\r\n */\r\n\r\nTHREE.EventDispatcher = function () {};\r\n\r\nObject.assign( THREE.EventDispatcher.prototype, {\r\n\r\n\taddEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) this._listeners = {};\r\n\r\n\t\tvar listeners = this._listeners;\r\n\r\n\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\thasEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return false;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\r\n\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tremoveEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\t\tvar listenerArray = listeners[ type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tvar index = listenerArray.indexOf( listener );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\tlistenerArray.splice( index, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tdispatchEvent: function ( event ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\t\tvar listenerArray = listeners[ event.type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tevent.target = this;\r\n\r\n\t\t\tvar array = [], i = 0;\r\n\t\t\tvar length = listenerArray.length;\r\n\r\n\t\t\tfor ( i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tarray[ i ] = listenerArray[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tarray[ i ].call( this, event );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/core/Layers.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Layers = function () {\r\n\r\n\tthis.mask = 1;\r\n\r\n};\r\n\r\nTHREE.Layers.prototype = {\r\n\r\n\tconstructor: THREE.Layers,\r\n\r\n\tset: function ( channel ) {\r\n\r\n\t\tthis.mask = 1 << channel;\r\n\r\n\t},\r\n\r\n\tenable: function ( channel ) {\r\n\r\n\t\tthis.mask |= 1 << channel;\r\n\r\n\t},\r\n\r\n\ttoggle: function ( channel ) {\r\n\r\n\t\tthis.mask ^= 1 << channel;\r\n\r\n\t},\r\n\r\n\tdisable: function ( channel ) {\r\n\r\n\t\tthis.mask &= ~ ( 1 << channel );\r\n\r\n\t},\r\n\r\n\ttest: function ( layers ) {\r\n\r\n\t\treturn ( this.mask & layers.mask ) !== 0;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/Raycaster.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author bhouston / http://clara.io/\r\n * @author stephomi / http://stephaneginier.com/\r\n */\r\n\r\n( function ( THREE ) {\r\n\r\n\tTHREE.Raycaster = function ( origin, direction, near, far ) {\r\n\r\n\t\tthis.ray = new THREE.Ray( origin, direction );\r\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\tthis.near = near || 0;\r\n\t\tthis.far = far || Infinity;\r\n\r\n\t\tthis.params = {\r\n\t\t\tMesh: {},\r\n\t\t\tLine: {},\r\n\t\t\tLOD: {},\r\n\t\t\tPoints: { threshold: 1 },\r\n\t\t\tSprite: {}\r\n\t\t};\r\n\r\n\t\tObject.defineProperties( this.params, {\r\n\t\t\tPointCloud: {\r\n\t\t\t\tget: function () {\r\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\r\n\t\t\t\t\treturn this.Points;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t};\r\n\r\n\tfunction ascSort( a, b ) {\r\n\r\n\t\treturn a.distance - b.distance;\r\n\r\n\t}\r\n\r\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tobject.raycast( raycaster, intersects );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tTHREE.Raycaster.prototype = {\r\n\r\n\t\tconstructor: THREE.Raycaster,\r\n\r\n\t\tlinePrecision: 1,\r\n\r\n\t\tset: function ( origin, direction ) {\r\n\r\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\t\tthis.ray.set( origin, direction );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCamera: function ( coords, camera ) {\r\n\r\n\t\t\tif ( camera instanceof THREE.PerspectiveCamera ) {\r\n\r\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\r\n\r\n\t\t\t} else if ( camera instanceof THREE.OrthographicCamera ) {\r\n\r\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, - 1 ).unproject( camera );\r\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tintersectObject: function ( object, recursive ) {\r\n\r\n\t\t\tvar intersects = [];\r\n\r\n\t\t\tintersectObject( object, this, intersects, recursive );\r\n\r\n\t\t\tintersects.sort( ascSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t},\r\n\r\n\t\tintersectObjects: function ( objects, recursive ) {\r\n\r\n\t\t\tvar intersects = [];\r\n\r\n\t\t\tif ( Array.isArray( objects ) === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\r\n\t\t\t\treturn intersects;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersects.sort( ascSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}( THREE ) );\r\n\r\n// File:src/core/Object3D.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author elephantatwork / www.elephantatwork.ch\r\n */\r\n\r\nTHREE.Object3D = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'Object3D';\r\n\r\n\tthis.parent = null;\r\n\tthis.children = [];\r\n\r\n\tthis.up = THREE.Object3D.DefaultUp.clone();\r\n\r\n\tvar position = new THREE.Vector3();\r\n\tvar rotation = new THREE.Euler();\r\n\tvar quaternion = new THREE.Quaternion();\r\n\tvar scale = new THREE.Vector3( 1, 1, 1 );\r\n\r\n\tfunction onRotationChange() {\r\n\r\n\t\tquaternion.setFromEuler( rotation, false );\r\n\r\n\t}\r\n\r\n\tfunction onQuaternionChange() {\r\n\r\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\r\n\t}\r\n\r\n\trotation.onChange( onRotationChange );\r\n\tquaternion.onChange( onQuaternionChange );\r\n\r\n\tObject.defineProperties( this, {\r\n\t\tposition: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: position\r\n\t\t},\r\n\t\trotation: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: rotation\r\n\t\t},\r\n\t\tquaternion: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: quaternion\r\n\t\t},\r\n\t\tscale: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: scale\r\n\t\t},\r\n\t\tmodelViewMatrix: {\r\n\t\t\tvalue: new THREE.Matrix4()\r\n\t\t},\r\n\t\tnormalMatrix: {\r\n\t\t\tvalue: new THREE.Matrix3()\r\n\t\t}\r\n\t} );\r\n\r\n\tthis.matrix = new THREE.Matrix4();\r\n\tthis.matrixWorld = new THREE.Matrix4();\r\n\r\n\tthis.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\r\n\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\tthis.layers = new THREE.Layers();\r\n\tthis.visible = true;\r\n\r\n\tthis.castShadow = false;\r\n\tthis.receiveShadow = false;\r\n\r\n\tthis.frustumCulled = true;\r\n\tthis.renderOrder = 0;\r\n\r\n\tthis.userData = {};\r\n\r\n};\r\n\r\nTHREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );\r\nTHREE.Object3D.DefaultMatrixAutoUpdate = true;\r\n\r\nObject.assign( THREE.Object3D.prototype, THREE.EventDispatcher.prototype, {\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\r\n\r\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\r\n\t},\r\n\r\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\r\n\t},\r\n\r\n\tsetRotationFromEuler: function ( euler ) {\r\n\r\n\t\tthis.quaternion.setFromEuler( euler, true );\r\n\r\n\t},\r\n\r\n\tsetRotationFromMatrix: function ( m ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\r\n\t},\r\n\r\n\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t// assumes q is normalized\r\n\r\n\t\tthis.quaternion.copy( q );\r\n\r\n\t},\r\n\r\n\trotateOnAxis: function () {\r\n\r\n\t\t// rotate object on axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\tvar q1 = new THREE.Quaternion();\r\n\r\n\t\treturn function ( axis, angle ) {\r\n\r\n\t\t\tq1.setFromAxisAngle( axis, angle );\r\n\r\n\t\t\tthis.quaternion.multiply( q1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateX: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\r\n\r\n\t\treturn function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\t\treturn function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\r\n\r\n\t\treturn function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateOnAxis: function () {\r\n\r\n\t\t// translate object by distance along axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( axis, distance ) {\r\n\r\n\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\r\n\r\n\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateX: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\r\n\r\n\t\treturn function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateY: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\t\treturn function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateZ: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\r\n\r\n\t\treturn function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlocalToWorld: function ( vector ) {\r\n\r\n\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t},\r\n\r\n\tworldToLocal: function () {\r\n\r\n\t\tvar m1 = new THREE.Matrix4();\r\n\r\n\t\treturn function ( vector ) {\r\n\r\n\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\t// This routine does not support objects with rotated and/or translated parent(s)\r\n\r\n\t\tvar m1 = new THREE.Matrix4();\r\n\r\n\t\treturn function ( vector ) {\r\n\r\n\t\t\tm1.lookAt( vector, this.position, this.up );\r\n\r\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tadd: function ( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.add( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object === this ) {\r\n\r\n\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object instanceof THREE.Object3D ) {\r\n\r\n\t\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\t\tobject.parent.remove( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.parent = this;\r\n\t\t\tobject.dispatchEvent( { type: 'added' } );\r\n\r\n\t\t\tthis.children.push( object );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tremove: function ( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.remove( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar index = this.children.indexOf( object );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tobject.parent = null;\r\n\r\n\t\t\tobject.dispatchEvent( { type: 'removed' } );\r\n\r\n\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetObjectById: function ( id ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'id', id );\r\n\r\n\t},\r\n\r\n\tgetObjectByName: function ( name ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'name', name );\r\n\r\n\t},\r\n\r\n\tgetObjectByProperty: function ( name, value ) {\r\n\r\n\t\tif ( this[ name ] === value ) return this;\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar child = this.children[ i ];\r\n\t\t\tvar object = child.getObjectByProperty( name, value );\r\n\r\n\t\t\tif ( object !== undefined ) {\r\n\r\n\t\t\t\treturn object;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t},\r\n\r\n\tgetWorldPosition: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\treturn result.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t},\r\n\r\n\tgetWorldQuaternion: function () {\r\n\r\n\t\tvar position = new THREE.Vector3();\r\n\t\tvar scale = new THREE.Vector3();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Quaternion();\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( position, result, scale );\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetWorldRotation: function () {\r\n\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Euler();\r\n\r\n\t\t\tthis.getWorldQuaternion( quaternion );\r\n\r\n\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetWorldScale: function () {\r\n\r\n\t\tvar position = new THREE.Vector3();\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetWorldDirection: function () {\r\n\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t\tthis.getWorldQuaternion( quaternion );\r\n\r\n\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\traycast: function () {},\r\n\r\n\ttraverse: function ( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tvar children = this.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttraverseVisible: function ( callback ) {\r\n\r\n\t\tif ( this.visible === false ) return;\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tvar children = this.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverseVisible( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttraverseAncestors: function ( callback ) {\r\n\r\n\t\tvar parent = this.parent;\r\n\r\n\t\tif ( parent !== null ) {\r\n\r\n\t\t\tcallback( parent );\r\n\r\n\t\t\tparent.traverseAncestors( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tupdateMatrix: function () {\r\n\r\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t},\r\n\r\n\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\r\n\r\n\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\tforce = true;\r\n\r\n\t\t}\r\n\r\n\t\t// update children\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\t// meta is '' when called from JSON.stringify\r\n\t\tvar isRootObject = ( meta === undefined || meta === '' );\r\n\r\n\t\tvar output = {};\r\n\r\n\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t// not providing it implies that this is the root object\r\n\t\t// being serialized.\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\t// initialize meta obj\r\n\t\t\tmeta = {\r\n\t\t\t\tgeometries: {},\r\n\t\t\t\tmaterials: {},\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {}\r\n\t\t\t};\r\n\r\n\t\t\toutput.metadata = {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Object',\r\n\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// standard Object3D serialization\r\n\r\n\t\tvar object = {};\r\n\r\n\t\tobject.uuid = this.uuid;\r\n\t\tobject.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) object.name = this.name;\r\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\r\n\t\tif ( this.castShadow === true ) object.castShadow = true;\r\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\r\n\t\tif ( this.visible === false ) object.visible = false;\r\n\r\n\t\tobject.matrix = this.matrix.toArray();\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.geometry !== undefined ) {\r\n\r\n\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\r\n\r\n\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.geometry = this.geometry.uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.material !== undefined ) {\r\n\r\n\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\r\n\r\n\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.material = this.material.uuid;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.children.length > 0 ) {\r\n\r\n\t\t\tobject.children = [];\r\n\r\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tvar geometries = extractFromCache( meta.geometries );\r\n\t\t\tvar materials = extractFromCache( meta.materials );\r\n\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\tvar images = extractFromCache( meta.images );\r\n\r\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\r\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\r\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\r\n\t\t\tif ( images.length > 0 ) output.images = images;\r\n\r\n\t\t}\r\n\r\n\t\toutput.object = object;\r\n\r\n\t\treturn output;\r\n\r\n\t\t// extract data from the cache hash\r\n\t\t// remove metadata on each item\r\n\t\t// and return as array\r\n\t\tfunction extractFromCache ( cache ) {\r\n\r\n\t\t\tvar values = [];\r\n\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function ( recursive ) {\r\n\r\n\t\treturn new this.constructor().copy( this, recursive );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source, recursive ) {\r\n\r\n\t\tif ( recursive === undefined ) recursive = true;\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.up.copy( source.up );\r\n\r\n\t\tthis.position.copy( source.position );\r\n\t\tthis.quaternion.copy( source.quaternion );\r\n\t\tthis.scale.copy( source.scale );\r\n\r\n\t\tthis.matrix.copy( source.matrix );\r\n\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\tthis.castShadow = source.castShadow;\r\n\t\tthis.receiveShadow = source.receiveShadow;\r\n\r\n\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\tthis.renderOrder = source.renderOrder;\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\r\n\r\n\t\t\t\tvar child = source.children[ i ];\r\n\t\t\t\tthis.add( child.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\nTHREE.Object3DIdCount = 0;\r\n\r\n// File:src/core/Face3.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\r\n\r\n\tthis.a = a;\r\n\tthis.b = b;\r\n\tthis.c = c;\r\n\r\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\r\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\r\n\r\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\r\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\r\n\r\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n};\r\n\r\nTHREE.Face3.prototype = {\r\n\r\n\tconstructor: THREE.Face3,\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.a = source.a;\r\n\t\tthis.b = source.b;\r\n\t\tthis.c = source.c;\r\n\r\n\t\tthis.normal.copy( source.normal );\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.materialIndex = source.materialIndex;\r\n\r\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/BufferAttribute.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BufferAttribute = function ( array, itemSize, normalized ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.array = array;\r\n\tthis.itemSize = itemSize;\r\n\r\n\tthis.dynamic = false;\r\n\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\tthis.version = 0;\r\n\tthis.normalized = normalized === true;\r\n\r\n};\r\n\r\nTHREE.BufferAttribute.prototype = {\r\n\r\n\tconstructor: THREE.BufferAttribute,\r\n\r\n\tget count() {\r\n\r\n\t\treturn this.array.length / this.itemSize;\r\n\r\n\t},\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t},\r\n\r\n\tsetDynamic: function ( value ) {\r\n\r\n\t\tthis.dynamic = value;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.itemSize = source.itemSize;\r\n\r\n\t\tthis.dynamic = source.dynamic;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\tindex1 *= this.itemSize;\r\n\t\tindex2 *= attribute.itemSize;\r\n\r\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyArray: function ( array ) {\r\n\r\n\t\tthis.array.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyColorsArray: function ( colors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar color = colors[ i ];\r\n\r\n\t\t\tif ( color === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\r\n\t\t\t\tcolor = new THREE.Color();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = color.r;\r\n\t\t\tarray[ offset ++ ] = color.g;\r\n\t\t\tarray[ offset ++ ] = color.b;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyIndicesArray: function ( indices ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar index = indices[ i ];\r\n\r\n\t\t\tarray[ offset ++ ] = index.a;\r\n\t\t\tarray[ offset ++ ] = index.b;\r\n\t\t\tarray[ offset ++ ] = index.c;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector2sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new THREE.Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector3sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\tarray[ offset ++ ] = vector.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector4sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new THREE.Vector4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\tarray[ offset ++ ] = vector.z;\r\n\t\t\tarray[ offset ++ ] = vector.w;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tset: function ( value, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetX: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize ];\r\n\r\n\t},\r\n\r\n\tsetX: function ( index, x ) {\r\n\r\n\t\tthis.array[ index * this.itemSize ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetY: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 1 ];\r\n\r\n\t},\r\n\r\n\tsetY: function ( index, y ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetZ: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 2 ];\r\n\r\n\t},\r\n\r\n\tsetZ: function ( index, z ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetW: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 3 ];\r\n\r\n\t},\r\n\r\n\tsetW: function ( index, w ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXY: function ( index, x, y ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\t\tthis.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.Int8Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Int8Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint8Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint8Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint8ClampedAttribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Int16Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Int16Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint16Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint16Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Int32Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Int32Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint32Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint32Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Float32Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Float32Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Float64Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Float64Array( array ), itemSize );\r\n\r\n};\r\n\r\n\r\n// Deprecated\r\n\r\nTHREE.DynamicBufferAttribute = function ( array, itemSize ) {\r\n\r\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\r\n\treturn new THREE.BufferAttribute( array, itemSize ).setDynamic( true );\r\n\r\n};\r\n\r\n// File:src/core/InstancedBufferAttribute.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {\r\n\r\n\tTHREE.BufferAttribute.call( this, array, itemSize );\r\n\r\n\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n};\r\n\r\nTHREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );\r\nTHREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\r\n\r\nTHREE.InstancedBufferAttribute.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.BufferAttribute.prototype.copy.call( this, source );\r\n\r\n\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/core/InterleavedBuffer.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InterleavedBuffer = function ( array, stride ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.array = array;\r\n\tthis.stride = stride;\r\n\r\n\tthis.dynamic = false;\r\n\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\tthis.version = 0;\r\n\r\n};\r\n\r\nTHREE.InterleavedBuffer.prototype = {\r\n\r\n\tconstructor: THREE.InterleavedBuffer,\r\n\r\n\tget length () {\r\n\r\n\t\treturn this.array.length;\r\n\r\n\t},\r\n\r\n\tget count () {\r\n\r\n\t\treturn this.array.length / this.stride;\r\n\r\n\t},\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t},\r\n\r\n\tsetDynamic: function ( value ) {\r\n\r\n\t\tthis.dynamic = value;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.stride = source.stride;\r\n\t\tthis.dynamic = source.dynamic;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\tindex1 *= this.stride;\r\n\t\tindex2 *= attribute.stride;\r\n\r\n\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tset: function ( value, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/InstancedInterleavedBuffer.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {\r\n\r\n\tTHREE.InterleavedBuffer.call( this, array, stride );\r\n\r\n\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n};\r\n\r\nTHREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );\r\nTHREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\r\n\r\nTHREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.InterleavedBuffer.prototype.copy.call( this, source );\r\n\r\n\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/core/InterleavedBufferAttribute.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.data = interleavedBuffer;\r\n\tthis.itemSize = itemSize;\r\n\tthis.offset = offset;\r\n\r\n};\r\n\r\n\r\nTHREE.InterleavedBufferAttribute.prototype = {\r\n\r\n\tconstructor: THREE.InterleavedBufferAttribute,\r\n\r\n\tget length() {\r\n\r\n\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\r\n\t\treturn this.array.length;\r\n\r\n\t},\r\n\r\n\tget count() {\r\n\r\n\t\treturn this.data.count;\r\n\r\n\t},\r\n\r\n\tsetX: function ( index, x ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( index, y ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( index, z ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetW: function ( index, w ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetX: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\r\n\r\n\t},\r\n\r\n\tgetY: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\r\n\r\n\t},\r\n\r\n\tgetZ: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\r\n\r\n\t},\r\n\r\n\tgetW: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\r\n\r\n\t},\r\n\r\n\tsetXY: function ( index, x, y ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\t\tthis.data.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\t\tthis.data.array[ index + 2 ] = z;\r\n\t\tthis.data.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/Geometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author kile / http://kile.stravaganza.org/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Geometry = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'Geometry';\r\n\r\n\tthis.vertices = [];\r\n\tthis.colors = [];\r\n\tthis.faces = [];\r\n\tthis.faceVertexUvs = [ [] ];\r\n\r\n\tthis.morphTargets = [];\r\n\tthis.morphNormals = [];\r\n\r\n\tthis.skinWeights = [];\r\n\tthis.skinIndices = [];\r\n\r\n\tthis.lineDistances = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\t// update flags\r\n\r\n\tthis.verticesNeedUpdate = false;\r\n\tthis.elementsNeedUpdate = false;\r\n\tthis.uvsNeedUpdate = false;\r\n\tthis.normalsNeedUpdate = false;\r\n\tthis.colorsNeedUpdate = false;\r\n\tthis.lineDistancesNeedUpdate = false;\r\n\tthis.groupsNeedUpdate = false;\r\n\r\n};\r\n\r\nObject.assign( THREE.Geometry.prototype, THREE.EventDispatcher.prototype, {\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\tvertex.applyMatrix4( matrix );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ i ];\r\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.verticesNeedUpdate = true;\r\n\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateX: function () {\r\n\r\n\t\t// rotate geometry around world x-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateX( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\t// rotate geometry around world y-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateY( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\t// rotate geometry around world z-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateZ( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function () {\r\n\r\n\t\t// translate geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function translate( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tscale: function () {\r\n\r\n\t\t// scale geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function scale( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar obj;\r\n\r\n\t\treturn function lookAt( vector ) {\r\n\r\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\r\n\r\n\t\t\tobj.lookAt( vector );\r\n\r\n\t\t\tobj.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( obj.matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tfromBufferGeometry: function ( geometry ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\r\n\t\tvar attributes = geometry.attributes;\r\n\r\n\t\tvar positions = attributes.position.array;\r\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\r\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\r\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\r\n\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\r\n\r\n\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\r\n\r\n\t\tvar tempNormals = [];\r\n\t\tvar tempUVs = [];\r\n\t\tvar tempUVs2 = [];\r\n\r\n\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\r\n\r\n\t\t\tscope.vertices.push( new THREE.Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\r\n\r\n\t\t\tif ( normals !== undefined ) {\r\n\r\n\t\t\t\ttempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( colors !== undefined ) {\r\n\r\n\t\t\t\tscope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvs !== undefined ) {\r\n\r\n\t\t\t\ttempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvs2 !== undefined ) {\r\n\r\n\t\t\t\ttempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction addFace( a, b, c, materialIndex ) {\r\n\r\n\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\r\n\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\r\n\r\n\t\t\tvar face = new THREE.Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\r\n\r\n\t\t\tscope.faces.push( face );\r\n\r\n\t\t\tif ( uvs !== undefined ) {\r\n\r\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvs2 !== undefined ) {\r\n\r\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( indices !== undefined ) {\r\n\r\n\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\r\n\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\r\n\r\n\t\t\t\taddFace( i, i + 1, i + 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.computeFaceNormals();\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcenter: function () {\r\n\r\n\t\tthis.computeBoundingBox();\r\n\r\n\t\tvar offset = this.boundingBox.center().negate();\r\n\r\n\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\r\n\t\treturn offset;\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\tthis.computeBoundingSphere();\r\n\r\n\t\tvar center = this.boundingSphere.center;\r\n\t\tvar radius = this.boundingSphere.radius;\r\n\r\n\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\r\n\r\n\t\tvar matrix = new THREE.Matrix4();\r\n\t\tmatrix.set(\r\n\t\t\ts, 0, 0, - s * center.x,\r\n\t\t\t0, s, 0, - s * center.y,\r\n\t\t\t0, 0, s, - s * center.z,\r\n\t\t\t0, 0, 0, 1\r\n\t\t);\r\n\r\n\t\tthis.applyMatrix( matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\r\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ f ];\r\n\r\n\t\t\tvar vA = this.vertices[ face.a ];\r\n\t\t\tvar vB = this.vertices[ face.b ];\r\n\t\t\tvar vC = this.vertices[ face.c ];\r\n\r\n\t\t\tcb.subVectors( vC, vB );\r\n\t\t\tab.subVectors( vA, vB );\r\n\t\t\tcb.cross( ab );\r\n\r\n\t\t\tcb.normalize();\r\n\r\n\t\t\tface.normal.copy( cb );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function ( areaWeighted ) {\r\n\r\n\t\tif ( areaWeighted === undefined ) areaWeighted = true;\r\n\r\n\t\tvar v, vl, f, fl, face, vertices;\r\n\r\n\t\tvertices = new Array( this.vertices.length );\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\tvertices[ v ] = new THREE.Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tif ( areaWeighted ) {\r\n\r\n\t\t\t// vertex normals weighted by triangle areas\r\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\r\n\r\n\t\t\tvar vA, vB, vC;\r\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\tvertices[ face.a ].add( cb );\r\n\t\t\t\tvertices[ face.b ].add( cb );\r\n\t\t\t\tvertices[ face.c ].add( cb );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\tvertices[ v ].normalize();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\r\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\r\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.faces.length > 0 ) {\r\n\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeMorphNormals: function () {\r\n\r\n\t\tvar i, il, f, fl, face;\r\n\r\n\t\t// save original normals\r\n\t\t// - create temp variables on first access\r\n\t\t//   otherwise just copy (for faster repeated calls)\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tif ( ! face.__originalFaceNormal ) {\r\n\r\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\r\n\r\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// use temp geometry to compute face and vertex normals for each morph\r\n\r\n\t\tvar tmpGeo = new THREE.Geometry();\r\n\t\ttmpGeo.faces = this.faces;\r\n\r\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t// create on first access\r\n\r\n\t\t\tif ( ! this.morphNormals[ i ] ) {\r\n\r\n\t\t\t\tthis.morphNormals[ i ] = {};\r\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\r\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\r\n\r\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\r\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\r\n\r\n\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tfaceNormal = new THREE.Vector3();\r\n\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\r\n\r\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\r\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphNormals = this.morphNormals[ i ];\r\n\r\n\t\t\t// set vertices to morph target\r\n\r\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\r\n\r\n\t\t\t// compute morph normals\r\n\r\n\t\t\ttmpGeo.computeFaceNormals();\r\n\t\t\ttmpGeo.computeVertexNormals();\r\n\r\n\t\t\t// store morph normals\r\n\r\n\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\r\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\r\n\r\n\t\t\t\tfaceNormal.copy( face.normal );\r\n\r\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore original normals\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tface.normal = face.__originalFaceNormal;\r\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeTangents: function () {\r\n\r\n\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\r\n\r\n\t},\r\n\r\n\tcomputeLineDistances: function () {\r\n\r\n\t\tvar d = 0;\r\n\t\tvar vertices = this.vertices;\r\n\r\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tif ( i > 0 ) {\r\n\r\n\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.lineDistances[ i ] = d;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new THREE.Box3();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingBox.setFromPoints( this.vertices );\r\n\r\n\t},\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\r\n\r\n\t},\r\n\r\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\r\n\r\n\t\tif ( geometry instanceof THREE.Geometry === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar normalMatrix,\r\n\t\tvertexOffset = this.vertices.length,\r\n\t\tvertices1 = this.vertices,\r\n\t\tvertices2 = geometry.vertices,\r\n\t\tfaces1 = this.faces,\r\n\t\tfaces2 = geometry.faces,\r\n\t\tuvs1 = this.faceVertexUvs[ 0 ],\r\n\t\tuvs2 = geometry.faceVertexUvs[ 0 ];\r\n\r\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\r\n\r\n\t\tif ( matrix !== undefined ) {\r\n\r\n\t\t\tnormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t}\r\n\r\n\t\t// vertices\r\n\r\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = vertices2[ i ];\r\n\r\n\t\t\tvar vertexCopy = vertex.clone();\r\n\r\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\r\n\r\n\t\t\tvertices1.push( vertexCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// faces\r\n\r\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\r\n\t\t\tfaceVertexNormals = face.vertexNormals,\r\n\t\t\tfaceVertexColors = face.vertexColors;\r\n\r\n\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\r\n\t\t\tfaceCopy.normal.copy( face.normal );\r\n\r\n\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\r\n\r\n\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.color.copy( face.color );\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tcolor = faceVertexColors[ j ];\r\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\r\n\r\n\t\t\tfaces1.push( faceCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// uvs\r\n\r\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\r\n\r\n\t\t\tif ( uv === undefined ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tuvCopy.push( uv[ j ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvs1.push( uvCopy );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tmergeMesh: function ( mesh ) {\r\n\r\n\t\tif ( mesh instanceof THREE.Mesh === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\r\n\r\n\t\tthis.merge( mesh.geometry, mesh.matrix );\r\n\r\n\t},\r\n\r\n\t/*\r\n\t * Checks for duplicate vertices with hashmap.\r\n\t * Duplicated vertices are removed\r\n\t * and faces' vertices are updated.\r\n\t */\r\n\r\n\tmergeVertices: function () {\r\n\r\n\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\r\n\t\tvar unique = [], changes = [];\r\n\r\n\t\tvar v, key;\r\n\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\r\n\t\tvar precision = Math.pow( 10, precisionPoints );\r\n\t\tvar i, il, face;\r\n\t\tvar indices, j, jl;\r\n\r\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tv = this.vertices[ i ];\r\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\r\n\r\n\t\t\tif ( verticesMap[ key ] === undefined ) {\r\n\r\n\t\t\t\tverticesMap[ key ] = i;\r\n\t\t\t\tunique.push( this.vertices[ i ] );\r\n\t\t\t\tchanges[ i ] = unique.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\r\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// if faces are completely degenerate after merging vertices, we\r\n\t\t// have to remove them from the geometry.\r\n\t\tvar faceIndicesToRemove = [];\r\n\r\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = this.faces[ i ];\r\n\r\n\t\t\tface.a = changes[ face.a ];\r\n\t\t\tface.b = changes[ face.b ];\r\n\t\t\tface.c = changes[ face.c ];\r\n\r\n\t\t\tindices = [ face.a, face.b, face.c ];\r\n\r\n\t\t\tvar dupIndex = - 1;\r\n\r\n\t\t\t// if any duplicate vertices are found in a Face3\r\n\t\t\t// we have to remove the face as nothing can be saved\r\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\r\n\r\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\r\n\r\n\t\t\t\t\tdupIndex = n;\r\n\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\r\n\r\n\t\t\tvar idx = faceIndicesToRemove[ i ];\r\n\r\n\t\t\tthis.faces.splice( idx, 1 );\r\n\r\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Use unique set of vertices\r\n\r\n\t\tvar diff = this.vertices.length - unique.length;\r\n\t\tthis.vertices = unique;\r\n\t\treturn diff;\r\n\r\n\t},\r\n\r\n\tsortFacesByMaterialIndex: function () {\r\n\r\n\t\tvar faces = this.faces;\r\n\t\tvar length = faces.length;\r\n\r\n\t\t// tag faces\r\n\r\n\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tfaces[ i ]._id = i;\r\n\r\n\t\t}\r\n\r\n\t\t// sort faces\r\n\r\n\t\tfunction materialIndexSort( a, b ) {\r\n\r\n\t\t\treturn a.materialIndex - b.materialIndex;\r\n\r\n\t\t}\r\n\r\n\t\tfaces.sort( materialIndexSort );\r\n\r\n\t\t// sort uvs\r\n\r\n\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\r\n\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\r\n\r\n\t\tvar newUvs1, newUvs2;\r\n\r\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\r\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\r\n\r\n\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tvar id = faces[ i ]._id;\r\n\r\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\r\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\r\n\r\n\t\t}\r\n\r\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\r\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Geometry',\r\n\t\t\t\tgenerator: 'Geometry.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard Geometry serialization\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t\tvar vertices = [];\r\n\r\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\r\n\r\n\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t}\r\n\r\n\t\tvar faces = [];\r\n\t\tvar normals = [];\r\n\t\tvar normalsHash = {};\r\n\t\tvar colors = [];\r\n\t\tvar colorsHash = {};\r\n\t\tvar uvs = [];\r\n\t\tvar uvsHash = {};\r\n\r\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ i ];\r\n\r\n\t\t\tvar hasMaterial = true;\r\n\t\t\tvar hasFaceUv = false; // deprecated\r\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\r\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\r\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\r\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\r\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\r\n\r\n\t\t\tvar faceType = 0;\r\n\r\n\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\r\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\r\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\r\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\r\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\r\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\r\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\r\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\r\n\r\n\t\t\tfaces.push( faceType );\r\n\t\t\tfaces.push( face.a, face.b, face.c );\r\n\t\t\tfaces.push( face.materialIndex );\r\n\r\n\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setBit( value, position, enabled ) {\r\n\r\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getNormalIndex( normal ) {\r\n\r\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\r\n\r\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\r\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getColorIndex( color ) {\r\n\r\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\r\n\r\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcolorsHash[ hash ] = colors.length;\r\n\t\t\tcolors.push( color.getHex() );\r\n\r\n\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getUvIndex( uv ) {\r\n\r\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\r\n\r\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\r\n\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tdata.data = {};\r\n\r\n\t\tdata.data.vertices = vertices;\r\n\t\tdata.data.normals = normals;\r\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\r\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\r\n\t\tdata.data.faces = faces;\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\t/*\r\n\t\t// Handle primitives\r\n\r\n\t\tvar parameters = this.parameters;\r\n\r\n\t\tif ( parameters !== undefined ) {\r\n\r\n\t\t\tvar values = [];\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tvalues.push( parameters[ key ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry = Object.create( this.constructor.prototype );\r\n\t\t\tthis.constructor.apply( geometry, values );\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\t\t*/\r\n\r\n\t\treturn new THREE.Geometry().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.vertices = [];\r\n\t\tthis.faces = [];\r\n\t\tthis.faceVertexUvs = [ [] ];\r\n\r\n\t\tvar vertices = source.vertices;\r\n\r\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar faces = source.faces;\r\n\r\n\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.faces.push( faces[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\r\n\r\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\r\n\r\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\r\n\r\n\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\tvar uv = uvs[ k ];\r\n\r\n\t\t\t\t\tuvsCopy.push( uv.clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n} );\r\n\r\nTHREE.GeometryIdCount = 0;\r\n\r\n// File:src/core/DirectGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.DirectGeometry = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'DirectGeometry';\r\n\r\n\tthis.indices = [];\r\n\tthis.vertices = [];\r\n\tthis.normals = [];\r\n\tthis.colors = [];\r\n\tthis.uvs = [];\r\n\tthis.uvs2 = [];\r\n\r\n\tthis.groups = [];\r\n\r\n\tthis.morphTargets = {};\r\n\r\n\tthis.skinWeights = [];\r\n\tthis.skinIndices = [];\r\n\r\n\t// this.lineDistances = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\t// update flags\r\n\r\n\tthis.verticesNeedUpdate = false;\r\n\tthis.normalsNeedUpdate = false;\r\n\tthis.colorsNeedUpdate = false;\r\n\tthis.uvsNeedUpdate = false;\r\n\tthis.groupsNeedUpdate = false;\r\n\r\n};\r\n\r\nObject.assign( THREE.DirectGeometry.prototype, THREE.EventDispatcher.prototype, {\r\n\r\n\tcomputeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\r\n\tcomputeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function () {\r\n\r\n\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\r\n\r\n\t},\r\n\r\n\tcomputeGroups: function ( geometry ) {\r\n\r\n\t\tvar group;\r\n\t\tvar groups = [];\r\n\t\tvar materialIndex;\r\n\r\n\t\tvar faces = geometry.faces;\r\n\r\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t// materials\r\n\r\n\t\t\tif ( face.materialIndex !== materialIndex ) {\r\n\r\n\t\t\t\tmaterialIndex = face.materialIndex;\r\n\r\n\t\t\t\tif ( group !== undefined ) {\r\n\r\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\t\tgroups.push( group );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgroup = {\r\n\t\t\t\t\tstart: i * 3,\r\n\t\t\t\t\tmaterialIndex: materialIndex\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( group !== undefined ) {\r\n\r\n\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\tgroups.push( group );\r\n\r\n\t\t}\r\n\r\n\t\tthis.groups = groups;\r\n\r\n\t},\r\n\r\n\tfromGeometry: function ( geometry ) {\r\n\r\n\t\tvar faces = geometry.faces;\r\n\t\tvar vertices = geometry.vertices;\r\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\r\n\r\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\r\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\r\n\r\n\t\t// morphs\r\n\r\n\t\tvar morphTargets = geometry.morphTargets;\r\n\t\tvar morphTargetsLength = morphTargets.length;\r\n\r\n\t\tvar morphTargetsPosition;\r\n\r\n\t\tif ( morphTargetsLength > 0 ) {\r\n\r\n\t\t\tmorphTargetsPosition = [];\r\n\r\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\r\n\r\n\t\t\t\tmorphTargetsPosition[ i ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\r\n\r\n\t\t}\r\n\r\n\t\tvar morphNormals = geometry.morphNormals;\r\n\t\tvar morphNormalsLength = morphNormals.length;\r\n\r\n\t\tvar morphTargetsNormal;\r\n\r\n\t\tif ( morphNormalsLength > 0 ) {\r\n\r\n\t\t\tmorphTargetsNormal = [];\r\n\r\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\r\n\r\n\t\t\t\tmorphTargetsNormal[ i ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\r\n\r\n\t\t}\r\n\r\n\t\t// skins\r\n\r\n\t\tvar skinIndices = geometry.skinIndices;\r\n\t\tvar skinWeights = geometry.skinWeights;\r\n\r\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\r\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\r\n\r\n\t\t//\r\n\r\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\r\n\r\n\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar normal = face.normal;\r\n\r\n\t\t\t\tthis.normals.push( normal, normal, normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\tif ( vertexColors.length === 3 ) {\r\n\r\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar color = face.color;\r\n\r\n\t\t\t\tthis.colors.push( color, color, color );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexUv === true ) {\r\n\r\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\r\n\r\n\t\t\t\t\tthis.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexUv2 === true ) {\r\n\r\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\r\n\r\n\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\r\n\r\n\t\t\t\t\tthis.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morphs\r\n\r\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\r\n\r\n\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\r\n\r\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\r\n\r\n\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skins\r\n\r\n\t\t\tif ( hasSkinIndices ) {\r\n\r\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasSkinWeights ) {\r\n\r\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.computeGroups( geometry );\r\n\r\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/core/BufferGeometry.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BufferGeometry = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'BufferGeometry';\r\n\r\n\tthis.index = null;\r\n\tthis.attributes = {};\r\n\r\n\tthis.morphAttributes = {};\r\n\r\n\tthis.groups = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\tthis.drawRange = { start: 0, count: Infinity };\r\n\r\n};\r\n\r\nObject.assign( THREE.BufferGeometry.prototype, THREE.EventDispatcher.prototype, {\r\n\r\n\tgetIndex: function () {\r\n\r\n\t\treturn this.index;\r\n\r\n\t},\r\n\r\n\tsetIndex: function ( index ) {\r\n\r\n\t\tthis.index = index;\r\n\r\n\t},\r\n\r\n\taddAttribute: function ( name, attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\r\n\r\n\t\t\tthis.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( name === 'index' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\r\n\t\t\tthis.setIndex( attribute );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.attributes[ name ] = attribute;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetAttribute: function ( name ) {\r\n\r\n\t\treturn this.attributes[ name ];\r\n\r\n\t},\r\n\r\n\tremoveAttribute: function ( name ) {\r\n\r\n\t\tdelete this.attributes[ name ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddGroup: function ( start, count, materialIndex ) {\r\n\r\n\t\tthis.groups.push( {\r\n\r\n\t\t\tstart: start,\r\n\t\t\tcount: count,\r\n\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\r\n\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\tclearGroups: function () {\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t},\r\n\r\n\tsetDrawRange: function ( start, count ) {\r\n\r\n\t\tthis.drawRange.start = start;\r\n\t\tthis.drawRange.count = count;\r\n\r\n\t},\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar position = this.attributes.position;\r\n\r\n\t\tif ( position !== undefined ) {\r\n\r\n\t\t\tmatrix.applyToVector3Array( position.array );\r\n\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tvar normal = this.attributes.normal;\r\n\r\n\t\tif ( normal !== undefined ) {\r\n\r\n\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\tnormalMatrix.applyToVector3Array( normal.array );\r\n\t\t\tnormal.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateX: function () {\r\n\r\n\t\t// rotate geometry around world x-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateX( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\t// rotate geometry around world y-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateY( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\t// rotate geometry around world z-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateZ( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function () {\r\n\r\n\t\t// translate geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function translate( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tscale: function () {\r\n\r\n\t\t// scale geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function scale( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar obj;\r\n\r\n\t\treturn function lookAt( vector ) {\r\n\r\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\r\n\r\n\t\t\tobj.lookAt( vector );\r\n\r\n\t\t\tobj.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( obj.matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcenter: function () {\r\n\r\n\t\tthis.computeBoundingBox();\r\n\r\n\t\tvar offset = this.boundingBox.center().negate();\r\n\r\n\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\r\n\t\treturn offset;\r\n\r\n\t},\r\n\r\n\tsetFromObject: function ( object ) {\r\n\r\n\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( object instanceof THREE.Points || object instanceof THREE.Line ) {\r\n\r\n\t\t\tvar positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );\r\n\t\t\tvar colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );\r\n\r\n\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\r\n\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\r\n\r\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\r\n\r\n\t\t\t\tvar lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );\r\n\r\n\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\tthis.fromGeometry( geometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tupdateFromObject: function ( object ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tvar direct = geometry.__directGeometry;\r\n\r\n\t\t\tif ( direct === undefined ) {\r\n\r\n\t\t\t\treturn this.fromGeometry( geometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t\tgeometry = direct;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.verticesNeedUpdate === true ) {\r\n\r\n\t\t\tvar attribute = this.attributes.position;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.verticesNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.normalsNeedUpdate === true ) {\r\n\r\n\t\t\tvar attribute = this.attributes.normal;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyVector3sArray( geometry.normals );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.normalsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.colorsNeedUpdate === true ) {\r\n\r\n\t\t\tvar attribute = this.attributes.color;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyColorsArray( geometry.colors );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvsNeedUpdate ) {\r\n\r\n\t\t\tvar attribute = this.attributes.uv;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.uvsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.lineDistancesNeedUpdate ) {\r\n\r\n\t\t\tvar attribute = this.attributes.lineDistance;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyArray( geometry.lineDistances );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.groupsNeedUpdate ) {\r\n\r\n\t\t\tgeometry.computeGroups( object.geometry );\r\n\t\t\tthis.groups = geometry.groups;\r\n\r\n\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfromGeometry: function ( geometry ) {\r\n\r\n\t\tgeometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );\r\n\r\n\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\r\n\r\n\t},\r\n\r\n\tfromDirectGeometry: function ( geometry ) {\r\n\r\n\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\r\n\r\n\t\tif ( geometry.normals.length > 0 ) {\r\n\r\n\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\r\n\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.colors.length > 0 ) {\r\n\r\n\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\r\n\t\t\tthis.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvs.length > 0 ) {\r\n\r\n\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\r\n\t\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvs2.length > 0 ) {\r\n\r\n\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\r\n\t\t\tthis.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.indices.length > 0 ) {\r\n\r\n\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\r\n\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\r\n\t\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\r\n\r\n\t\t}\r\n\r\n\t\t// groups\r\n\r\n\t\tthis.groups = geometry.groups;\r\n\r\n\t\t// morphs\r\n\r\n\t\tfor ( var name in geometry.morphTargets ) {\r\n\r\n\t\t\tvar array = [];\r\n\t\t\tvar morphTargets = geometry.morphTargets[ name ];\r\n\r\n\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\r\n\t\t\t\tvar attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );\r\n\r\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t}\r\n\r\n\t\t// skinning\r\n\r\n\t\tif ( geometry.skinIndices.length > 0 ) {\r\n\r\n\t\t\tvar skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );\r\n\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.skinWeights.length > 0 ) {\r\n\r\n\t\t\tvar skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );\r\n\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new THREE.Box3();\r\n\r\n\t\t}\r\n\r\n\t\tvar positions = this.attributes.position.array;\r\n\r\n\t\tif ( positions !== undefined ) {\r\n\r\n\t\t\tthis.boundingBox.setFromArray( positions );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.boundingBox.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tvar box = new THREE.Box3();\r\n\t\tvar vector = new THREE.Vector3();\r\n\r\n\t\treturn function computeBoundingSphere() {\r\n\r\n\t\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar positions = this.attributes.position.array;\r\n\r\n\t\t\tif ( positions ) {\r\n\r\n\t\t\t\tvar center = this.boundingSphere.center;\r\n\r\n\t\t\t\tbox.setFromArray( positions );\r\n\t\t\t\tbox.center( center );\r\n\r\n\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\r\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\r\n\t\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tvector.fromArray( positions, i );\r\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\t// backwards compatibility\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function () {\r\n\r\n\t\tvar index = this.index;\r\n\t\tvar attributes = this.attributes;\r\n\t\tvar groups = this.groups;\r\n\r\n\t\tif ( attributes.position ) {\r\n\r\n\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\tif ( attributes.normal === undefined ) {\r\n\r\n\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\tvar array = attributes.normal.array;\r\n\r\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tarray[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar normals = attributes.normal.array;\r\n\r\n\t\t\tvar vA, vB, vC,\r\n\r\n\t\t\tpA = new THREE.Vector3(),\r\n\t\t\tpB = new THREE.Vector3(),\r\n\t\t\tpC = new THREE.Vector3(),\r\n\r\n\t\t\tcb = new THREE.Vector3(),\r\n\t\t\tab = new THREE.Vector3();\r\n\r\n\t\t\t// indexed elements\r\n\r\n\t\t\tif ( index ) {\r\n\r\n\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\t\t\tthis.addGroup( 0, indices.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\r\n\r\n\t\t\t\t\tvar group = groups[ j ];\r\n\r\n\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\r\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\r\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\r\n\r\n\t\t\t\t\t\tpA.fromArray( positions, vA );\r\n\t\t\t\t\t\tpB.fromArray( positions, vB );\r\n\t\t\t\t\t\tpC.fromArray( positions, vC );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\tpA.fromArray( positions, i );\r\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\r\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnormals[ i ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\tattributes.normal.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tmerge: function ( geometry, offset ) {\r\n\r\n\t\tif ( geometry instanceof THREE.BufferGeometry === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\r\n\r\n\t\t\tvar attribute1 = attributes[ key ];\r\n\t\t\tvar attributeArray1 = attribute1.array;\r\n\r\n\t\t\tvar attribute2 = geometry.attributes[ key ];\r\n\t\t\tvar attributeArray2 = attribute2.array;\r\n\r\n\t\t\tvar attributeSize = attribute2.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\r\n\r\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnormalizeNormals: function () {\r\n\r\n\t\tvar normals = this.attributes.normal.array;\r\n\r\n\t\tvar x, y, z, n;\r\n\r\n\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\r\n\r\n\t\t\tx = normals[ i ];\r\n\t\t\ty = normals[ i + 1 ];\r\n\t\t\tz = normals[ i + 2 ];\r\n\r\n\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\r\n\r\n\t\t\tnormals[ i ] *= n;\r\n\t\t\tnormals[ i + 1 ] *= n;\r\n\t\t\tnormals[ i + 2 ] *= n;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoNonIndexed: function () {\r\n\r\n\t\tif ( this.index === null ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar geometry2 = new THREE.BufferGeometry();\r\n\r\n\t\tvar indices = this.index.array;\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ name ];\r\n\r\n\t\t\tvar array = attribute.array;\r\n\t\t\tvar itemSize = attribute.itemSize;\r\n\r\n\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\r\n\r\n\t\t\tvar index = 0, index2 = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tindex = indices[ i ] * itemSize;\r\n\r\n\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry2.addAttribute( name, new THREE.BufferAttribute( array2, itemSize ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry2;\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'BufferGeometry',\r\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard BufferGeometry serialization\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t\tdata.data = { attributes: {} };\r\n\r\n\t\tvar index = this.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tvar array = Array.prototype.slice.call( index.array );\r\n\r\n\t\t\tdata.data.index = {\r\n\t\t\t\ttype: index.array.constructor.name,\r\n\t\t\t\tarray: array\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ key ];\r\n\r\n\t\t\tvar array = Array.prototype.slice.call( attribute.array );\r\n\r\n\t\t\tdata.data.attributes[ key ] = {\r\n\t\t\t\titemSize: attribute.itemSize,\r\n\t\t\t\ttype: attribute.array.constructor.name,\r\n\t\t\t\tarray: array,\r\n\t\t\t\tnormalized: attribute.normalized\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = this.groups;\r\n\r\n\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar boundingSphere = this.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\tdata.data.boundingSphere = {\r\n\t\t\t\tcenter: boundingSphere.center.toArray(),\r\n\t\t\t\tradius: boundingSphere.radius\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\t/*\r\n\t\t// Handle primitives\r\n\r\n\t\tvar parameters = this.parameters;\r\n\r\n\t\tif ( parameters !== undefined ) {\r\n\r\n\t\t\tvar values = [];\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tvalues.push( parameters[ key ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry = Object.create( this.constructor.prototype );\r\n\t\t\tthis.constructor.apply( geometry, values );\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\t\t*/\r\n\r\n\t\treturn new THREE.BufferGeometry().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tvar index = source.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tthis.setIndex( index.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = source.attributes;\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ name ];\r\n\t\t\tthis.addAttribute( name, attribute.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = source.groups;\r\n\r\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar group = groups[ i ];\r\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n} );\r\n\r\nTHREE.BufferGeometry.MaxIndex = 65535;\r\n\r\n// File:src/core/InstancedBufferGeometry.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InstancedBufferGeometry = function () {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'InstancedBufferGeometry';\r\n\tthis.maxInstancedCount = undefined;\r\n\r\n};\r\n\r\nTHREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\r\n\r\nTHREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\r\n\r\n\tthis.groups.push( {\r\n\r\n\t\tstart: start,\r\n\t\tcount: count,\r\n\t\tinstances: instances\r\n\r\n\t} );\r\n\r\n};\r\n\r\nTHREE.InstancedBufferGeometry.prototype.copy = function ( source ) {\r\n\r\n\tvar index = source.index;\r\n\r\n\tif ( index !== null ) {\r\n\r\n\t\tthis.setIndex( index.clone() );\r\n\r\n\t}\r\n\r\n\tvar attributes = source.attributes;\r\n\r\n\tfor ( var name in attributes ) {\r\n\r\n\t\tvar attribute = attributes[ name ];\r\n\t\tthis.addAttribute( name, attribute.clone() );\r\n\r\n\t}\r\n\r\n\tvar groups = source.groups;\r\n\r\n\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\tvar group = groups[ i ];\r\n\t\tthis.addGroup( group.start, group.count, group.instances );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/core/Uniform.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Uniform = function ( value ) {\r\n\r\n\tif ( typeof value === 'string' ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\r\n\t\tvalue = arguments[ 1 ];\r\n\r\n\t}\r\n\r\n\tthis.value = value;\r\n\r\n\tthis.dynamic = false;\r\n\r\n};\r\n\r\nTHREE.Uniform.prototype = {\r\n\r\n\tconstructor: THREE.Uniform,\r\n\r\n\tonUpdate: function ( callback ) {\r\n\r\n\t\tthis.dynamic = true;\r\n\t\tthis.onUpdateCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/animation/AnimationAction.js\r\n\r\n/**\r\n *\r\n * Action provided by AnimationMixer for scheduling clip playback on specific\r\n * objects.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n *\r\n */\r\n\r\nTHREE.AnimationAction = function() {\r\n\r\n\tthrow new Error( \"THREE.AnimationAction: \" +\r\n\t\t\t\"Use mixer.clipAction for construction.\" );\r\n\r\n};\r\n\r\nTHREE.AnimationAction._new =\r\n\t\tfunction AnimationAction( mixer, clip, localRoot ) {\r\n\r\n\tthis._mixer = mixer;\r\n\tthis._clip = clip;\r\n\tthis._localRoot = localRoot || null;\r\n\r\n\tvar tracks = clip.tracks,\r\n\t\tnTracks = tracks.length,\r\n\t\tinterpolants = new Array( nTracks );\r\n\r\n\tvar interpolantSettings = {\r\n\t\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\r\n\t\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\r\n\t};\r\n\r\n\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\tvar interpolant = tracks[ i ].createInterpolant( null );\r\n\t\tinterpolants[ i ] = interpolant;\r\n\t\tinterpolant.settings = interpolantSettings;\r\n\r\n\t}\r\n\r\n\tthis._interpolantSettings = interpolantSettings;\r\n\r\n\tthis._interpolants = interpolants;\t// bound by the mixer\r\n\r\n\t// inside: PropertyMixer (managed by the mixer)\r\n\tthis._propertyBindings = new Array( nTracks );\r\n\r\n\tthis._cacheIndex = null;\t\t\t// for the memory manager\r\n\tthis._byClipCacheIndex = null;\t\t// for the memory manager\r\n\r\n\tthis._timeScaleInterpolant = null;\r\n\tthis._weightInterpolant = null;\r\n\r\n\tthis.loop = THREE.LoopRepeat;\r\n\tthis._loopCount = -1;\r\n\r\n\t// global mixer time when the action is to be started\r\n\t// it's set back to 'null' upon start of the action\r\n\tthis._startTime = null;\r\n\r\n\t// scaled local time of the action\r\n\t// gets clamped or wrapped to 0..clip.duration according to loop\r\n\tthis.time = 0;\r\n\r\n\tthis.timeScale = 1;\r\n\tthis._effectiveTimeScale = 1;\r\n\r\n\tthis.weight = 1;\r\n\tthis._effectiveWeight = 1;\r\n\r\n\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\r\n\r\n\tthis.paused = false;\t\t\t\t// false -> zero effective time scale\r\n\tthis.enabled = true;\t\t\t\t// true -> zero effective weight\r\n\r\n\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\r\n\r\n\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\r\n\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\r\n\r\n};\r\n\r\nTHREE.AnimationAction._new.prototype = {\r\n\r\n\tconstructor: THREE.AnimationAction._new,\r\n\r\n\t// State & Scheduling\r\n\r\n\tplay: function() {\r\n\r\n\t\tthis._mixer._activateAction( this );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tstop: function() {\r\n\r\n\t\tthis._mixer._deactivateAction( this );\r\n\r\n\t\treturn this.reset();\r\n\r\n\t},\r\n\r\n\treset: function() {\r\n\r\n\t\tthis.paused = false;\r\n\t\tthis.enabled = true;\r\n\r\n\t\tthis.time = 0;\t\t\t// restart clip\r\n\t\tthis._loopCount = -1;\t// forget previous loops\r\n\t\tthis._startTime = null;\t// forget scheduling\r\n\r\n\t\treturn this.stopFading().stopWarping();\r\n\r\n\t},\r\n\r\n\tisRunning: function() {\r\n\r\n\t\tvar start = this._startTime;\r\n\r\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\r\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\r\n\r\n\t},\r\n\r\n\t// return true when play has been called\r\n\tisScheduled: function() {\r\n\r\n\t\treturn this._mixer._isActiveAction( this );\r\n\r\n\t},\r\n\r\n\tstartAt: function( time ) {\r\n\r\n\t\tthis._startTime = time;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetLoop: function( mode, repetitions ) {\r\n\r\n\t\tthis.loop = mode;\r\n\t\tthis.repetitions = repetitions;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// Weight\r\n\r\n\t// set the weight stopping any scheduled fading\r\n\t// although .enabled = false yields an effective weight of zero, this\r\n\t// method does *not* change .enabled, because it would be confusing\r\n\tsetEffectiveWeight: function( weight ) {\r\n\r\n\t\tthis.weight = weight;\r\n\r\n\t\t// note: same logic as when updated at runtime\r\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\r\n\r\n\t\treturn this.stopFading();\r\n\r\n\t},\r\n\r\n\t// return the weight considering fading and .enabled\r\n\tgetEffectiveWeight: function() {\r\n\r\n\t\treturn this._effectiveWeight;\r\n\r\n\t},\r\n\r\n\tfadeIn: function( duration ) {\r\n\r\n\t\treturn this._scheduleFading( duration, 0, 1 );\r\n\r\n\t},\r\n\r\n\tfadeOut: function( duration ) {\r\n\r\n\t\treturn this._scheduleFading( duration, 1, 0 );\r\n\r\n\t},\r\n\r\n\tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\r\n\r\n\t\tvar mixer = this._mixer;\r\n\r\n\t\tfadeOutAction.fadeOut( duration );\r\n\t\tthis.fadeIn( duration );\r\n\r\n\t\tif( warp ) {\r\n\r\n\t\t\tvar fadeInDuration = this._clip.duration,\r\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\r\n\r\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\r\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\r\n\r\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\r\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcrossFadeTo: function( fadeInAction, duration, warp ) {\r\n\r\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\r\n\r\n\t},\r\n\r\n\tstopFading: function() {\r\n\r\n\t\tvar weightInterpolant = this._weightInterpolant;\r\n\r\n\t\tif ( weightInterpolant !== null ) {\r\n\r\n\t\t\tthis._weightInterpolant = null;\r\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// Time Scale Control\r\n\r\n\t// set the weight stopping any scheduled warping\r\n\t// although .paused = true yields an effective time scale of zero, this\r\n\t// method does *not* change .paused, because it would be confusing\r\n\tsetEffectiveTimeScale: function( timeScale ) {\r\n\r\n\t\tthis.timeScale = timeScale;\r\n\t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\r\n\r\n\t\treturn this.stopWarping();\r\n\r\n\t},\r\n\r\n\t// return the time scale considering warping and .paused\r\n\tgetEffectiveTimeScale: function() {\r\n\r\n\t\treturn this._effectiveTimeScale;\r\n\r\n\t},\r\n\r\n\tsetDuration: function( duration ) {\r\n\r\n\t\tthis.timeScale = this._clip.duration / duration;\r\n\r\n\t\treturn this.stopWarping();\r\n\r\n\t},\r\n\r\n\tsyncWith: function( action ) {\r\n\r\n\t\tthis.time = action.time;\r\n\t\tthis.timeScale = action.timeScale;\r\n\r\n\t\treturn this.stopWarping();\r\n\r\n\t},\r\n\r\n\thalt: function( duration ) {\r\n\r\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\r\n\r\n\t},\r\n\r\n\twarp: function( startTimeScale, endTimeScale, duration ) {\r\n\r\n\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\tinterpolant = this._timeScaleInterpolant,\r\n\r\n\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\tif ( interpolant === null ) {\r\n\r\n\t\t\tinterpolant = mixer._lendControlInterpolant(),\r\n\t\t\tthis._timeScaleInterpolant = interpolant;\r\n\r\n\t\t}\r\n\r\n\t\tvar times = interpolant.parameterPositions,\r\n\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\ttimes[ 0 ] = now;\r\n\t\ttimes[ 1 ] = now + duration;\r\n\r\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\r\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tstopWarping: function() {\r\n\r\n\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\r\n\r\n\t\tif ( timeScaleInterpolant !== null ) {\r\n\r\n\t\t\tthis._timeScaleInterpolant = null;\r\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// Object Accessors\r\n\r\n\tgetMixer: function() {\r\n\r\n\t\treturn this._mixer;\r\n\r\n\t},\r\n\r\n\tgetClip: function() {\r\n\r\n\t\treturn this._clip;\r\n\r\n\t},\r\n\r\n\tgetRoot: function() {\r\n\r\n\t\treturn this._localRoot || this._mixer._root;\r\n\r\n\t},\r\n\r\n\t// Interna\r\n\r\n\t_update: function( time, deltaTime, timeDirection, accuIndex ) {\r\n\t\t// called by the mixer\r\n\r\n\t\tvar startTime = this._startTime;\r\n\r\n\t\tif ( startTime !== null ) {\r\n\r\n\t\t\t// check for scheduled start of action\r\n\r\n\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\r\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\r\n\r\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// start\r\n\r\n\t\t\tthis._startTime = null; // unschedule\r\n\t\t\tdeltaTime = timeDirection * timeRunning;\r\n\r\n\t\t}\r\n\r\n\t\t// apply time scale and advance time\r\n\r\n\t\tdeltaTime *= this._updateTimeScale( time );\r\n\t\tvar clipTime = this._updateTime( deltaTime );\r\n\r\n\t\t// note: _updateTime may disable the action resulting in\r\n\t\t// an effective weight of 0\r\n\r\n\t\tvar weight = this._updateWeight( time );\r\n\r\n\t\tif ( weight > 0 ) {\r\n\r\n\t\t\tvar interpolants = this._interpolants;\r\n\t\t\tvar propertyMixers = this._propertyBindings;\r\n\r\n\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\r\n\r\n\t\t\t\tinterpolants[ j ].evaluate( clipTime );\r\n\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_updateWeight: function( time ) {\r\n\r\n\t\tvar weight = 0;\r\n\r\n\t\tif ( this.enabled ) {\r\n\r\n\t\t\tweight = this.weight;\r\n\t\t\tvar interpolant = this._weightInterpolant;\r\n\r\n\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\tweight *= interpolantValue;\r\n\r\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\tthis.stopFading();\r\n\r\n\t\t\t\t\tif ( interpolantValue === 0 ) {\r\n\r\n\t\t\t\t\t\t// faded out, disable\r\n\t\t\t\t\t\tthis.enabled = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis._effectiveWeight = weight;\r\n\t\treturn weight;\r\n\r\n\t},\r\n\r\n\t_updateTimeScale: function( time ) {\r\n\r\n\t\tvar timeScale = 0;\r\n\r\n\t\tif ( ! this.paused ) {\r\n\r\n\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\t\tvar interpolant = this._timeScaleInterpolant;\r\n\r\n\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\ttimeScale *= interpolantValue;\r\n\r\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\tthis.stopWarping();\r\n\r\n\t\t\t\t\tif ( timeScale === 0 ) {\r\n\r\n\t\t\t\t\t\t// motion has halted, pause\r\n\t\t\t\t\t\tthis.paused = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// warp done - apply final time scale\r\n\t\t\t\t\t\tthis.timeScale = timeScale;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis._effectiveTimeScale = timeScale;\r\n\t\treturn timeScale;\r\n\r\n\t},\r\n\r\n\t_updateTime: function( deltaTime ) {\r\n\r\n\t\tvar time = this.time + deltaTime;\r\n\r\n\t\tif ( deltaTime === 0 ) return time;\r\n\r\n\t\tvar duration = this._clip.duration,\r\n\r\n\t\t\tloop = this.loop,\r\n\t\t\tloopCount = this._loopCount;\r\n\r\n\t\tif ( loop === THREE.LoopOnce ) {\r\n\r\n\t\t\tif ( loopCount === -1 ) {\r\n\t\t\t\t// just started\r\n\r\n\t\t\t\tthis.loopCount = 0;\r\n\t\t\t\tthis._setEndings( true, true, false );\r\n\r\n\t\t\t}\r\n\r\n\t\t\thandle_stop: {\r\n\r\n\t\t\t\tif ( time >= duration ) {\r\n\r\n\t\t\t\t\ttime = duration;\r\n\r\n\t\t\t\t} else if ( time < 0 ) {\r\n\r\n\t\t\t\t\ttime = 0;\r\n\r\n\t\t\t\t} else break handle_stop;\r\n\r\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\r\n\t\t\t\telse this.enabled = false;\r\n\r\n\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else { // repetitive Repeat or PingPong\r\n\r\n\t\t\tvar pingPong = ( loop === THREE.LoopPingPong );\r\n\r\n\t\t\tif ( loopCount === -1 ) {\r\n\t\t\t\t// just started\r\n\r\n\t\t\t\tif ( deltaTime >= 0 ) {\r\n\r\n\t\t\t\t\tloopCount = 0;\r\n\r\n\t\t\t\t\tthis._setEndings(\r\n\t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// when looping in reverse direction, the initial\r\n\t\t\t\t\t// transition through zero counts as a repetition,\r\n\t\t\t\t\t// so leave loopCount at -1\r\n\r\n\t\t\t\t\tthis._setEndings(\r\n\t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( time >= duration || time < 0 ) {\r\n\t\t\t\t// wrap around\r\n\r\n\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\r\n\t\t\t\ttime -= duration * loopDelta;\r\n\r\n\t\t\t\tloopCount += Math.abs( loopDelta );\r\n\r\n\t\t\t\tvar pending = this.repetitions - loopCount;\r\n\r\n\t\t\t\tif ( pending < 0 ) {\r\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\r\n\r\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\r\n\t\t\t\t\telse this.enabled = false;\r\n\r\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\r\n\r\n\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// keep running\r\n\r\n\t\t\t\t\tif ( pending === 0 ) {\r\n\t\t\t\t\t\t// entering the last round\r\n\r\n\t\t\t\t\t\tvar atStart = deltaTime < 0;\r\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis._loopCount = loopCount;\r\n\r\n\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\r\n\t\t\t\t// invert time for the \"pong round\"\r\n\r\n\t\t\t\tthis.time = time;\r\n\t\t\t\treturn duration - time;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.time = time;\r\n\t\treturn time;\r\n\r\n\t},\r\n\r\n\t_setEndings: function( atStart, atEnd, pingPong ) {\r\n\r\n\t\tvar settings = this._interpolantSettings;\r\n\r\n\t\tif ( pingPong ) {\r\n\r\n\t\t\tsettings.endingStart \t= THREE.ZeroSlopeEnding;\r\n\t\t\tsettings.endingEnd\t\t= THREE.ZeroSlopeEnding;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\r\n\r\n\t\t\tif ( atStart ) {\r\n\r\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\r\n\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsettings.endingStart = THREE.WrapAroundEnding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( atEnd ) {\r\n\r\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\r\n\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsettings.endingEnd \t = THREE.WrapAroundEnding;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_scheduleFading: function( duration, weightNow, weightThen ) {\r\n\r\n\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\tinterpolant = this._weightInterpolant;\r\n\r\n\t\tif ( interpolant === null ) {\r\n\r\n\t\t\tinterpolant = mixer._lendControlInterpolant(),\r\n\t\t\tthis._weightInterpolant = interpolant;\r\n\r\n\t\t}\r\n\r\n\t\tvar times = interpolant.parameterPositions,\r\n\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\r\n\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// File:src/animation/AnimationClip.js\r\n\r\n/**\r\n *\r\n * Reusable set of Tracks that represent an animation.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.AnimationClip = function ( name, duration, tracks ) {\r\n\r\n\tthis.name = name;\r\n\tthis.tracks = tracks;\r\n\tthis.duration = ( duration !== undefined ) ? duration : -1;\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\t// this means it should figure out its duration by scanning the tracks\r\n\tif ( this.duration < 0 ) {\r\n\r\n\t\tthis.resetDuration();\r\n\r\n\t}\r\n\r\n\t// maybe only do these on demand, as doing them here could potentially slow down loading\r\n\t// but leaving these here during development as this ensures a lot of testing of these functions\r\n\tthis.trim();\r\n\tthis.optimize();\r\n\r\n};\r\n\r\nTHREE.AnimationClip.prototype = {\r\n\r\n\tconstructor: THREE.AnimationClip,\r\n\r\n\tresetDuration: function() {\r\n\r\n\t\tvar tracks = this.tracks,\r\n\t\t\tduration = 0;\r\n\r\n\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar track = this.tracks[ i ];\r\n\r\n\t\t\tduration = Math.max(\r\n\t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\r\n\r\n\t\t}\r\n\r\n\t\tthis.duration = duration;\r\n\r\n\t},\r\n\r\n\ttrim: function() {\r\n\r\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\toptimize: function() {\r\n\r\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\tthis.tracks[ i ].optimize();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Static methods:\r\n\r\nObject.assign( THREE.AnimationClip, {\r\n\r\n\tparse: function( json ) {\r\n\r\n\t\tvar tracks = [],\r\n\t\t\tjsonTracks = json.tracks,\r\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\r\n\r\n\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\ttracks.push( THREE.KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn new THREE.AnimationClip( json.name, json.duration, tracks );\r\n\r\n\t},\r\n\r\n\r\n\ttoJSON: function( clip ) {\r\n\r\n\t\tvar tracks = [],\r\n\t\t\tclipTracks = clip.tracks;\r\n\r\n\t\tvar json = {\r\n\r\n\t\t\t'name': clip.name,\r\n\t\t\t'duration': clip.duration,\r\n\t\t\t'tracks': tracks\r\n\r\n\t\t};\r\n\r\n\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\ttracks.push( THREE.KeyframeTrack.toJSON( clipTracks[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn json;\r\n\r\n\t},\r\n\r\n\r\n\tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\r\n\r\n\t\tvar numMorphTargets = morphTargetSequence.length;\r\n\t\tvar tracks = [];\r\n\r\n\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\r\n\r\n\t\t\tvar times = [];\r\n\t\t\tvar values = [];\r\n\r\n\t\t\ttimes.push(\r\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\r\n\t\t\t\t\ti,\r\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\r\n\r\n\t\t\tvalues.push( 0, 1, 0 );\r\n\r\n\t\t\tvar order = THREE.AnimationUtils.getKeyframeOrder( times );\r\n\t\t\ttimes = THREE.AnimationUtils.sortedArray( times, 1, order );\r\n\t\t\tvalues = THREE.AnimationUtils.sortedArray( values, 1, order );\r\n\r\n\t\t\t// if there is a key at the first frame, duplicate it as the\r\n\t\t\t// last frame as well for perfect loop.\r\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\r\n\r\n\t\t\t\ttimes.push( numMorphTargets );\r\n\t\t\t\tvalues.push( values[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttracks.push(\r\n\t\t\t\t\tnew THREE.NumberKeyframeTrack(\r\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\r\n\t\t\t\t\t\ttimes, values\r\n\t\t\t\t\t).scale( 1.0 / fps ) );\r\n\t\t}\r\n\r\n\t\treturn new THREE.AnimationClip( name, -1, tracks );\r\n\r\n\t},\r\n\r\n\tfindByName: function( objectOrClipArray, name ) {\r\n\r\n\t\tvar clipArray = objectOrClipArray;\r\n\r\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\r\n\r\n\t\t\tvar o = objectOrClipArray;\r\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\r\n\r\n\t\t\tif ( clipArray[ i ].name === name ) {\r\n\r\n\t\t\t\treturn clipArray[ i ];\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t},\r\n\r\n\tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\r\n\r\n\t\tvar animationToMorphTargets = {};\r\n\r\n\t\t// tested with https://regex101.com/ on trick sequences\r\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\r\n\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\r\n\r\n\t\t// sort morph target names into animation groups based\r\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\r\n\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar morphTarget = morphTargets[ i ];\r\n\t\t\tvar parts = morphTarget.name.match( pattern );\r\n\r\n\t\t\tif ( parts && parts.length > 1 ) {\r\n\r\n\t\t\t\tvar name = parts[ 1 ];\r\n\r\n\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\r\n\t\t\t\tif ( ! animationMorphTargets ) {\r\n\r\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tanimationMorphTargets.push( morphTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar clips = [];\r\n\r\n\t\tfor ( var name in animationToMorphTargets ) {\r\n\r\n\t\t\tclips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn clips;\r\n\r\n\t},\r\n\r\n\t// parse the animation.hierarchy format\r\n\tparseAnimation: function( animation, bones, nodeName ) {\r\n\r\n\t\tif ( ! animation ) {\r\n\r\n\t\t\tconsole.error( \"  no animation in JSONLoader data\" );\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tvar addNonemptyTrack = function(\r\n\t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\r\n\r\n\t\t\t// only return track if there are actually keys.\r\n\t\t\tif ( animationKeys.length !== 0 ) {\r\n\r\n\t\t\t\tvar times = [];\r\n\t\t\t\tvar values = [];\r\n\r\n\t\t\t\tTHREE.AnimationUtils.flattenJSON(\r\n\t\t\t\t\t\tanimationKeys, times, values, propertyName );\r\n\r\n\t\t\t\t// empty keys are filtered out, so check again\r\n\t\t\t\tif ( times.length !== 0 ) {\r\n\r\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar tracks = [];\r\n\r\n\t\tvar clipName = animation.name || 'default';\r\n\t\t// automatic length determination in AnimationClip.\r\n\t\tvar duration = animation.length || -1;\r\n\t\tvar fps = animation.fps || 30;\r\n\r\n\t\tvar hierarchyTracks = animation.hierarchy || [];\r\n\r\n\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\r\n\r\n\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\r\n\r\n\t\t\t// skip empty tracks\r\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\r\n\r\n\t\t\t// process morph targets in a way exactly compatible\r\n\t\t\t// with AnimationHandler.init( animation )\r\n\t\t\tif ( animationKeys[0].morphTargets ) {\r\n\r\n\t\t\t\t// figure out all morph targets used in this track\r\n\t\t\t\tvar morphTargetNames = {};\r\n\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\r\n\r\n\t\t\t\t\tif ( animationKeys[k].morphTargets ) {\r\n\r\n\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// create a track for each morph target with all zero\r\n\t\t\t\t// morphTargetInfluences except for the keys in which\r\n\t\t\t\t// the morphTarget is named.\r\n\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\r\n\r\n\t\t\t\t\tvar times = [];\r\n\t\t\t\t\tvar values = [];\r\n\r\n\t\t\t\t\tfor ( var m = 0;\r\n\t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\r\n\r\n\t\t\t\t\t\tvar animationKey = animationKeys[k];\r\n\r\n\t\t\t\t\t\ttimes.push( animationKey.time );\r\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttracks.push( new THREE.NumberKeyframeTrack(\r\n\t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// ...assume skeletal animation\r\n\r\n\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\r\n\r\n\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.position',\r\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\r\n\r\n\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tTHREE.QuaternionKeyframeTrack, boneName + '.quaternion',\r\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\r\n\r\n\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.scale',\r\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( tracks.length === 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tvar clip = new THREE.AnimationClip( clipName, duration, tracks );\r\n\r\n\t\treturn clip;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/animation/AnimationMixer.js\r\n\r\n/**\r\n *\r\n * Player for AnimationClips.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.AnimationMixer = function( root ) {\r\n\r\n\tthis._root = root;\r\n\tthis._initMemoryManager();\r\n\tthis._accuIndex = 0;\r\n\r\n\tthis.time = 0;\r\n\r\n\tthis.timeScale = 1.0;\r\n\r\n};\r\n\r\nObject.assign( THREE.AnimationMixer.prototype, THREE.EventDispatcher.prototype, {\r\n\r\n\t// return an action for a clip optionally using a custom root target\r\n\t// object (this method allocates a lot of dynamic memory in case a\r\n\t// previously unknown clip/root combination is specified)\r\n\tclipAction: function( clip, optionalRoot ) {\r\n\r\n\t\tvar root = optionalRoot || this._root,\r\n\t\t\trootUuid = root.uuid,\r\n\r\n\t\t\tclipObject = typeof clip === 'string' ?\r\n\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\r\n\r\n\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\r\n\r\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\r\n\t\t\tprototypeAction = null;\r\n\r\n\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\tvar existingAction =\r\n\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( existingAction !== undefined ) {\r\n\r\n\t\t\t\treturn existingAction;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// we know the clip, so we don't have to parse all\r\n\t\t\t// the bindings again but can just copy\r\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\r\n\r\n\t\t\t// also, take the clip from the prototype action\r\n\t\t\tif ( clipObject === null )\r\n\t\t\t\tclipObject = prototypeAction._clip;\r\n\r\n\t\t}\r\n\r\n\t\t// clip must be known when specified via string\r\n\t\tif ( clipObject === null ) return null;\r\n\r\n\t\t// allocate all resources required to run it\r\n\t\tvar newAction = new THREE.\r\n\t\t\t\tAnimationMixer._Action( this, clipObject, optionalRoot );\r\n\r\n\t\tthis._bindAction( newAction, prototypeAction );\r\n\r\n\t\t// and make the action known to the memory manager\r\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\r\n\r\n\t\treturn newAction;\r\n\r\n\t},\r\n\r\n\t// get an existing action\r\n\texistingAction: function( clip, optionalRoot ) {\r\n\r\n\t\tvar root = optionalRoot || this._root,\r\n\t\t\trootUuid = root.uuid,\r\n\r\n\t\t\tclipObject = typeof clip === 'string' ?\r\n\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\r\n\r\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\r\n\r\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\r\n\r\n\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t},\r\n\r\n\t// deactivates all previously scheduled actions\r\n\tstopAllAction: function() {\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tnActions = this._nActiveActions,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\tthis._nActiveActions = 0;\r\n\t\tthis._nActiveBindings = 0;\r\n\r\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\tactions[ i ].reset();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].useCount = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// advance the time and update apply the animation\r\n\tupdate: function( deltaTime ) {\r\n\r\n\t\tdeltaTime *= this.timeScale;\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tnActions = this._nActiveActions,\r\n\r\n\t\t\ttime = this.time += deltaTime,\r\n\t\t\ttimeDirection = Math.sign( deltaTime ),\r\n\r\n\t\t\taccuIndex = this._accuIndex ^= 1;\r\n\r\n\t\t// run active actions\r\n\r\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\tvar action = actions[ i ];\r\n\r\n\t\t\tif ( action.enabled ) {\r\n\r\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// update scene graph\r\n\r\n\t\tvar bindings = this._bindings,\r\n\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].apply( accuIndex );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// return this mixer's root target object\r\n\tgetRoot: function() {\r\n\r\n\t\treturn this._root;\r\n\r\n\t},\r\n\r\n\t// free all resources specific to a particular clip\r\n\tuncacheClip: function( clip ) {\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tclipUuid = clip.uuid,\r\n\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\r\n\r\n\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t// note: just calling _removeInactiveAction would mess up the\r\n\t\t\t// iteration state and also require updating the state we can\r\n\t\t\t// just throw away\r\n\r\n\t\t\tvar actionsToRemove = actionsForClip.knownActions;\r\n\r\n\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar action = actionsToRemove[ i ];\r\n\r\n\t\t\t\tthis._deactivateAction( action );\r\n\r\n\t\t\t\tvar cacheIndex = action._cacheIndex,\r\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\r\n\r\n\t\t\t\taction._cacheIndex = null;\r\n\t\t\t\taction._byClipCacheIndex = null;\r\n\r\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\t\t\tactions.pop();\r\n\r\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdelete actionsByClip[ clipUuid ];\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// free all resources specific to a particular root target object\r\n\tuncacheRoot: function( root ) {\r\n\r\n\t\tvar rootUuid = root.uuid,\r\n\t\t\tactionsByClip = this._actionsByClip;\r\n\r\n\t\tfor ( var clipUuid in actionsByClip ) {\r\n\r\n\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\r\n\t\t\t\taction = actionByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( action !== undefined ) {\r\n\r\n\t\t\t\tthis._deactivateAction( action );\r\n\t\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\tif ( bindingByName !== undefined ) {\r\n\r\n\t\t\tfor ( var trackName in bindingByName ) {\r\n\r\n\t\t\t\tvar binding = bindingByName[ trackName ];\r\n\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// remove a targeted clip from the cache\r\n\tuncacheAction: function( clip, optionalRoot ) {\r\n\r\n\t\tvar action = this.existingAction( clip, optionalRoot );\r\n\r\n\t\tif ( action !== null ) {\r\n\r\n\t\t\tthis._deactivateAction( action );\r\n\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\nTHREE.AnimationMixer._Action = THREE.AnimationAction._new;\r\n\r\n// Implementation details:\r\n\r\nObject.assign( THREE.AnimationMixer.prototype, {\r\n\r\n\t_bindAction: function( action, prototypeAction ) {\r\n\r\n\t\tvar root = action._localRoot || this._root,\r\n\t\t\ttracks = action._clip.tracks,\r\n\t\t\tnTracks = tracks.length,\r\n\t\t\tbindings = action._propertyBindings,\r\n\t\t\tinterpolants = action._interpolants,\r\n\t\t\trootUuid = root.uuid,\r\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\tif ( bindingsByName === undefined ) {\r\n\r\n\t\t\tbindingsByName = {};\r\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\t\tvar track = tracks[ i ],\r\n\t\t\t\ttrackName = track.name,\r\n\t\t\t\tbinding = bindingsByName[ trackName ];\r\n\r\n\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbinding = bindings[ i ];\r\n\r\n\t\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\t\t// existing binding, make sure the cache knows\r\n\r\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\r\n\r\n\t\t\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar path = prototypeAction && prototypeAction.\r\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\r\n\r\n\t\t\t\tbinding = new THREE.PropertyMixer(\r\n\t\t\t\t\t\tTHREE.PropertyBinding.create( root, trackName, path ),\r\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\r\n\r\n\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_activateAction: function( action ) {\r\n\r\n\t\tif ( ! this._isActiveAction( action ) ) {\r\n\r\n\t\t\tif ( action._cacheIndex === null ) {\r\n\r\n\t\t\t\t// this action has been forgotten by the cache, but the user\r\n\t\t\t\t// appears to be still using it -> rebind\r\n\r\n\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\r\n\t\t\t\t\tclipUuid = action._clip.uuid,\r\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\r\n\r\n\t\t\t\tthis._bindAction( action,\r\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\r\n\r\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar bindings = action._propertyBindings;\r\n\r\n\t\t\t// increment reference counts / sort out state\r\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\r\n\r\n\t\t\t\t\tthis._lendBinding( binding );\r\n\t\t\t\t\tbinding.saveOriginalState();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._lendAction( action );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_deactivateAction: function( action ) {\r\n\r\n\t\tif ( this._isActiveAction( action ) ) {\r\n\r\n\t\t\tvar bindings = action._propertyBindings;\r\n\r\n\t\t\t// decrement reference counts / sort out state\r\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\tif ( -- binding.useCount === 0 ) {\r\n\r\n\t\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\t\tthis._takeBackBinding( binding );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._takeBackAction( action );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// Memory manager\r\n\r\n\t_initMemoryManager: function() {\r\n\r\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\r\n\t\tthis._nActiveActions = 0;\r\n\r\n\t\tthis._actionsByClip = {};\r\n\t\t// inside:\r\n\t\t// {\r\n\t\t// \t\tknownActions: Array< _Action >\t- used as prototypes\r\n\t\t// \t\tactionByRoot: _Action\t\t\t- lookup\r\n\t\t// }\r\n\r\n\r\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\r\n\t\tthis._nActiveBindings = 0;\r\n\r\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\r\n\r\n\r\n\t\tthis._controlInterpolants = []; // same game as above\r\n\t\tthis._nActiveControlInterpolants = 0;\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tthis.stats = {\r\n\r\n\t\t\tactions: {\r\n\t\t\t\tget total() { return scope._actions.length; },\r\n\t\t\t\tget inUse() { return scope._nActiveActions; }\r\n\t\t\t},\r\n\t\t\tbindings: {\r\n\t\t\t\tget total() { return scope._bindings.length; },\r\n\t\t\t\tget inUse() { return scope._nActiveBindings; }\r\n\t\t\t},\r\n\t\t\tcontrolInterpolants: {\r\n\t\t\t\tget total() { return scope._controlInterpolants.length; },\r\n\t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t},\r\n\r\n\t// Memory management for _Action objects\r\n\r\n\t_isActiveAction: function( action ) {\r\n\r\n\t\tvar index = action._cacheIndex;\r\n\t\treturn index !== null && index < this._nActiveActions;\r\n\r\n\t},\r\n\r\n\t_addInactiveAction: function( action, clipUuid, rootUuid ) {\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\r\n\r\n\t\tif ( actionsForClip === undefined ) {\r\n\r\n\t\t\tactionsForClip = {\r\n\r\n\t\t\t\tknownActions: [ action ],\r\n\t\t\t\tactionByRoot: {}\r\n\r\n\t\t\t};\r\n\r\n\t\t\taction._byClipCacheIndex = 0;\r\n\r\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar knownActions = actionsForClip.knownActions;\r\n\r\n\t\t\taction._byClipCacheIndex = knownActions.length;\r\n\t\t\tknownActions.push( action );\r\n\r\n\t\t}\r\n\r\n\t\taction._cacheIndex = actions.length;\r\n\t\tactions.push( action );\r\n\r\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\r\n\r\n\t},\r\n\r\n\t_removeInactiveAction: function( action ) {\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\r\n\t\t\tcacheIndex = action._cacheIndex;\r\n\r\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\tactions.pop();\r\n\r\n\t\taction._cacheIndex = null;\r\n\r\n\r\n\t\tvar clipUuid = action._clip.uuid,\r\n\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\r\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\r\n\r\n\t\t\tlastKnownAction =\r\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\r\n\r\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\r\n\r\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\r\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\r\n\t\tknownActionsForClip.pop();\r\n\r\n\t\taction._byClipCacheIndex = null;\r\n\r\n\r\n\t\tvar actionByRoot = actionsForClip.actionByRoot,\r\n\t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\r\n\r\n\t\tdelete actionByRoot[ rootUuid ];\r\n\r\n\t\tif ( knownActionsForClip.length === 0 ) {\r\n\r\n\t\t\tdelete actionsByClip[ clipUuid ];\r\n\r\n\t\t}\r\n\r\n\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t},\r\n\r\n\t_removeInactiveBindingsForAction: function( action ) {\r\n\r\n\t\tvar bindings = action._propertyBindings;\r\n\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\tif ( -- binding.referenceCount === 0 ) {\r\n\r\n\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_lendAction: function( action ) {\r\n\r\n\t\t// [ active actions |  inactive actions  ]\r\n\t\t// [  active actions >| inactive actions ]\r\n\t\t//                 s        a\r\n\t\t//                  <-swap->\r\n\t\t//                 a        s\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\tlastActiveIndex = this._nActiveActions ++,\r\n\r\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\r\n\r\n\t\taction._cacheIndex = lastActiveIndex;\r\n\t\tactions[ lastActiveIndex ] = action;\r\n\r\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\r\n\t\tactions[ prevIndex ] = firstInactiveAction;\r\n\r\n\t},\r\n\r\n\t_takeBackAction: function( action ) {\r\n\r\n\t\t// [  active actions  | inactive actions ]\r\n\t\t// [ active actions |< inactive actions  ]\r\n\t\t//        a        s\r\n\t\t//         <-swap->\r\n\t\t//        s        a\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\r\n\r\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\r\n\r\n\t\taction._cacheIndex = firstInactiveIndex;\r\n\t\tactions[ firstInactiveIndex ] = action;\r\n\r\n\t\tlastActiveAction._cacheIndex = prevIndex;\r\n\t\tactions[ prevIndex ] = lastActiveAction;\r\n\r\n\t},\r\n\r\n\t// Memory management for PropertyMixer objects\r\n\r\n\t_addInactiveBinding: function( binding, rootUuid, trackName ) {\r\n\r\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\tbindings = this._bindings;\r\n\r\n\t\tif ( bindingByName === undefined ) {\r\n\r\n\t\t\tbindingByName = {};\r\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\r\n\r\n\t\t}\r\n\r\n\t\tbindingByName[ trackName ] = binding;\r\n\r\n\t\tbinding._cacheIndex = bindings.length;\r\n\t\tbindings.push( binding );\r\n\r\n\t},\r\n\r\n\t_removeInactiveBinding: function( binding ) {\r\n\r\n\t\tvar bindings = this._bindings,\r\n\t\t\tpropBinding = binding.binding,\r\n\t\t\trootUuid = propBinding.rootNode.uuid,\r\n\t\t\ttrackName = propBinding.path,\r\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\r\n\t\t\tcacheIndex = binding._cacheIndex;\r\n\r\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\r\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\r\n\t\tbindings.pop();\r\n\r\n\t\tdelete bindingByName[ trackName ];\r\n\r\n\t\tremove_empty_map: {\r\n\r\n\t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\r\n\r\n\t\t\tdelete bindingsByRoot[ rootUuid ];\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_lendBinding: function( binding ) {\r\n\r\n\t\tvar bindings = this._bindings,\r\n\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\r\n\r\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\r\n\r\n\t\tbinding._cacheIndex = lastActiveIndex;\r\n\t\tbindings[ lastActiveIndex ] = binding;\r\n\r\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\r\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\r\n\r\n\t},\r\n\r\n\t_takeBackBinding: function( binding ) {\r\n\r\n\t\tvar bindings = this._bindings,\r\n\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\r\n\r\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\r\n\r\n\t\tbinding._cacheIndex = firstInactiveIndex;\r\n\t\tbindings[ firstInactiveIndex ] = binding;\r\n\r\n\t\tlastActiveBinding._cacheIndex = prevIndex;\r\n\t\tbindings[ prevIndex ] = lastActiveBinding;\r\n\r\n\t},\r\n\r\n\r\n\t// Memory management of Interpolants for weight and time scale\r\n\r\n\t_lendControlInterpolant: function() {\r\n\r\n\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\r\n\t\t\tinterpolant = interpolants[ lastActiveIndex ];\r\n\r\n\t\tif ( interpolant === undefined ) {\r\n\r\n\t\t\tinterpolant = new THREE.LinearInterpolant(\r\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\r\n\t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\r\n\r\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\r\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\r\n\r\n\t\t}\r\n\r\n\t\treturn interpolant;\r\n\r\n\t},\r\n\r\n\t_takeBackControlInterpolant: function( interpolant ) {\r\n\r\n\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\tprevIndex = interpolant.__cacheIndex,\r\n\r\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\r\n\r\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\r\n\r\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\r\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\r\n\r\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\r\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\r\n\r\n\t},\r\n\r\n\t_controlInterpolantsResultBuffer: new Float32Array( 1 )\r\n\r\n} );\r\n\r\n// File:src/animation/AnimationObjectGroup.js\r\n\r\n/**\r\n *\r\n * A group of objects that receives a shared animation state.\r\n *\r\n * Usage:\r\n *\r\n * \t-\tAdd objects you would otherwise pass as 'root' to the\r\n * \t\tconstructor or the .clipAction method of AnimationMixer.\r\n *\r\n * \t-\tInstead pass this object as 'root'.\r\n *\r\n * \t-\tYou can also add and remove objects later when the mixer\r\n * \t\tis running.\r\n *\r\n * Note:\r\n *\r\n *  \tObjects of this class appear as one object to the mixer,\r\n *  \tso cache control of the individual objects must be done\r\n *  \ton the group.\r\n *\r\n * Limitation:\r\n *\r\n * \t- \tThe animated properties must be compatible among the\r\n * \t\tall objects in the group.\r\n *\r\n *  -\tA single property can either be controlled through a\r\n *  \ttarget group or directly, but not both.\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.AnimationObjectGroup = function( var_args ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\t// cached objects followed by the active ones\r\n\tthis._objects = Array.prototype.slice.call( arguments );\r\n\r\n\tthis.nCachedObjects_ = 0;\t\t\t// threshold\r\n\t// note: read by PropertyBinding.Composite\r\n\r\n\tvar indices = {};\r\n\tthis._indicesByUUID = indices;\t\t// for bookkeeping\r\n\r\n\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\tindices[ arguments[ i ].uuid ] = i;\r\n\r\n\t}\r\n\r\n\tthis._paths = [];\t\t\t\t\t// inside: string\r\n\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\r\n\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\r\n\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.stats = {\r\n\r\n\t\tobjects: {\r\n\t\t\tget total() { return scope._objects.length; },\r\n\t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\r\n\t\t},\r\n\r\n\t\tget bindingsPerObject() { return scope._bindings.length; }\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.AnimationObjectGroup.prototype = {\r\n\r\n\tconstructor: THREE.AnimationObjectGroup,\r\n\r\n\tadd: function( var_args ) {\r\n\r\n\t\tvar objects = this._objects,\r\n\t\t\tnObjects = objects.length,\r\n\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\tpaths = this._paths,\r\n\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = bindings.length;\r\n\r\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar object = arguments[ i ],\r\n\t\t\t\tuuid = object.uuid,\r\n\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\tif ( index === undefined ) {\r\n\r\n\t\t\t\t// unknown object -> add it to the ACTIVE region\r\n\r\n\t\t\t\tindex = nObjects ++;\r\n\t\t\t\tindicesByUUID[ uuid ] = index;\r\n\t\t\t\tobjects.push( object );\r\n\r\n\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tbindings[ j ].push(\r\n\t\t\t\t\t\t\tnew THREE.PropertyBinding(\r\n\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( index < nCachedObjects ) {\r\n\r\n\t\t\t\tvar knownObject = objects[ index ];\r\n\r\n\t\t\t\t// move existing object to the ACTIVE region\r\n\r\n\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\r\n\r\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\r\n\t\t\t\tobjects[ firstActiveIndex ] = object;\r\n\r\n\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\r\n\t\t\t\t\tif ( binding === undefined ) {\r\n\r\n\t\t\t\t\t\t// since we do not bother to create new bindings\r\n\t\t\t\t\t\t// for objects that are cached, the binding may\r\n\t\t\t\t\t\t// or may not exist\r\n\r\n\t\t\t\t\t\tbinding = new THREE.PropertyBinding(\r\n\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( objects[ index ] !== knownObject) {\r\n\r\n\t\t\t\tconsole.error( \"Different objects with the same UUID \" +\r\n\t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\r\n\t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\r\n\r\n\t\t\t} // else the object is already where we want it to be\r\n\r\n\t\t} // for arguments\r\n\r\n\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t},\r\n\r\n\tremove: function( var_args ) {\r\n\r\n\t\tvar objects = this._objects,\r\n\t\t\tnObjects = objects.length,\r\n\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = bindings.length;\r\n\r\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar object = arguments[ i ],\r\n\t\t\t\tuuid = object.uuid,\r\n\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\r\n\r\n\t\t\t\t// move existing object into the CACHED region\r\n\r\n\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\r\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\r\n\r\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\r\n\t\t\t\tobjects[ index ] = firstActiveObject;\r\n\r\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\r\n\t\t\t\tobjects[ lastCachedIndex ] = object;\r\n\r\n\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\r\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\r\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} // for arguments\r\n\r\n\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t},\r\n\r\n\t// remove & forget\r\n\tuncache: function( var_args ) {\r\n\r\n\t\tvar objects = this._objects,\r\n\t\t\tnObjects = objects.length,\r\n\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = bindings.length;\r\n\r\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar object = arguments[ i ],\r\n\t\t\t\tuuid = object.uuid,\r\n\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tdelete indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index < nCachedObjects ) {\r\n\r\n\t\t\t\t\t// object is cached, shrink the CACHED region\r\n\r\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\r\n\t\t\t\t\t\tlastIndex = -- nObjects,\r\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\t// last cached object takes this object's place\r\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\t\t// last object goes to the activated slot and pop\r\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\r\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\r\n\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\r\n\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// object is active, just swap with the last and pop\r\n\r\n\t\t\t\t\tvar lastIndex = -- nObjects,\r\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = lastObject;\r\n\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\r\n\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} // cached or active\r\n\r\n\t\t\t} // if object is known\r\n\r\n\t\t} // for arguments\r\n\r\n\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t},\r\n\r\n\t// Internal interface used by befriended PropertyBinding.Composite:\r\n\r\n\tsubscribe_: function( path, parsedPath ) {\r\n\t\t// returns an array of bindings for the given path that is changed\r\n\t\t// according to the contained objects in the group\r\n\r\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\tindex = indicesByPath[ path ],\r\n\t\t\tbindings = this._bindings;\r\n\r\n\t\tif ( index !== undefined ) return bindings[ index ];\r\n\r\n\t\tvar paths = this._paths,\r\n\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\tobjects = this._objects,\r\n\t\t\tnObjects = objects.length,\r\n\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\tbindingsForPath = new Array( nObjects );\r\n\r\n\t\tindex = bindings.length;\r\n\r\n\t\tindicesByPath[ path ] = index;\r\n\r\n\t\tpaths.push( path );\r\n\t\tparsedPaths.push( parsedPath );\r\n\t\tbindings.push( bindingsForPath );\r\n\r\n\t\tfor ( var i = nCachedObjects,\r\n\t\t\t\tn = objects.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar object = objects[ i ];\r\n\r\n\t\t\tbindingsForPath[ i ] =\r\n\t\t\t\t\tnew THREE.PropertyBinding( object, path, parsedPath );\r\n\r\n\t\t}\r\n\r\n\t\treturn bindingsForPath;\r\n\r\n\t},\r\n\r\n\tunsubscribe_: function( path ) {\r\n\t\t// tells the group to forget about a property path and no longer\r\n\t\t// update the array previously obtained with 'subscribe_'\r\n\r\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\tindex = indicesByPath[ path ];\r\n\r\n\t\tif ( index !== undefined ) {\r\n\r\n\t\t\tvar paths = this._paths,\r\n\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\r\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\r\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\r\n\r\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\r\n\r\n\t\t\tbindings[ index ] = lastBindings;\r\n\t\t\tbindings.pop();\r\n\r\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\r\n\t\t\tparsedPaths.pop();\r\n\r\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\r\n\t\t\tpaths.pop();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// File:src/animation/AnimationUtils.js\r\n\r\n/**\r\n * @author tschw\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.AnimationUtils = {\r\n\r\n\t// same as Array.prototype.slice, but also works on typed arrays\r\n\tarraySlice: function( array, from, to ) {\r\n\r\n\t\tif ( THREE.AnimationUtils.isTypedArray( array ) ) {\r\n\r\n\t\t\treturn new array.constructor( array.subarray( from, to ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn array.slice( from, to );\r\n\r\n\t},\r\n\r\n\t// converts an array to a specific type\r\n\tconvertArray: function( array, type, forceClone ) {\r\n\r\n\t\tif ( ! array || // let 'undefined' and 'null' pass\r\n\t\t\t\t! forceClone && array.constructor === type ) return array;\r\n\r\n\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\r\n\r\n\t\t\treturn new type( array ); // create typed array\r\n\r\n\t\t}\r\n\r\n\t\treturn Array.prototype.slice.call( array ); // create Array\r\n\r\n\t},\r\n\r\n\tisTypedArray: function( object ) {\r\n\r\n\t\treturn ArrayBuffer.isView( object ) &&\r\n\t\t\t\t! ( object instanceof DataView );\r\n\r\n\t},\r\n\r\n\t// returns an array by which times and values can be sorted\r\n\tgetKeyframeOrder: function( times ) {\r\n\r\n\t\tfunction compareTime( i, j ) {\r\n\r\n\t\t\treturn times[ i ] - times[ j ];\r\n\r\n\t\t}\r\n\r\n\t\tvar n = times.length;\r\n\t\tvar result = new Array( n );\r\n\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\r\n\r\n\t\tresult.sort( compareTime );\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\t// uses the array previously returned by 'getKeyframeOrder' to sort data\r\n\tsortedArray: function( values, stride, order ) {\r\n\r\n\t\tvar nValues = values.length;\r\n\t\tvar result = new values.constructor( nValues );\r\n\r\n\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\r\n\r\n\t\t\tvar srcOffset = order[ i ] * stride;\r\n\r\n\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\t// function for parsing AOS keyframe formats\r\n\tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\r\n\r\n\t\tvar i = 1, key = jsonKeys[ 0 ];\r\n\r\n\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\r\n\r\n\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( key === undefined ) return; // no data\r\n\r\n\t\tvar value = key[ valuePropertyName ];\r\n\t\tif ( value === undefined ) return; // no data\r\n\r\n\t\tif ( Array.isArray( value ) ) {\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t} while ( key !== undefined );\r\n\r\n\t\t} else if ( value.toArray !== undefined ) {\r\n\t\t\t// ...assume THREE.Math-ish\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\tvalue.toArray( values, values.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t} while ( key !== undefined );\r\n\r\n\t\t} else {\r\n\t\t\t// otherwise push as-is\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\tvalues.push( value );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t} while ( key !== undefined );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/animation/KeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A timed sequence of keyframes for a specific property.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.KeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tif( name === undefined ) throw new Error( \"track name is undefined\" );\r\n\r\n\tif( times === undefined || times.length === 0 ) {\r\n\r\n\t\tthrow new Error( \"no keyframes in track named \" + name );\r\n\r\n\t}\r\n\r\n\tthis.name = name;\r\n\r\n\tthis.times = THREE.AnimationUtils.convertArray( times, this.TimeBufferType );\r\n\tthis.values = THREE.AnimationUtils.convertArray( values, this.ValueBufferType );\r\n\r\n\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\r\n\r\n\tthis.validate();\r\n\tthis.optimize();\r\n\r\n};\r\n\r\nTHREE.KeyframeTrack.prototype = {\r\n\r\n\tconstructor: THREE.KeyframeTrack,\r\n\r\n\tTimeBufferType: Float32Array,\r\n\tValueBufferType: Float32Array,\r\n\r\n\tDefaultInterpolation: THREE.InterpolateLinear,\r\n\r\n\tInterpolantFactoryMethodDiscrete: function( result ) {\r\n\r\n\t\treturn new THREE.DiscreteInterpolant(\r\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\r\n\t},\r\n\r\n\tInterpolantFactoryMethodLinear: function( result ) {\r\n\r\n\t\treturn new THREE.LinearInterpolant(\r\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\r\n\t},\r\n\r\n\tInterpolantFactoryMethodSmooth: function( result ) {\r\n\r\n\t\treturn new THREE.CubicInterpolant(\r\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\r\n\t},\r\n\r\n\tsetInterpolation: function( interpolation ) {\r\n\r\n\t\tvar factoryMethod;\r\n\r\n\t\tswitch ( interpolation ) {\r\n\r\n\t\t\tcase THREE.InterpolateDiscrete:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.InterpolateLinear:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.InterpolateSmooth:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tif ( factoryMethod === undefined ) {\r\n\r\n\t\t\tvar message = \"unsupported interpolation for \" +\r\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\r\n\r\n\t\t\tif ( this.createInterpolant === undefined ) {\r\n\r\n\t\t\t\t// fall back to default, unless the default itself is messed up\r\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\r\n\r\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconsole.warn( message );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.createInterpolant = factoryMethod;\r\n\r\n\t},\r\n\r\n\tgetInterpolation: function() {\r\n\r\n\t\tswitch ( this.createInterpolant ) {\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\r\n\r\n\t\t\t\treturn THREE.InterpolateDiscrete;\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodLinear:\r\n\r\n\t\t\t\treturn THREE.InterpolateLinear;\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\r\n\r\n\t\t\t\treturn THREE.InterpolateSmooth;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetValueSize: function() {\r\n\r\n\t\treturn this.values.length / this.times.length;\r\n\r\n\t},\r\n\r\n\t// move all keyframes either forwards or backwards in time\r\n\tshift: function( timeOffset ) {\r\n\r\n\t\tif( timeOffset !== 0.0 ) {\r\n\r\n\t\t\tvar times = this.times;\r\n\r\n\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttimes[ i ] += timeOffset;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\r\n\tscale: function( timeScale ) {\r\n\r\n\t\tif( timeScale !== 1.0 ) {\r\n\r\n\t\t\tvar times = this.times;\r\n\r\n\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttimes[ i ] *= timeScale;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\r\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\r\n\ttrim: function( startTime, endTime ) {\r\n\r\n\t\tvar times = this.times,\r\n\t\t\tnKeys = times.length,\r\n\t\t\tfrom = 0,\r\n\t\t\tto = nKeys - 1;\r\n\r\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\r\n\t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\r\n\r\n\t\t++ to; // inclusive -> exclusive bound\r\n\r\n\t\tif( from !== 0 || to !== nKeys ) {\r\n\r\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\r\n\t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\r\n\r\n\t\t\tvar stride = this.getValueSize();\r\n\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, from, to );\r\n\t\t\tthis.values = THREE.AnimationUtils.\r\n\t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\r\n\tvalidate: function() {\r\n\r\n\t\tvar valid = true;\r\n\r\n\t\tvar valueSize = this.getValueSize();\r\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\r\n\r\n\t\t\tconsole.error( \"invalid value size in track\", this );\r\n\t\t\tvalid = false;\r\n\r\n\t\t}\r\n\r\n\t\tvar times = this.times,\r\n\t\t\tvalues = this.values,\r\n\r\n\t\t\tnKeys = times.length;\r\n\r\n\t\tif( nKeys === 0 ) {\r\n\r\n\t\t\tconsole.error( \"track is empty\", this );\r\n\t\t\tvalid = false;\r\n\r\n\t\t}\r\n\r\n\t\tvar prevTime = null;\r\n\r\n\t\tfor( var i = 0; i !== nKeys; i ++ ) {\r\n\r\n\t\t\tvar currTime = times[ i ];\r\n\r\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\r\n\r\n\t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\r\n\t\t\t\tvalid = false;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif( prevTime !== null && prevTime > currTime ) {\r\n\r\n\t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\r\n\t\t\t\tvalid = false;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprevTime = currTime;\r\n\r\n\t\t}\r\n\r\n\t\tif ( values !== undefined ) {\r\n\r\n\t\t\tif ( THREE.AnimationUtils.isTypedArray( values ) ) {\r\n\r\n\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar value = values[ i ];\r\n\r\n\t\t\t\t\tif ( isNaN( value ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\r\n\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn valid;\r\n\r\n\t},\r\n\r\n\t// removes equivalent sequential keys as common in morph target sequences\r\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\r\n\toptimize: function() {\r\n\r\n\t\tvar times = this.times,\r\n\t\t\tvalues = this.values,\r\n\t\t\tstride = this.getValueSize(),\r\n\r\n\t\t\twriteIndex = 1;\r\n\r\n\t\tfor( var i = 1, n = times.length - 1; i <= n; ++ i ) {\r\n\r\n\t\t\tvar keep = false;\r\n\r\n\t\t\tvar time = times[ i ];\r\n\t\t\tvar timeNext = times[ i + 1 ];\r\n\r\n\t\t\t// remove adjacent keyframes scheduled at the same time\r\n\r\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\r\n\r\n\t\t\t\t// remove unnecessary keyframes same as their neighbors\r\n\t\t\t\tvar offset = i * stride,\r\n\t\t\t\t\toffsetP = offset - stride,\r\n\t\t\t\t\toffsetN = offset + stride;\r\n\r\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\tvar value = values[ offset + j ];\r\n\r\n\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\r\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\r\n\r\n\t\t\t\t\t\tkeep = true;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// in-place compaction\r\n\r\n\t\t\tif ( keep ) {\r\n\r\n\t\t\t\tif ( i !== writeIndex ) {\r\n\r\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\r\n\r\n\t\t\t\t\tvar readOffset = i * stride,\r\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\r\n\r\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t++ writeIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( writeIndex !== times.length ) {\r\n\r\n\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, 0, writeIndex );\r\n\t\t\tthis.values = THREE.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Static methods:\r\n\r\nObject.assign( THREE.KeyframeTrack, {\r\n\r\n\t// Serialization (in static context, because of constructor invocation\r\n\t// and automatic invocation of .toJSON):\r\n\r\n\tparse: function( json ) {\r\n\r\n\t\tif( json.type === undefined ) {\r\n\r\n\t\t\tthrow new Error( \"track type undefined, can not parse\" );\r\n\r\n\t\t}\r\n\r\n\t\tvar trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName( json.type );\r\n\r\n\t\tif ( json.times === undefined ) {\r\n\r\n\t\t\tvar times = [], values = [];\r\n\r\n\t\t\tTHREE.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\r\n\r\n\t\t\tjson.times = times;\r\n\t\t\tjson.values = values;\r\n\r\n\t\t}\r\n\r\n\t\t// derived classes can define a static parse method\r\n\t\tif ( trackType.parse !== undefined ) {\r\n\r\n\t\t\treturn trackType.parse( json );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// by default, we asssume a constructor compatible with the base\r\n\t\t\treturn new trackType(\r\n\t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoJSON: function( track ) {\r\n\r\n\t\tvar trackType = track.constructor;\r\n\r\n\t\tvar json;\r\n\r\n\t\t// derived classes can define a static toJSON method\r\n\t\tif ( trackType.toJSON !== undefined ) {\r\n\r\n\t\t\tjson = trackType.toJSON( track );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// by default, we assume the data can be serialized as-is\r\n\t\t\tjson = {\r\n\r\n\t\t\t\t'name': track.name,\r\n\t\t\t\t'times': THREE.AnimationUtils.convertArray( track.times, Array ),\r\n\t\t\t\t'values': THREE.AnimationUtils.convertArray( track.values, Array )\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar interpolation = track.getInterpolation();\r\n\r\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\r\n\r\n\t\t\t\tjson.interpolation = interpolation;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tjson.type = track.ValueTypeName; // mandatory\r\n\r\n\t\treturn json;\r\n\r\n\t},\r\n\r\n\t_getTrackTypeForValueTypeName: function( typeName ) {\r\n\r\n\t\tswitch( typeName.toLowerCase() ) {\r\n\r\n\t\t\tcase \"scalar\":\r\n\t\t\tcase \"double\":\r\n\t\t\tcase \"float\":\r\n\t\t\tcase \"number\":\r\n\t\t\tcase \"integer\":\r\n\r\n\t\t\t\treturn THREE.NumberKeyframeTrack;\r\n\r\n\t\t\tcase \"vector\":\r\n\t\t\tcase \"vector2\":\r\n\t\t\tcase \"vector3\":\r\n\t\t\tcase \"vector4\":\r\n\r\n\t\t\t\treturn THREE.VectorKeyframeTrack;\r\n\r\n\t\t\tcase \"color\":\r\n\r\n\t\t\t\treturn THREE.ColorKeyframeTrack;\r\n\r\n\t\t\tcase \"quaternion\":\r\n\r\n\t\t\t\treturn THREE.QuaternionKeyframeTrack;\r\n\r\n\t\t\tcase \"bool\":\r\n\t\t\tcase \"boolean\":\r\n\r\n\t\t\t\treturn THREE.BooleanKeyframeTrack;\r\n\r\n\t\t\tcase \"string\":\r\n\r\n\t\t\t\treturn THREE.StringKeyframeTrack;\r\n\r\n\t\t}\r\n\r\n\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/animation/PropertyBinding.js\r\n\r\n/**\r\n *\r\n * A reference to a real property in the scene graph.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.PropertyBinding = function ( rootNode, path, parsedPath ) {\r\n\r\n\tthis.path = path;\r\n\tthis.parsedPath = parsedPath ||\r\n\t\t\tTHREE.PropertyBinding.parseTrackName( path );\r\n\r\n\tthis.node = THREE.PropertyBinding.findNode(\r\n\t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\r\n\r\n\tthis.rootNode = rootNode;\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.prototype = {\r\n\r\n\tconstructor: THREE.PropertyBinding,\r\n\r\n\tgetValue: function getValue_unbound( targetArray, offset ) {\r\n\r\n\t\tthis.bind();\r\n\t\tthis.getValue( targetArray, offset );\r\n\r\n\t\t// Note: This class uses a State pattern on a per-method basis:\r\n\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\r\n\t\t// prototype version of these methods with one that represents\r\n\t\t// the bound state. When the property is not found, the methods\r\n\t\t// become no-ops.\r\n\r\n\t},\r\n\r\n\tsetValue: function getValue_unbound( sourceArray, offset ) {\r\n\r\n\t\tthis.bind();\r\n\t\tthis.setValue( sourceArray, offset );\r\n\r\n\t},\r\n\r\n\t// create getter / setter pair for a property in the scene graph\r\n\tbind: function() {\r\n\r\n\t\tvar targetObject = this.node,\r\n\t\t\tparsedPath = this.parsedPath,\r\n\r\n\t\t\tobjectName = parsedPath.objectName,\r\n\t\t\tpropertyName = parsedPath.propertyName,\r\n\t\t\tpropertyIndex = parsedPath.propertyIndex;\r\n\r\n\t\tif ( ! targetObject ) {\r\n\r\n\t\t\ttargetObject = THREE.PropertyBinding.findNode(\r\n\t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\r\n\r\n\t\t\tthis.node = targetObject;\r\n\r\n\t\t}\r\n\r\n\t\t// set fail state so we can just 'return' on error\r\n\t\tthis.getValue = this._getValue_unavailable;\r\n\t\tthis.setValue = this._setValue_unavailable;\r\n\r\n \t\t// ensure there is a value node\r\n\t\tif ( ! targetObject ) {\r\n\r\n\t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif( objectName ) {\r\n\r\n\t\t\tvar objectIndex = parsedPath.objectIndex;\r\n\r\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\r\n\t\t\tswitch ( objectName ) {\r\n\r\n\t\t\t\tcase 'materials':\r\n\r\n\t\t\t\t\tif( ! targetObject.material ) {\r\n\r\n\t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif( ! targetObject.material.materials ) {\r\n\r\n\t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttargetObject = targetObject.material.materials;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'bones':\r\n\r\n\t\t\t\t\tif( ! targetObject.skeleton ) {\r\n\r\n\t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\r\n\t\t\t\t\t// and convert the integer string to a true integer.\r\n\r\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\r\n\r\n\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tif ( targetObject[i].name === objectIndex ) {\r\n\r\n\t\t\t\t\t\t\tobjectIndex = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( objectIndex !== undefined ) {\r\n\r\n\t\t\t\tif( targetObject[ objectIndex ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// resolve property\r\n\t\tvar nodeProperty = targetObject[ propertyName ];\r\n\r\n\t\tif ( ! nodeProperty ) {\r\n\r\n\t\t\tvar nodeName = parsedPath.nodeName;\r\n\r\n\t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\r\n\t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// determine versioning scheme\r\n\t\tvar versioning = this.Versioning.None;\r\n\r\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\r\n\r\n\t\t\tversioning = this.Versioning.NeedsUpdate;\r\n\t\t\tthis.targetObject = targetObject;\r\n\r\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\r\n\r\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\r\n\t\t\tthis.targetObject = targetObject;\r\n\r\n\t\t}\r\n\r\n\t\t// determine how the property gets bound\r\n\t\tvar bindingType = this.BindingType.Direct;\r\n\r\n\t\tif ( propertyIndex !== undefined ) {\r\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\r\n\r\n\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\r\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\r\n\r\n\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\tif ( ! targetObject.geometry ) {\r\n\r\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\r\n\r\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\r\n\r\n\t\t\t\t\tif ( targetObject.geometry.morphTargets[i].name === propertyIndex ) {\r\n\r\n\t\t\t\t\t\tpropertyIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbindingType = this.BindingType.ArrayElement;\r\n\r\n\t\t\tthis.resolvedProperty = nodeProperty;\r\n\t\t\tthis.propertyIndex = propertyIndex;\r\n\r\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\r\n\t\t\t// must use copy for Object3D.Euler/Quaternion\r\n\r\n\t\t\tbindingType = this.BindingType.HasFromToArray;\r\n\r\n\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t} else if ( nodeProperty.length !== undefined ) {\r\n\r\n\t\t\tbindingType = this.BindingType.EntireArray;\r\n\r\n\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.propertyName = propertyName;\r\n\r\n\t\t}\r\n\r\n\t\t// select getter / setter\r\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\r\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\r\n\r\n\t},\r\n\r\n\tunbind: function() {\r\n\r\n\t\tthis.node = null;\r\n\r\n\t\t// back to the prototype version of getValue / setValue\r\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\r\n\t\tthis.getValue = this._getValue_unbound;\r\n\t\tthis.setValue = this._setValue_unbound;\r\n\r\n\t}\r\n\r\n};\r\n\r\nObject.assign( THREE.PropertyBinding.prototype, { // prototype, continued\r\n\r\n\t// these are used to \"bind\" a nonexistent property\r\n\t_getValue_unavailable: function() {},\r\n\t_setValue_unavailable: function() {},\r\n\r\n\t// initial state of these methods that calls 'bind'\r\n\t_getValue_unbound: THREE.PropertyBinding.prototype.getValue,\r\n\t_setValue_unbound: THREE.PropertyBinding.prototype.setValue,\r\n\r\n\tBindingType: {\r\n\t\tDirect: 0,\r\n\t\tEntireArray: 1,\r\n\t\tArrayElement: 2,\r\n\t\tHasFromToArray: 3\r\n\t},\r\n\r\n\tVersioning: {\r\n\t\tNone: 0,\r\n\t\tNeedsUpdate: 1,\r\n\t\tMatrixWorldNeedsUpdate: 2\r\n\t},\r\n\r\n\tGetterByBindingType: [\r\n\r\n\t\tfunction getValue_direct( buffer, offset ) {\r\n\r\n\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\r\n\r\n\t\t},\r\n\r\n\t\tfunction getValue_array( buffer, offset ) {\r\n\r\n\t\t\tvar source = this.resolvedProperty;\r\n\r\n\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ offset ++ ] = source[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tfunction getValue_arrayElement( buffer, offset ) {\r\n\r\n\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\r\n\r\n\t\t},\r\n\r\n\t\tfunction getValue_toArray( buffer, offset ) {\r\n\r\n\t\t\tthis.resolvedProperty.toArray( buffer, offset );\r\n\r\n\t\t}\r\n\r\n\t],\r\n\r\n\tSetterByBindingTypeAndVersioning: [\r\n\r\n\t\t[\r\n\t\t\t// Direct\r\n\r\n\t\t\tfunction setValue_direct( buffer, offset ) {\r\n\r\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t], [\r\n\r\n\t\t\t// EntireArray\r\n\r\n\t\t\tfunction setValue_array( buffer, offset ) {\r\n\r\n\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t], [\r\n\r\n\t\t\t// ArrayElement\r\n\r\n\t\t\tfunction setValue_arrayElement( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t], [\r\n\r\n\t\t\t// HasToFromArray\r\n\r\n\t\t\tfunction setValue_fromArray( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t]\r\n\r\n\t]\r\n\r\n} );\r\n\r\nTHREE.PropertyBinding.Composite =\r\n\t\tfunction( targetGroup, path, optionalParsedPath ) {\r\n\r\n\tvar parsedPath = optionalParsedPath ||\r\n\t\t\tTHREE.PropertyBinding.parseTrackName( path );\r\n\r\n\tthis._targetGroup = targetGroup;\r\n\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.Composite.prototype = {\r\n\r\n\tconstructor: THREE.PropertyBinding.Composite,\r\n\r\n\tgetValue: function( array, offset ) {\r\n\r\n\t\tthis.bind(); // bind all binding\r\n\r\n\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\r\n\t\t\tbinding = this._bindings[ firstValidIndex ];\r\n\r\n\t\t// and only call .getValue on the first\r\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\r\n\r\n\t},\r\n\r\n\tsetValue: function( array, offset ) {\r\n\r\n\t\tvar bindings = this._bindings;\r\n\r\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].setValue( array, offset );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tbind: function() {\r\n\r\n\t\tvar bindings = this._bindings;\r\n\r\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].bind();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tunbind: function() {\r\n\r\n\t\tvar bindings = this._bindings;\r\n\r\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].unbind();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.create = function( root, path, parsedPath ) {\r\n\r\n\tif ( ! ( root instanceof THREE.AnimationObjectGroup ) ) {\r\n\r\n\t\treturn new THREE.PropertyBinding( root, path, parsedPath );\r\n\r\n\t} else {\r\n\r\n\t\treturn new THREE.PropertyBinding.Composite( root, path, parsedPath );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.parseTrackName = function( trackName ) {\r\n\r\n\t// matches strings in the form of:\r\n\t//    nodeName.property\r\n\t//    nodeName.property[accessor]\r\n\t//    nodeName.material.property[accessor]\r\n\t//    uuid.property[accessor]\r\n\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\r\n\t//    parentName/nodeName.property\r\n\t//    parentName/parentName/nodeName.property[index]\r\n\t//\t  .bone[Armature.DEF_cog].position\r\n\t// created and tested via https://regex101.com/#javascript\r\n\r\n\tvar re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_.:\\- ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\r\n\tvar matches = re.exec(trackName);\r\n\r\n\tif( ! matches ) {\r\n\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\r\n\t}\r\n\r\n    if (matches.index === re.lastIndex) {\r\n        re.lastIndex++;\r\n    }\r\n\r\n\tvar results = {\r\n\t\t// directoryName: matches[1], // (tschw) currently unused\r\n\t\tnodeName: matches[3], \t// allowed to be null, specified root node.\r\n\t\tobjectName: matches[5],\r\n\t\tobjectIndex: matches[7],\r\n\t\tpropertyName: matches[9],\r\n\t\tpropertyIndex: matches[11]\t// allowed to be null, specifies that the whole property is set.\r\n\t};\r\n\r\n\tif( results.propertyName === null || results.propertyName.length === 0 ) {\r\n\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\r\n\t}\r\n\r\n\treturn results;\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.findNode = function( root, nodeName ) {\r\n\r\n\tif( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\r\n\r\n\t\treturn root;\r\n\r\n\t}\r\n\r\n\t// search into skeleton bones.\r\n\tif( root.skeleton ) {\r\n\r\n\t\tvar searchSkeleton = function( skeleton ) {\r\n\r\n\t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\r\n\r\n\t\t\t\tvar bone = skeleton.bones[i];\r\n\r\n\t\t\t\tif( bone.name === nodeName ) {\r\n\r\n\t\t\t\t\treturn bone;\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t};\r\n\r\n\t\tvar bone = searchSkeleton( root.skeleton );\r\n\r\n\t\tif( bone ) {\r\n\r\n\t\t\treturn bone;\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t// search into node subtree.\r\n\tif( root.children ) {\r\n\r\n\t\tvar searchNodeSubtree = function( children ) {\r\n\r\n\t\t\tfor( var i = 0; i < children.length; i ++ ) {\r\n\r\n\t\t\t\tvar childNode = children[i];\r\n\r\n\t\t\t\tif( childNode.name === nodeName || childNode.uuid === nodeName ) {\r\n\r\n\t\t\t\t\treturn childNode;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar result = searchNodeSubtree( childNode.children );\r\n\r\n\t\t\t\tif( result ) return result;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t};\r\n\r\n\t\tvar subTreeNode = searchNodeSubtree( root.children );\r\n\r\n\t\tif( subTreeNode ) {\r\n\r\n\t\t\treturn subTreeNode;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n};\r\n\r\n// File:src/animation/PropertyMixer.js\r\n\r\n/**\r\n *\r\n * Buffered scene graph property that allows weighted accumulation.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.PropertyMixer = function ( binding, typeName, valueSize ) {\r\n\r\n\tthis.binding = binding;\r\n\tthis.valueSize = valueSize;\r\n\r\n\tvar bufferType = Float64Array,\r\n\t\tmixFunction;\r\n\r\n\tswitch ( typeName ) {\r\n\r\n\t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\r\n\r\n\t\tcase 'string':\r\n\t\tcase 'bool':\r\n\r\n\t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\r\n\r\n\t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\r\n\r\n\t}\r\n\r\n\tthis.buffer = new bufferType( valueSize * 4 );\r\n\t// layout: [ incoming | accu0 | accu1 | orig ]\r\n\t//\r\n\t// interpolators can use .buffer as their .result\r\n\t// the data then goes to 'incoming'\r\n\t//\r\n\t// 'accu0' and 'accu1' are used frame-interleaved for\r\n\t// the cumulative result and are compared to detect\r\n\t// changes\r\n\t//\r\n\t// 'orig' stores the original state of the property\r\n\r\n\tthis._mixBufferRegion = mixFunction;\r\n\r\n\tthis.cumulativeWeight = 0;\r\n\r\n\tthis.useCount = 0;\r\n\tthis.referenceCount = 0;\r\n\r\n};\r\n\r\nTHREE.PropertyMixer.prototype = {\r\n\r\n\tconstructor: THREE.PropertyMixer,\r\n\r\n\t// accumulate data in the 'incoming' region into 'accu<i>'\r\n\taccumulate: function( accuIndex, weight ) {\r\n\r\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\r\n\t\t// the weight and shouldn't have made the call in the first place\r\n\r\n\t\tvar buffer = this.buffer,\r\n\t\t\tstride = this.valueSize,\r\n\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\tcurrentWeight = this.cumulativeWeight;\r\n\r\n\t\tif ( currentWeight === 0 ) {\r\n\r\n\t\t\t// accuN := incoming * weight\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentWeight = weight;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// accuN := accuN + incoming * weight\r\n\r\n\t\t\tcurrentWeight += weight;\r\n\t\t\tvar mix = weight / currentWeight;\r\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\r\n\r\n\t\t}\r\n\r\n\t\tthis.cumulativeWeight = currentWeight;\r\n\r\n\t},\r\n\r\n\t// apply the state of 'accu<i>' to the binding when accus differ\r\n\tapply: function( accuIndex ) {\r\n\r\n\t\tvar stride = this.valueSize,\r\n\t\t\tbuffer = this.buffer,\r\n\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\tweight = this.cumulativeWeight,\r\n\r\n\t\t\tbinding = this.binding;\r\n\r\n\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\tif ( weight < 1 ) {\r\n\r\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\r\n\r\n\t\t\tvar originalValueOffset = stride * 3;\r\n\r\n\t\t\tthis._mixBufferRegion(\r\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\r\n\r\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\r\n\r\n\t\t\t\t// value has changed -> update scene graph\r\n\r\n\t\t\t\tbinding.setValue( buffer, offset );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// remember the state of the bound property and copy it to both accus\r\n\tsaveOriginalState: function() {\r\n\r\n\t\tvar binding = this.binding;\r\n\r\n\t\tvar buffer = this.buffer,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\toriginalValueOffset = stride * 3;\r\n\r\n\t\tbinding.getValue( buffer, originalValueOffset );\r\n\r\n\t\t// accu[0..1] := orig -- initially detect changes against the original\r\n\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\r\n\r\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\r\n\r\n\t\t}\r\n\r\n\t\tthis.cumulativeWeight = 0;\r\n\r\n\t},\r\n\r\n\t// apply the state previously taken via 'saveOriginalState' to the binding\r\n\trestoreOriginalState: function() {\r\n\r\n\t\tvar originalValueOffset = this.valueSize * 3;\r\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\r\n\r\n\t},\r\n\r\n\r\n\t// mix functions\r\n\r\n\t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\tif ( t >= 0.5 ) {\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\tTHREE.Quaternion.slerpFlat( buffer, dstOffset,\r\n\t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\r\n\r\n\t},\r\n\r\n\t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\tvar s = 1 - t;\r\n\r\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tvar j = dstOffset + i;\r\n\r\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/animation/tracks/BooleanKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track of Boolean keyframe values.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.BooleanKeyframeTrack = function ( name, times, values ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values );\r\n\r\n};\r\n\r\nTHREE.BooleanKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.BooleanKeyframeTrack,\r\n\r\n\tValueTypeName: 'bool',\r\n\tValueBufferType: Array,\r\n\r\n\tDefaultInterpolation: THREE.InterpolateDiscrete,\r\n\r\n\tInterpolantFactoryMethodLinear: undefined,\r\n\tInterpolantFactoryMethodSmooth: undefined\r\n\r\n\t// Note: Actually this track could have a optimized / compressed\r\n\t// representation of a single value and a custom interpolant that\r\n\t// computes \"firstValue ^ isOdd( index )\".\r\n\r\n} );\r\n\r\n// File:src/animation/tracks/ColorKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track of keyframe values that represent color.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.ColorKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n};\r\n\r\nTHREE.ColorKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.ColorKeyframeTrack,\r\n\r\n\tValueTypeName: 'color'\r\n\r\n\t// ValueBufferType is inherited\r\n\r\n\t// DefaultInterpolation is inherited\r\n\r\n\r\n\t// Note: Very basic implementation and nothing special yet.\r\n\t// However, this is the place for color space parameterization.\r\n\r\n} );\r\n\r\n// File:src/animation/tracks/NumberKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track of numeric keyframe values.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.NumberKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n};\r\n\r\nTHREE.NumberKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.NumberKeyframeTrack,\r\n\r\n\tValueTypeName: 'number',\r\n\r\n\t// ValueBufferType is inherited\r\n\r\n\t// DefaultInterpolation is inherited\r\n\r\n} );\r\n\r\n// File:src/animation/tracks/QuaternionKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track of quaternion keyframe values.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.QuaternionKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n};\r\n\r\nTHREE.QuaternionKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.QuaternionKeyframeTrack,\r\n\r\n\tValueTypeName: 'quaternion',\r\n\r\n\t// ValueBufferType is inherited\r\n\r\n\tDefaultInterpolation: THREE.InterpolateLinear,\r\n\r\n\tInterpolantFactoryMethodLinear: function( result ) {\r\n\r\n\t\treturn new THREE.QuaternionLinearInterpolant(\r\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\r\n\t},\r\n\r\n\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\r\n\r\n} );\r\n\r\n// File:src/animation/tracks/StringKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track that interpolates Strings\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.StringKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n};\r\n\r\nTHREE.StringKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.StringKeyframeTrack,\r\n\r\n\tValueTypeName: 'string',\r\n\tValueBufferType: Array,\r\n\r\n\tDefaultInterpolation: THREE.InterpolateDiscrete,\r\n\r\n\tInterpolantFactoryMethodLinear: undefined,\r\n\r\n\tInterpolantFactoryMethodSmooth: undefined\r\n\r\n} );\r\n\r\n// File:src/animation/tracks/VectorKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track of vectored keyframe values.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.VectorKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n};\r\n\r\nTHREE.VectorKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.VectorKeyframeTrack,\r\n\r\n\tValueTypeName: 'vector'\r\n\r\n\t// ValueBufferType is inherited\r\n\r\n\t// DefaultInterpolation is inherited\r\n\r\n} );\r\n\r\n// File:src/audio/Audio.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\r\n */\r\n\r\nTHREE.Audio = function ( listener ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Audio';\r\n\r\n\tthis.context = listener.context;\r\n\tthis.source = this.context.createBufferSource();\r\n\tthis.source.onended = this.onEnded.bind( this );\r\n\r\n\tthis.gain = this.context.createGain();\r\n\tthis.gain.connect( listener.getInput() );\r\n\r\n\tthis.autoplay = false;\r\n\r\n\tthis.startTime = 0;\r\n\tthis.playbackRate = 1;\r\n\tthis.isPlaying = false;\r\n\tthis.hasPlaybackControl = true;\r\n\tthis.sourceType = 'empty';\r\n\r\n\tthis.filters = [];\r\n\r\n};\r\n\r\nTHREE.Audio.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Audio,\r\n\r\n\tgetOutput: function () {\r\n\r\n\t\treturn this.gain;\r\n\r\n\t},\r\n\r\n\tsetNodeSource: function ( audioNode ) {\r\n\r\n\t\tthis.hasPlaybackControl = false;\r\n\t\tthis.sourceType = 'audioNode';\r\n\t\tthis.source = audioNode;\r\n\t\tthis.connect();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetBuffer: function ( audioBuffer ) {\r\n\r\n\t\tthis.source.buffer = audioBuffer;\r\n\t\tthis.sourceType = 'buffer';\r\n\r\n\t\tif ( this.autoplay ) this.play();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tplay: function () {\r\n\r\n\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar source = this.context.createBufferSource();\r\n\r\n\t\tsource.buffer = this.source.buffer;\r\n\t\tsource.loop = this.source.loop;\r\n\t\tsource.onended = this.source.onended;\r\n\t\tsource.start( 0, this.startTime );\r\n\t\tsource.playbackRate.value = this.playbackRate;\r\n\r\n\t\tthis.isPlaying = true;\r\n\r\n\t\tthis.source = source;\r\n\r\n\t\treturn this.connect();\r\n\r\n\t},\r\n\r\n\tpause: function () {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.source.stop();\r\n\t\tthis.startTime = this.context.currentTime;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tstop: function () {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.source.stop();\r\n\t\tthis.startTime = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconnect: function () {\r\n\r\n\t\tif ( this.filters.length > 0 ) {\r\n\r\n\t\t\tthis.source.connect( this.filters[ 0 ] );\r\n\r\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.source.connect( this.getOutput() );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdisconnect: function () {\r\n\r\n\t\tif ( this.filters.length > 0 ) {\r\n\r\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\r\n\r\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.source.disconnect( this.getOutput() );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetFilters: function () {\r\n\r\n\t\treturn this.filters;\r\n\r\n\t},\r\n\r\n\tsetFilters: function ( value ) {\r\n\r\n\t\tif ( ! value ) value = [];\r\n\r\n\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\tthis.disconnect();\r\n\t\t\tthis.filters = value;\r\n\t\t\tthis.connect();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.filters = value;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetFilter: function () {\r\n\r\n\t\treturn this.getFilters()[ 0 ];\r\n\r\n\t},\r\n\r\n\tsetFilter: function ( filter ) {\r\n\r\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\r\n\r\n\t},\r\n\r\n\tsetPlaybackRate: function ( value ) {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.playbackRate = value;\r\n\r\n\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\tthis.source.playbackRate.value = this.playbackRate;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetPlaybackRate: function () {\r\n\r\n\t\treturn this.playbackRate;\r\n\r\n\t},\r\n\r\n\tonEnded: function () {\r\n\r\n\t\tthis.isPlaying = false;\r\n\r\n\t},\r\n\r\n\tgetLoop: function () {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.source.loop;\r\n\r\n\t},\r\n\r\n\tsetLoop: function ( value ) {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.source.loop = value;\r\n\r\n\t},\r\n\r\n\tgetVolume: function () {\r\n\r\n\t\treturn this.gain.gain.value;\r\n\r\n\t},\r\n\r\n\r\n\tsetVolume: function ( value ) {\r\n\r\n\t\tthis.gain.gain.value = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/audio/AudioAnalyser.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AudioAnalyser = function ( audio, fftSize ) {\r\n\r\n\tthis.analyser = audio.context.createAnalyser();\r\n\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\r\n\r\n\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\r\n\r\n\taudio.getOutput().connect( this.analyser );\r\n\r\n};\r\n\r\nObject.assign( THREE.AudioAnalyser.prototype, {\r\n\r\n\tgetFrequencyData: function () {\r\n\r\n\t\tthis.analyser.getByteFrequencyData( this.data );\r\n\r\n\t\treturn this.data;\r\n\r\n\t},\r\n\r\n\tgetAverageFrequency: function () {\r\n\r\n\t\tvar value = 0, data = this.getFrequencyData();\r\n\r\n\t\tfor ( var i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\tvalue += data[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn value / data.length;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/audio/AudioContext.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nObject.defineProperty( THREE, 'AudioContext', {\r\n\r\n\tget: ( function () {\r\n\r\n\t\tvar context;\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tif ( context === undefined ) {\r\n\r\n\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn context;\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n} );\r\n\r\n// File:src/audio/PositionalAudio.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.PositionalAudio = function ( listener ) {\r\n\r\n\tTHREE.Audio.call( this, listener );\r\n\r\n\tthis.panner = this.context.createPanner();\r\n\tthis.panner.connect( this.gain );\r\n\r\n};\r\n\r\nTHREE.PositionalAudio.prototype = Object.assign( Object.create( THREE.Audio.prototype ), {\r\n\r\n\tconstructor: THREE.PositionalAudio,\r\n\r\n\tgetOutput: function () {\r\n\r\n\t\treturn this.panner;\r\n\r\n\t},\r\n\r\n\tgetRefDistance: function () {\r\n\r\n\t\treturn this.panner.refDistance;\r\n\r\n\t},\r\n\r\n\tsetRefDistance: function ( value ) {\r\n\r\n\t\tthis.panner.refDistance = value;\r\n\r\n\t},\r\n\r\n\tgetRolloffFactor: function () {\r\n\r\n\t\treturn this.panner.rolloffFactor;\r\n\r\n\t},\r\n\r\n\tsetRolloffFactor: function ( value ) {\r\n\r\n\t\tthis.panner.rolloffFactor = value;\r\n\r\n\t},\r\n\r\n\tgetDistanceModel: function () {\r\n\r\n\t\treturn this.panner.distanceModel;\r\n\r\n\t},\r\n\r\n\tsetDistanceModel: function ( value ) {\r\n\r\n\t\tthis.panner.distanceModel = value;\r\n\r\n\t},\r\n\r\n\tgetMaxDistance: function () {\r\n\r\n\t\treturn this.panner.maxDistance;\r\n\r\n\t},\r\n\r\n\tsetMaxDistance: function ( value ) {\r\n\r\n\t\tthis.panner.maxDistance = value;\r\n\r\n\t},\r\n\r\n\tupdateMatrixWorld: ( function () {\r\n\r\n\t\tvar position = new THREE.Vector3();\r\n\r\n\t\treturn function updateMatrixWorld( force ) {\r\n\r\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n\r\n} );\r\n\r\n// File:src/audio/AudioListener.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AudioListener = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'AudioListener';\r\n\r\n\tthis.context = THREE.AudioContext;\r\n\r\n\tthis.gain = this.context.createGain();\r\n\tthis.gain.connect( this.context.destination );\r\n\r\n\tthis.filter = null;\r\n\r\n};\r\n\r\nTHREE.AudioListener.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.AudioListener,\r\n\r\n\tgetInput: function () {\r\n\r\n\t\treturn this.gain;\r\n\r\n\t},\r\n\r\n\tremoveFilter: function ( ) {\r\n\r\n\t\tif ( this.filter !== null ) {\r\n\r\n\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\tthis.filter.disconnect( this.context.destination );\r\n\t\t\tthis.gain.connect( this.context.destination );\r\n\t\t\tthis.filter = null;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetFilter: function () {\r\n\r\n\t\treturn this.filter;\r\n\r\n\t},\r\n\r\n\tsetFilter: function ( value ) {\r\n\r\n\t\tif ( this.filter !== null ) {\r\n\r\n\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\tthis.filter.disconnect( this.context.destination );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.gain.disconnect( this.context.destination );\r\n\r\n\t\t}\r\n\r\n\t\tthis.filter = value;\r\n\t\tthis.gain.connect( this.filter );\r\n\t\tthis.filter.connect( this.context.destination );\r\n\r\n\t},\r\n\r\n\tgetMasterVolume: function () {\r\n\r\n\t\treturn this.gain.gain.value;\r\n\r\n\t},\r\n\r\n\tsetMasterVolume: function ( value ) {\r\n\r\n\t\tthis.gain.gain.value = value;\r\n\r\n\t},\r\n\r\n\tupdateMatrixWorld: ( function () {\r\n\r\n\t\tvar position = new THREE.Vector3();\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\t\tvar scale = new THREE.Vector3();\r\n\r\n\t\tvar orientation = new THREE.Vector3();\r\n\r\n\t\treturn function updateMatrixWorld( force ) {\r\n\r\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tvar listener = this.context.listener;\r\n\t\t\tvar up = this.up;\r\n\r\n\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\r\n\r\n\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\r\n\r\n\t\t\tlistener.setPosition( position.x, position.y, position.z );\r\n\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n} );\r\n\r\n// File:src/cameras/Camera.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.Camera = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Camera';\r\n\r\n\tthis.matrixWorldInverse = new THREE.Matrix4();\r\n\tthis.projectionMatrix = new THREE.Matrix4();\r\n\r\n};\r\n\r\nTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Camera.prototype.constructor = THREE.Camera;\r\n\r\nTHREE.Camera.prototype.getWorldDirection = function () {\r\n\r\n\tvar quaternion = new THREE.Quaternion();\r\n\r\n\treturn function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tthis.getWorldQuaternion( quaternion );\r\n\r\n\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Camera.prototype.lookAt = function () {\r\n\r\n\t// This routine does not support cameras with rotated and/or translated parent(s)\r\n\r\n\tvar m1 = new THREE.Matrix4();\r\n\r\n\treturn function ( vector ) {\r\n\r\n\t\tm1.lookAt( this.position, vector, this.up );\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( m1 );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Camera.prototype.clone = function () {\r\n\r\n\treturn new this.constructor().copy( this );\r\n\r\n};\r\n\r\nTHREE.Camera.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\r\n\tthis.projectionMatrix.copy( source.projectionMatrix );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/cameras/CubeCamera.js\r\n\r\n/**\r\n * Camera for rendering cube maps\r\n *\t- renders scene into axis-aligned cube\r\n *\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.CubeCamera = function ( near, far, cubeResolution ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'CubeCamera';\r\n\r\n\tvar fov = 90, aspect = 1;\r\n\r\n\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPX.up.set( 0, - 1, 0 );\r\n\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\r\n\tthis.add( cameraPX );\r\n\r\n\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNX.up.set( 0, - 1, 0 );\r\n\tcameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );\r\n\tthis.add( cameraNX );\r\n\r\n\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPY.up.set( 0, 0, 1 );\r\n\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\r\n\tthis.add( cameraPY );\r\n\r\n\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNY.up.set( 0, 0, - 1 );\r\n\tcameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );\r\n\tthis.add( cameraNY );\r\n\r\n\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPZ.up.set( 0, - 1, 0 );\r\n\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\r\n\tthis.add( cameraPZ );\r\n\r\n\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNZ.up.set( 0, - 1, 0 );\r\n\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );\r\n\tthis.add( cameraNZ );\r\n\r\n\tvar options = { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter };\r\n\r\n\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\r\n\r\n\tthis.updateCubeMap = function ( renderer, scene ) {\r\n\r\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\r\n\r\n\t\tvar renderTarget = this.renderTarget;\r\n\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\r\n\r\n\t\trenderTarget.texture.generateMipmaps = false;\r\n\r\n\t\trenderTarget.activeCubeFace = 0;\r\n\t\trenderer.render( scene, cameraPX, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 1;\r\n\t\trenderer.render( scene, cameraNX, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 2;\r\n\t\trenderer.render( scene, cameraPY, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 3;\r\n\t\trenderer.render( scene, cameraNY, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 4;\r\n\t\trenderer.render( scene, cameraPZ, renderTarget );\r\n\r\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\r\n\r\n\t\trenderTarget.activeCubeFace = 5;\r\n\t\trenderer.render( scene, cameraNZ, renderTarget );\r\n\r\n\t\trenderer.setRenderTarget( null );\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.CubeCamera.prototype.constructor = THREE.CubeCamera;\r\n\r\n// File:src/cameras/OrthographicCamera.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.type = 'OrthographicCamera';\r\n\r\n\tthis.zoom = 1;\r\n\r\n\tthis.left = left;\r\n\tthis.right = right;\r\n\tthis.top = top;\r\n\tthis.bottom = bottom;\r\n\r\n\tthis.near = ( near !== undefined ) ? near : 0.1;\r\n\tthis.far = ( far !== undefined ) ? far : 2000;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\nTHREE.OrthographicCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\r\n\r\n\tconstructor: THREE.OrthographicCamera,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Camera.prototype.copy.call( this, source );\r\n\r\n\t\tthis.left = source.left;\r\n\t\tthis.right = source.right;\r\n\t\tthis.top = source.top;\r\n\t\tthis.bottom = source.bottom;\r\n\t\tthis.near = source.near;\r\n\t\tthis.far = source.far;\r\n\r\n\t\tthis.zoom = source.zoom;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tupdateProjectionMatrix: function () {\r\n\r\n\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\r\n\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\r\n\t\tvar cx = ( this.right + this.left ) / 2;\r\n\t\tvar cy = ( this.top + this.bottom ) / 2;\r\n\r\n\t\tthis.projectionMatrix.makeOrthographic( cx - dx, cx + dx, cy + dy, cy - dy, this.near, this.far );\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\tdata.object.zoom = this.zoom;\r\n\t\tdata.object.left = this.left;\r\n\t\tdata.object.right = this.right;\r\n\t\tdata.object.top = this.top;\r\n\t\tdata.object.bottom = this.bottom;\r\n\t\tdata.object.near = this.near;\r\n\t\tdata.object.far = this.far;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/cameras/PerspectiveCamera.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author greggman / http://games.greggman.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author tschw\r\n */\r\n\r\nTHREE.PerspectiveCamera = function( fov, aspect, near, far ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.type = 'PerspectiveCamera';\r\n\r\n\tthis.fov = fov !== undefined ? fov : 50;\r\n\tthis.zoom = 1;\r\n\r\n\tthis.near = near !== undefined ? near : 0.1;\r\n\tthis.far = far !== undefined ? far : 2000;\r\n\tthis.focus = 10;\r\n\r\n\tthis.aspect = aspect !== undefined ? aspect : 1;\r\n\tthis.view = null;\r\n\r\n\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\r\n\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\nTHREE.PerspectiveCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\r\n\r\n\tconstructor: THREE.PerspectiveCamera,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Camera.prototype.copy.call( this, source );\r\n\r\n\t\tthis.fov = source.fov;\r\n\t\tthis.zoom = source.zoom;\r\n\r\n\t\tthis.near = source.near;\r\n\t\tthis.far = source.far;\r\n\t\tthis.focus = source.focus;\r\n\r\n\t\tthis.aspect = source.aspect;\r\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\tthis.filmGauge = source.filmGauge;\r\n\t\tthis.filmOffset = source.filmOffset;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\r\n\t *\r\n\t * The default film gauge is 35, so that the focal length can be specified for\r\n\t * a 35mm (full frame) camera.\r\n\t *\r\n\t * Values for focal length and film gauge must have the same unit.\r\n\t */\r\n\tsetFocalLength: function ( focalLength ) {\r\n\r\n\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\r\n\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\r\n\r\n\t\tthis.fov = THREE.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * Calculates the focal length from the current .fov and .filmGauge.\r\n\t */\r\n\tgetFocalLength: function () {\r\n\r\n\t\tvar vExtentSlope = Math.tan( THREE.Math.DEG2RAD * 0.5 * this.fov );\r\n\r\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\r\n\r\n\t},\r\n\r\n\tgetEffectiveFOV: function () {\r\n\r\n\t\treturn THREE.Math.RAD2DEG * 2 * Math.atan(\r\n\t\t\t\tMath.tan( THREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\r\n\r\n\t},\r\n\r\n\tgetFilmWidth: function () {\r\n\r\n\t\t// film not completely covered in portrait format (aspect < 1)\r\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\r\n\r\n\t},\r\n\r\n\tgetFilmHeight: function () {\r\n\r\n\t\t// film not completely covered in landscape format (aspect > 1)\r\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\r\n\t * multi-monitor/multi-machine setups.\r\n\t *\r\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n\t * the monitors are in grid like this\r\n\t *\r\n\t *   +---+---+---+\r\n\t *   | A | B | C |\r\n\t *   +---+---+---+\r\n\t *   | D | E | F |\r\n\t *   +---+---+---+\r\n\t *\r\n\t * then for each monitor you would call it like this\r\n\t *\r\n\t *   var w = 1920;\r\n\t *   var h = 1080;\r\n\t *   var fullWidth = w * 3;\r\n\t *   var fullHeight = h * 2;\r\n\t *\r\n\t *   --A--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n\t *   --B--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n\t *   --C--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n\t *   --D--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n\t *   --E--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n\t *   --F--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n\t *\r\n\t *   Note there is no reason monitors have to be the same size or in a grid.\r\n\t */\r\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\tthis.aspect = fullWidth / fullHeight;\r\n\r\n\t\tthis.view = {\r\n\t\t\tfullWidth: fullWidth,\r\n\t\t\tfullHeight: fullHeight,\r\n\t\t\toffsetX: x,\r\n\t\t\toffsetY: y,\r\n\t\t\twidth: width,\r\n\t\t\theight: height\r\n\t\t};\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t},\r\n\r\n\tclearViewOffset: function() {\r\n\r\n\t\tthis.view = null;\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t},\r\n\r\n\tupdateProjectionMatrix: function () {\r\n\r\n\t\tvar near = this.near,\r\n\t\t\ttop = near * Math.tan(\r\n\t\t\t\t\tTHREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\r\n\t\t\theight = 2 * top,\r\n\t\t\twidth = this.aspect * height,\r\n\t\t\tleft = - 0.5 * width,\r\n\t\t\tview = this.view;\r\n\r\n\t\tif ( view !== null ) {\r\n\r\n\t\t\tvar fullWidth = view.fullWidth,\r\n\t\t\t\tfullHeight = view.fullHeight;\r\n\r\n\t\t\tleft += view.offsetX * width / fullWidth;\r\n\t\t\ttop -= view.offsetY * height / fullHeight;\r\n\t\t\twidth *= view.width / fullWidth;\r\n\t\t\theight *= view.height / fullHeight;\r\n\r\n\t\t}\r\n\r\n\t\tvar skew = this.filmOffset;\r\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\r\n\r\n\t\tthis.projectionMatrix.makeFrustum(\r\n\t\t\t\tleft, left + width, top - height, top, near, this.far );\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\tdata.object.fov = this.fov;\r\n\t\tdata.object.zoom = this.zoom;\r\n\r\n\t\tdata.object.near = this.near;\r\n\t\tdata.object.far = this.far;\r\n\t\tdata.object.focus = this.focus;\r\n\r\n\t\tdata.object.aspect = this.aspect;\r\n\r\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\r\n\r\n\t\tdata.object.filmGauge = this.filmGauge;\r\n\t\tdata.object.filmOffset = this.filmOffset;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/cameras/StereoCamera.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.StereoCamera = function () {\r\n\r\n\tthis.type = 'StereoCamera';\r\n\r\n\tthis.aspect = 1;\r\n\r\n\tthis.cameraL = new THREE.PerspectiveCamera();\r\n\tthis.cameraL.layers.enable( 1 );\r\n\tthis.cameraL.matrixAutoUpdate = false;\r\n\r\n\tthis.cameraR = new THREE.PerspectiveCamera();\r\n\tthis.cameraR.layers.enable( 2 );\r\n\tthis.cameraR.matrixAutoUpdate = false;\r\n\r\n};\r\n\r\nObject.assign( THREE.StereoCamera.prototype, {\r\n\r\n\tupdate: ( function () {\r\n\r\n\t\tvar focus, fov, aspect, near, far;\r\n\r\n\t\tvar eyeRight = new THREE.Matrix4();\r\n\t\tvar eyeLeft = new THREE.Matrix4();\r\n\r\n\t\treturn function update ( camera ) {\r\n\r\n\t\t\tvar needsUpdate = focus !== camera.focus || fov !== camera.fov ||\r\n\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\r\n\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far;\r\n\r\n\t\t\tif ( needsUpdate ) {\r\n\r\n\t\t\t\tfocus = camera.focus;\r\n\t\t\t\tfov = camera.fov;\r\n\t\t\t\taspect = camera.aspect * this.aspect;\r\n\t\t\t\tnear = camera.near;\r\n\t\t\t\tfar = camera.far;\r\n\r\n\t\t\t\t// Off-axis stereoscopic effect based on\r\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\r\n\r\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\r\n\t\t\t\tvar eyeSep = 0.064 / 2;\r\n\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\r\n\t\t\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\r\n\t\t\t\tvar xmin, xmax;\r\n\r\n\t\t\t\t// translate xOffset\r\n\r\n\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\r\n\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\r\n\r\n\t\t\t\t// for left eye\r\n\r\n\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\r\n\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\r\n\r\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\r\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\r\n\r\n\t\t\t\t// for right eye\r\n\r\n\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\r\n\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\r\n\r\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\r\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\r\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n} );\r\n\r\n// File:src/lights/Light.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Light = function ( color, intensity ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Light';\r\n\r\n\tthis.color = new THREE.Color( color );\r\n\tthis.intensity = intensity !== undefined ? intensity : 1;\r\n\r\n\tthis.receiveShadow = undefined;\r\n\r\n};\r\n\r\nTHREE.Light.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Light,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.intensity = source.intensity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\tdata.object.color = this.color.getHex();\r\n\t\tdata.object.intensity = this.intensity;\r\n\r\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\r\n\r\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\r\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\r\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\r\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/lights/LightShadow.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LightShadow = function ( camera ) {\r\n\r\n\tthis.camera = camera;\r\n\r\n\tthis.bias = 0;\r\n\tthis.radius = 1;\r\n\r\n\tthis.mapSize = new THREE.Vector2( 512, 512 );\r\n\r\n\tthis.map = null;\r\n\tthis.matrix = new THREE.Matrix4();\r\n\r\n};\r\n\r\nObject.assign( THREE.LightShadow.prototype, {\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.camera = source.camera.clone();\r\n\r\n\t\tthis.bias = source.bias;\r\n\t\tthis.radius = source.radius;\r\n\r\n\t\tthis.mapSize.copy( source.mapSize );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/lights/AmbientLight.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AmbientLight = function ( color, intensity ) {\r\n\r\n\tTHREE.Light.call( this, color, intensity );\r\n\r\n\tthis.type = 'AmbientLight';\r\n\r\n\tthis.castShadow = undefined;\r\n\r\n};\r\n\r\nTHREE.AmbientLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\r\n\r\n\tconstructor: THREE.AmbientLight\r\n\r\n} );\r\n\r\n// File:src/lights/DirectionalLight.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DirectionalLight = function ( color, intensity ) {\r\n\r\n\tTHREE.Light.call( this, color, intensity );\r\n\r\n\tthis.type = 'DirectionalLight';\r\n\r\n\tthis.position.set( 0, 1, 0 );\r\n\tthis.updateMatrix();\r\n\r\n\tthis.target = new THREE.Object3D();\r\n\r\n\tthis.shadow = new THREE.DirectionalLightShadow();\r\n\r\n};\r\n\r\nTHREE.DirectionalLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\r\n\r\n\tconstructor: THREE.DirectionalLight,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\t\tthis.target = source.target.clone();\r\n\r\n\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/lights/DirectionalLightShadow.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.DirectionalLightShadow = function ( light ) {\r\n\r\n\tTHREE.LightShadow.call( this, new THREE.OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\r\n\r\n};\r\n\r\nTHREE.DirectionalLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\r\n\r\n\tconstructor: THREE.DirectionalLightShadow\r\n\r\n} );\r\n\r\n// File:src/lights/HemisphereLight.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {\r\n\r\n\tTHREE.Light.call( this, skyColor, intensity );\r\n\r\n\tthis.type = 'HemisphereLight';\r\n\r\n\tthis.castShadow = undefined;\r\n\r\n\tthis.position.set( 0, 1, 0 );\r\n\tthis.updateMatrix();\r\n\r\n\tthis.groundColor = new THREE.Color( groundColor );\r\n\r\n};\r\n\r\nTHREE.HemisphereLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\r\n\r\n\tconstructor: THREE.HemisphereLight,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\t\tthis.groundColor.copy( source.groundColor );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/lights/PointLight.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\n\r\nTHREE.PointLight = function ( color, intensity, distance, decay ) {\r\n\r\n\tTHREE.Light.call( this, color, intensity );\r\n\r\n\tthis.type = 'PointLight';\r\n\r\n\tObject.defineProperty( this, 'power', {\r\n\t\tget: function () {\r\n\t\t\t// intensity = power per solid angle.\r\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\t\treturn this.intensity * 4 * Math.PI;\r\n\r\n\t\t},\r\n\t\tset: function ( power ) {\r\n\t\t\t// intensity = power per solid angle.\r\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\t\tthis.intensity = power / ( 4 * Math.PI );\r\n\t\t}\r\n\t} );\r\n\r\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );\r\n\r\n};\r\n\r\nTHREE.PointLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\r\n\r\n\tconstructor: THREE.PointLight,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\t\tthis.distance = source.distance;\r\n\t\tthis.decay = source.decay;\r\n\r\n\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/lights/SpotLight.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SpotLight = function ( color, intensity, distance, angle, penumbra, decay ) {\r\n\r\n\tTHREE.Light.call( this, color, intensity );\r\n\r\n\tthis.type = 'SpotLight';\r\n\r\n\tthis.position.set( 0, 1, 0 );\r\n\tthis.updateMatrix();\r\n\r\n\tthis.target = new THREE.Object3D();\r\n\r\n\tObject.defineProperty( this, 'power', {\r\n\t\tget: function () {\r\n\t\t\t// intensity = power per solid angle.\r\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\t\treturn this.intensity * Math.PI;\r\n\t\t},\r\n\t\tset: function ( power ) {\r\n\t\t\t// intensity = power per solid angle.\r\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\t\tthis.intensity = power / Math.PI;\r\n\t\t}\r\n\t} );\r\n\r\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\r\n\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\r\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\tthis.shadow = new THREE.SpotLightShadow();\r\n\r\n};\r\n\r\nTHREE.SpotLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\r\n\r\n\tconstructor: THREE.SpotLight,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\t\tthis.distance = source.distance;\r\n\t\tthis.angle = source.angle;\r\n\t\tthis.penumbra = source.penumbra;\r\n\t\tthis.decay = source.decay;\r\n\r\n\t\tthis.target = source.target.clone();\r\n\r\n\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/lights/SpotLightShadow.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.SpotLightShadow = function () {\r\n\r\n\tTHREE.LightShadow.call( this, new THREE.PerspectiveCamera( 50, 1, 0.5, 500 ) );\r\n\r\n};\r\n\r\nTHREE.SpotLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\r\n\r\n\tconstructor: THREE.SpotLightShadow,\r\n\r\n\tupdate: function ( light ) {\r\n\r\n\t\tvar fov = THREE.Math.RAD2DEG * 2 * light.angle;\r\n\t\tvar aspect = this.mapSize.width / this.mapSize.height;\r\n\t\tvar far = light.distance || 500;\r\n\r\n\t\tvar camera = this.camera;\r\n\r\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\r\n\r\n\t\t\tcamera.fov = fov;\r\n\t\t\tcamera.aspect = aspect;\r\n\t\t\tcamera.far = far;\r\n\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/loaders/AudioLoader.js\r\n\r\n/**\r\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\r\n */\r\n\r\nTHREE.AudioLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.AudioLoader.prototype = {\r\n\r\n\tconstructor: THREE.AudioLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\tvar context = THREE.AudioContext;\r\n\r\n\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\r\n\r\n\t\t\t\tonLoad( audioBuffer );\r\n\r\n\t\t\t} );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/Cache.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Cache = {\r\n\r\n\tenabled: false,\r\n\r\n\tfiles: {},\r\n\r\n\tadd: function ( key, file ) {\r\n\r\n\t\tif ( this.enabled === false ) return;\r\n\r\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\r\n\r\n\t\tthis.files[ key ] = file;\r\n\r\n\t},\r\n\r\n\tget: function ( key ) {\r\n\r\n\t\tif ( this.enabled === false ) return;\r\n\r\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\r\n\r\n\t\treturn this.files[ key ];\r\n\r\n\t},\r\n\r\n\tremove: function ( key ) {\r\n\r\n\t\tdelete this.files[ key ];\r\n\r\n\t},\r\n\r\n\tclear: function () {\r\n\r\n\t\tthis.files = {};\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/Loader.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Loader = function () {\r\n\r\n\tthis.onLoadStart = function () {};\r\n\tthis.onLoadProgress = function () {};\r\n\tthis.onLoadComplete = function () {};\r\n\r\n};\r\n\r\nTHREE.Loader.prototype = {\r\n\r\n\tconstructor: THREE.Loader,\r\n\r\n\tcrossOrigin: undefined,\r\n\r\n\textractUrlBase: function ( url ) {\r\n\r\n\t\tvar parts = url.split( '/' );\r\n\r\n\t\tif ( parts.length === 1 ) return './';\r\n\r\n\t\tparts.pop();\r\n\r\n\t\treturn parts.join( '/' ) + '/';\r\n\r\n\t},\r\n\r\n\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\r\n\r\n\t\tvar array = [];\r\n\r\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\r\n\r\n\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\r\n\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tcreateMaterial: ( function () {\r\n\r\n\t\tvar color, textureLoader, materialLoader;\r\n\r\n\t\treturn function ( m, texturePath, crossOrigin ) {\r\n\r\n\t\t\tif ( color === undefined ) color = new THREE.Color();\r\n\t\t\tif ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();\r\n\t\t\tif ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();\r\n\r\n\t\t\t// convert from old material format\r\n\r\n\t\t\tvar textures = {};\r\n\r\n\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\r\n\r\n\t\t\t\tvar fullPath = texturePath + path;\r\n\t\t\t\tvar loader = THREE.Loader.Handlers.get( fullPath );\r\n\r\n\t\t\t\tvar texture;\r\n\r\n\t\t\t\tif ( loader !== null ) {\r\n\r\n\t\t\t\t\ttexture = loader.load( fullPath );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\r\n\t\t\t\t\ttexture = textureLoader.load( fullPath );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( repeat !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.repeat.fromArray( repeat );\r\n\r\n\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.offset.fromArray( offset );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( wrap !== undefined ) {\r\n\r\n\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;\r\n\r\n\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;\r\n\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( anisotropy !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.anisotropy = anisotropy;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uuid = THREE.Math.generateUUID();\r\n\r\n\t\t\t\ttextures[ uuid ] = texture;\r\n\r\n\t\t\t\treturn uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar json = {\r\n\t\t\t\tuuid: THREE.Math.generateUUID(),\r\n\t\t\t\ttype: 'MeshLambertMaterial'\r\n\t\t\t};\r\n\r\n\t\t\tfor ( var name in m ) {\r\n\r\n\t\t\t\tvar value = m[ name ];\r\n\r\n\t\t\t\tswitch ( name ) {\r\n\t\t\t\t\tcase 'DbgColor':\r\n\t\t\t\t\tcase 'DbgIndex':\r\n\t\t\t\t\tcase 'opticalDensity':\r\n\t\t\t\t\tcase 'illumination':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'DbgName':\r\n\t\t\t\t\t\tjson.name = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'blending':\r\n\t\t\t\t\t\tjson.blending = THREE[ value ];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorAmbient':\r\n\t\t\t\t\tcase 'mapAmbient':\r\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorDiffuse':\r\n\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorSpecular':\r\n\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorEmissive':\r\n\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'specularCoef':\r\n\t\t\t\t\t\tjson.shininess = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'shading':\r\n\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\r\n\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapDiffuse':\r\n\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapDiffuseRepeat':\r\n\t\t\t\t\tcase 'mapDiffuseOffset':\r\n\t\t\t\t\tcase 'mapDiffuseWrap':\r\n\t\t\t\t\tcase 'mapDiffuseAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapLight':\r\n\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapLightRepeat':\r\n\t\t\t\t\tcase 'mapLightOffset':\r\n\t\t\t\t\tcase 'mapLightWrap':\r\n\t\t\t\t\tcase 'mapLightAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAO':\r\n\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAORepeat':\r\n\t\t\t\t\tcase 'mapAOOffset':\r\n\t\t\t\t\tcase 'mapAOWrap':\r\n\t\t\t\t\tcase 'mapAOAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapBump':\r\n\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapBumpScale':\r\n\t\t\t\t\t\tjson.bumpScale = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapBumpRepeat':\r\n\t\t\t\t\tcase 'mapBumpOffset':\r\n\t\t\t\t\tcase 'mapBumpWrap':\r\n\t\t\t\t\tcase 'mapBumpAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapNormal':\r\n\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapNormalFactor':\r\n\t\t\t\t\t\tjson.normalScale = [ value, value ];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapNormalRepeat':\r\n\t\t\t\t\tcase 'mapNormalOffset':\r\n\t\t\t\t\tcase 'mapNormalWrap':\r\n\t\t\t\t\tcase 'mapNormalAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapSpecular':\r\n\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapSpecularRepeat':\r\n\t\t\t\t\tcase 'mapSpecularOffset':\r\n\t\t\t\t\tcase 'mapSpecularWrap':\r\n\t\t\t\t\tcase 'mapSpecularAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAlpha':\r\n\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAlphaRepeat':\r\n\t\t\t\t\tcase 'mapAlphaOffset':\r\n\t\t\t\t\tcase 'mapAlphaWrap':\r\n\t\t\t\t\tcase 'mapAlphaAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'flipSided':\r\n\t\t\t\t\t\tjson.side = THREE.BackSide;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'doubleSided':\r\n\t\t\t\t\t\tjson.side = THREE.DoubleSide;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'transparency':\r\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\r\n\t\t\t\t\t\tjson.opacity = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'depthTest':\r\n\t\t\t\t\tcase 'depthWrite':\r\n\t\t\t\t\tcase 'colorWrite':\r\n\t\t\t\t\tcase 'opacity':\r\n\t\t\t\t\tcase 'reflectivity':\r\n\t\t\t\t\tcase 'transparent':\r\n\t\t\t\t\tcase 'visible':\r\n\t\t\t\t\tcase 'wireframe':\r\n\t\t\t\t\t\tjson[ name ] = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'vertexColors':\r\n\t\t\t\t\t\tif ( value === true ) json.vertexColors = THREE.VertexColors;\r\n\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = THREE.FaceColors;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\r\n\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\r\n\r\n\t\t\tif ( json.opacity < 1 ) json.transparent = true;\r\n\r\n\t\t\tmaterialLoader.setTextures( textures );\r\n\r\n\t\t\treturn materialLoader.parse( json );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n};\r\n\r\nTHREE.Loader.Handlers = {\r\n\r\n\thandlers: [],\r\n\r\n\tadd: function ( regex, loader ) {\r\n\r\n\t\tthis.handlers.push( regex, loader );\r\n\r\n\t},\r\n\r\n\tget: function ( file ) {\r\n\r\n\t\tvar handlers = this.handlers;\r\n\r\n\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\r\n\r\n\t\t\tvar regex = handlers[ i ];\r\n\t\t\tvar loader  = handlers[ i + 1 ];\r\n\r\n\t\t\tif ( regex.test( file ) ) {\r\n\r\n\t\t\t\treturn loader;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/XHRLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.XHRLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.XHRLoader.prototype = {\r\n\r\n\tconstructor: THREE.XHRLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar cached = THREE.Cache.get( url );\r\n\r\n\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\tif ( onLoad ) {\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tonLoad( cached );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cached;\r\n\r\n\t\t}\r\n\r\n\t\tvar request = new XMLHttpRequest();\r\n\t\trequest.overrideMimeType( 'text/plain' );\r\n\t\trequest.open( 'GET', url, true );\r\n\r\n\t\trequest.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\tvar response = event.target.response;\r\n\r\n\t\t\tTHREE.Cache.add( url, response );\r\n\r\n\t\t\tif ( this.status === 200 ) {\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( response );\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} else if ( this.status === 0 ) {\r\n\r\n\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\r\n\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\r\n\r\n\t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( response );\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( onError ) onError( event );\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( onProgress !== undefined ) {\r\n\r\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\r\n\r\n\t\t\t\tonProgress( event );\r\n\r\n\t\t\t}, false );\r\n\r\n\t\t}\r\n\r\n\t\trequest.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\tif ( onError ) onError( event );\r\n\r\n\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\r\n\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\r\n\r\n\t\trequest.send( null );\r\n\r\n\t\tscope.manager.itemStart( url );\r\n\r\n\t\treturn request;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t},\r\n\r\n\tsetResponseType: function ( value ) {\r\n\r\n\t\tthis.responseType = value;\r\n\r\n\t},\r\n\r\n\tsetWithCredentials: function ( value ) {\r\n\r\n\t\tthis.withCredentials = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/FontLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.FontLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.FontLoader.prototype = {\r\n\r\n\tconstructor: THREE.FontLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tvar json;\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tjson = JSON.parse( text );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\r\n\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar font = scope.parse( json );\r\n\r\n\t\t\tif ( onLoad ) onLoad( font );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tparse: function ( json ) {\r\n\r\n\t\treturn new THREE.Font( json );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/ImageLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ImageLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.ImageLoader.prototype = {\r\n\r\n\tconstructor: THREE.ImageLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar cached = THREE.Cache.get( url );\r\n\r\n\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\tif ( onLoad ) {\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tonLoad( cached );\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cached;\r\n\r\n\t\t}\r\n\r\n\t\tvar image = document.createElement( 'img' );\r\n\r\n\t\timage.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\tTHREE.Cache.add( url, this );\r\n\r\n\t\t\tif ( onLoad ) onLoad( this );\r\n\r\n\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( onProgress !== undefined ) {\r\n\r\n\t\t\timage.addEventListener( 'progress', function ( event ) {\r\n\r\n\t\t\t\tonProgress( event );\r\n\r\n\t\t\t}, false );\r\n\r\n\t\t}\r\n\r\n\t\timage.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\tif ( onError ) onError( event );\r\n\r\n\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\r\n\r\n\t\tscope.manager.itemStart( url );\r\n\r\n\t\timage.src = url;\r\n\r\n\t\treturn image;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/JSONLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.JSONLoader = function ( manager ) {\r\n\r\n\tif ( typeof manager === 'boolean' ) {\r\n\r\n\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\r\n\t\tmanager = undefined;\r\n\r\n\t}\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n\tthis.withCredentials = false;\r\n\r\n};\r\n\r\nTHREE.JSONLoader.prototype = {\r\n\r\n\tconstructor: THREE.JSONLoader,\r\n\r\n\t// Deprecated\r\n\r\n\tget statusDomElement () {\r\n\r\n\t\tif ( this._statusDomElement === undefined ) {\r\n\r\n\t\t\tthis._statusDomElement = document.createElement( 'div' );\r\n\r\n\t\t}\r\n\r\n\t\tconsole.warn( 'THREE.JSONLoader: .statusDomElement has been removed.' );\r\n\t\treturn this._statusDomElement;\r\n\r\n\t},\r\n\r\n\tload: function( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tvar json = JSON.parse( text );\r\n\t\t\tvar metadata = json.metadata;\r\n\r\n\t\t\tif ( metadata !== undefined ) {\r\n\r\n\t\t\t\tvar type = metadata.type;\r\n\r\n\t\t\t\tif ( type !== undefined ) {\r\n\r\n\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar object = scope.parse( json, texturePath );\r\n\t\t\tonLoad( object.geometry, object.materials );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tsetTexturePath: function ( value ) {\r\n\r\n\t\tthis.texturePath = value;\r\n\r\n\t},\r\n\r\n\tparse: function ( json, texturePath ) {\r\n\r\n\t\tvar geometry = new THREE.Geometry(),\r\n\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\r\n\r\n\t\tparseModel( scale );\r\n\r\n\t\tparseSkin();\r\n\t\tparseMorphing( scale );\r\n\t\tparseAnimations();\r\n\r\n\t\tgeometry.computeFaceNormals();\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\tfunction parseModel( scale ) {\r\n\r\n\t\t\tfunction isBitSet( value, position ) {\r\n\r\n\t\t\t\treturn value & ( 1 << position );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar i, j, fi,\r\n\r\n\t\t\toffset, zLength,\r\n\r\n\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\r\n\r\n\t\t\ttype,\r\n\t\t\tisQuad,\r\n\t\t\thasMaterial,\r\n\t\t\thasFaceVertexUv,\r\n\t\t\thasFaceNormal, hasFaceVertexNormal,\r\n\t\t\thasFaceColor, hasFaceVertexColor,\r\n\r\n\t\tvertex, face, faceA, faceB, hex, normal,\r\n\r\n\t\t\tuvLayer, uv, u, v,\r\n\r\n\t\t\tfaces = json.faces,\r\n\t\t\tvertices = json.vertices,\r\n\t\t\tnormals = json.normals,\r\n\t\t\tcolors = json.colors,\r\n\r\n\t\t\tnUvLayers = 0;\r\n\r\n\t\t\tif ( json.uvs !== undefined ) {\r\n\r\n\t\t\t\t// disregard empty arrays\r\n\r\n\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\r\n\r\n\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\toffset = 0;\r\n\t\t\tzLength = vertices.length;\r\n\r\n\t\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\t\tvertex = new THREE.Vector3();\r\n\r\n\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\r\n\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\r\n\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\r\n\r\n\t\t\t\tgeometry.vertices.push( vertex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\toffset = 0;\r\n\t\t\tzLength = faces.length;\r\n\r\n\t\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\t\ttype = faces[ offset ++ ];\r\n\r\n\r\n\t\t\t\tisQuad              = isBitSet( type, 0 );\r\n\t\t\t\thasMaterial         = isBitSet( type, 1 );\r\n\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\r\n\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\r\n\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\r\n\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\r\n\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\r\n\r\n\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\r\n\r\n\t\t\t\tif ( isQuad ) {\r\n\r\n\t\t\t\t\tfaceA = new THREE.Face3();\r\n\t\t\t\t\tfaceA.a = faces[ offset ];\r\n\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\r\n\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\r\n\r\n\t\t\t\t\tfaceB = new THREE.Face3();\r\n\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\r\n\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\r\n\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\r\n\r\n\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\tif ( hasMaterial ) {\r\n\r\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\r\n\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// to get face <=> uv index correspondence\r\n\r\n\t\t\t\t\tfi = geometry.faces.length;\r\n\r\n\t\t\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\r\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\r\n\r\n\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\r\n\r\n\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\r\n\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\tfaceA.normal.set(\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t);\r\n\r\n\r\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\r\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\thex = colors[ colorIndex ];\r\n\r\n\t\t\t\t\t\tfaceA.color.setHex( hex );\r\n\t\t\t\t\t\tfaceB.color.setHex( hex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\r\n\r\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\r\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.faces.push( faceA );\r\n\t\t\t\t\tgeometry.faces.push( faceB );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface = new THREE.Face3();\r\n\t\t\t\t\tface.a = faces[ offset ++ ];\r\n\t\t\t\t\tface.b = faces[ offset ++ ];\r\n\t\t\t\t\tface.c = faces[ offset ++ ];\r\n\r\n\t\t\t\t\tif ( hasMaterial ) {\r\n\r\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\tface.materialIndex = materialIndex;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// to get face <=> uv index correspondence\r\n\r\n\t\t\t\t\tfi = geometry.faces.length;\r\n\r\n\t\t\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\r\n\r\n\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\r\n\r\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\tface.normal.set(\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tface.vertexNormals.push( normal );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.faces.push( face );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseSkin() {\r\n\r\n\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\r\n\r\n\t\t\tif ( json.skinWeights ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\r\n\r\n\t\t\t\t\tvar x =                               json.skinWeights[ i ];\r\n\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\r\n\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\r\n\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\r\n\r\n\t\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.skinIndices ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\r\n\r\n\t\t\t\t\tvar a =                               json.skinIndices[ i ];\r\n\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\r\n\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\r\n\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\r\n\r\n\t\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.bones = json.bones;\r\n\r\n\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\r\n\r\n\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\r\n\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseMorphing( scale ) {\r\n\r\n\t\t\tif ( json.morphTargets !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tgeometry.morphTargets[ i ] = {};\r\n\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\r\n\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\r\n\r\n\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\r\n\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\r\n\r\n\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\r\n\r\n\t\t\t\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\r\n\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\r\n\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\r\n\r\n\t\t\t\t\t\tdstVertices.push( vertex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\r\n\r\n\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\r\n\r\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseAnimations() {\r\n\r\n\t\t\tvar outputAnimations = [];\r\n\r\n\t\t\t// parse old style Bone/Hierarchy animations\r\n\t\t\tvar animations = [];\r\n\r\n\t\t\tif ( json.animation !== undefined ) {\r\n\r\n\t\t\t\tanimations.push( json.animation );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.animations !== undefined ) {\r\n\r\n\t\t\t\tif ( json.animations.length ) {\r\n\r\n\t\t\t\t\tanimations = animations.concat( json.animations );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tanimations.push( json.animations );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\r\n\r\n\t\t\t\tvar clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );\r\n\t\t\t\tif ( clip ) outputAnimations.push( clip );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// parse implicit morph animations\r\n\t\t\tif ( geometry.morphTargets ) {\r\n\r\n\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\r\n\t\t\t\tvar morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\r\n\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\r\n\r\n\t\t\treturn { geometry: geometry };\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\r\n\r\n\t\t\treturn { geometry: geometry, materials: materials };\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/LoadingManager.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\r\n\r\n\tthis.onStart = undefined;\r\n\tthis.onLoad = onLoad;\r\n\tthis.onProgress = onProgress;\r\n\tthis.onError = onError;\r\n\r\n\tthis.itemStart = function ( url ) {\r\n\r\n\t\titemsTotal ++;\r\n\r\n\t\tif ( isLoading === false ) {\r\n\r\n\t\t\tif ( scope.onStart !== undefined ) {\r\n\r\n\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tisLoading = true;\r\n\r\n\t};\r\n\r\n\tthis.itemEnd = function ( url ) {\r\n\r\n\t\titemsLoaded ++;\r\n\r\n\t\tif ( scope.onProgress !== undefined ) {\r\n\r\n\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t}\r\n\r\n\t\tif ( itemsLoaded === itemsTotal ) {\r\n\r\n\t\t\tisLoading = false;\r\n\r\n\t\t\tif ( scope.onLoad !== undefined ) {\r\n\r\n\t\t\t\tscope.onLoad();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.itemError = function ( url ) {\r\n\r\n\t\tif ( scope.onError !== undefined ) {\r\n\r\n\t\t\tscope.onError( url );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.DefaultLoadingManager = new THREE.LoadingManager();\r\n\r\n// File:src/loaders/BufferGeometryLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BufferGeometryLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.BufferGeometryLoader.prototype = {\r\n\r\n\tconstructor: THREE.BufferGeometryLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tparse: function ( json ) {\r\n\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\t\tvar index = json.data.index;\r\n\r\n\t\tvar TYPED_ARRAYS = {\r\n\t\t\t'Int8Array': Int8Array,\r\n\t\t\t'Uint8Array': Uint8Array,\r\n\t\t\t'Uint8ClampedArray': Uint8ClampedArray,\r\n\t\t\t'Int16Array': Int16Array,\r\n\t\t\t'Uint16Array': Uint16Array,\r\n\t\t\t'Int32Array': Int32Array,\r\n\t\t\t'Uint32Array': Uint32Array,\r\n\t\t\t'Float32Array': Float32Array,\r\n\t\t\t'Float64Array': Float64Array\r\n\t\t};\r\n\r\n\t\tif ( index !== undefined ) {\r\n\r\n\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\r\n\t\t\tgeometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = json.data.attributes;\r\n\r\n\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ key ];\r\n\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\r\n\r\n\t\t\tgeometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\r\n\r\n\t\tif ( groups !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar boundingSphere = json.data.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== undefined ) {\r\n\r\n\t\t\tvar center = new THREE.Vector3();\r\n\r\n\t\t\tif ( boundingSphere.center !== undefined ) {\r\n\r\n\t\t\t\tcenter.fromArray( boundingSphere.center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/MaterialLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.MaterialLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\tthis.textures = {};\r\n\r\n};\r\n\r\nTHREE.MaterialLoader.prototype = {\r\n\r\n\tconstructor: THREE.MaterialLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tsetTextures: function ( value ) {\r\n\r\n\t\tthis.textures = value;\r\n\r\n\t},\r\n\r\n\tgetTexture: function ( name ) {\r\n\r\n\t\tvar textures = this.textures;\r\n\r\n\t\tif ( textures[ name ] === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\r\n\r\n\t\t}\r\n\r\n\t\treturn textures[ name ];\r\n\r\n\t},\r\n\r\n\tparse: function ( json ) {\r\n\r\n\t\tvar material = new THREE[ json.type ];\r\n\r\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\r\n\t\tif ( json.name !== undefined ) material.name = json.name;\r\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\r\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\r\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\r\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\r\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\r\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\r\n\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\r\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\r\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\r\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\r\n\t\tif ( json.shading !== undefined ) material.shading = json.shading;\r\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\r\n\t\tif ( json.side !== undefined ) material.side = json.side;\r\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\r\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\r\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\r\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\r\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\r\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\r\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\r\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\r\n\r\n\t\t// for PointsMaterial\r\n\t\tif ( json.size !== undefined ) material.size = json.size;\r\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\r\n\r\n\t\t// maps\r\n\r\n\t\tif ( json.map !== undefined ) material.map = this.getTexture( json.map );\r\n\r\n\t\tif ( json.alphaMap !== undefined ) {\r\n\r\n\t\t\tmaterial.alphaMap = this.getTexture( json.alphaMap );\r\n\t\t\tmaterial.transparent = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );\r\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\r\n\r\n\t\tif ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );\r\n\t\tif ( json.normalScale !== undefined ) {\r\n\r\n\t\t\tvar normalScale = json.normalScale;\r\n\r\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\r\n\r\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\r\n\r\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterial.normalScale = new THREE.Vector2().fromArray( normalScale );\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );\r\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\r\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\r\n\r\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = this.getTexture( json.roughnessMap );\r\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = this.getTexture( json.metalnessMap );\r\n\r\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = this.getTexture( json.emissiveMap );\r\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\r\n\r\n\t\tif ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );\r\n\r\n\t\tif ( json.envMap !== undefined ) {\r\n\r\n\t\t\tmaterial.envMap = this.getTexture( json.envMap );\r\n\t\t\tmaterial.combine = THREE.MultiplyOperation;\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.reflectivity ) material.reflectivity = json.reflectivity;\r\n\r\n\t\tif ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );\r\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\r\n\r\n\t\tif ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );\r\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\r\n\r\n\t\t// MultiMaterial\r\n\r\n\t\tif ( json.materials !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/ObjectLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ObjectLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\tthis.texturePath = '';\r\n\r\n};\r\n\r\nTHREE.ObjectLoader.prototype = {\r\n\r\n\tconstructor: THREE.ObjectLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tif ( this.texturePath === '' ) {\r\n\r\n\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tscope.parse( JSON.parse( text ), onLoad );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tsetTexturePath: function ( value ) {\r\n\r\n\t\tthis.texturePath = value;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tparse: function ( json, onLoad ) {\r\n\r\n\t\tvar geometries = this.parseGeometries( json.geometries );\r\n\r\n\t\tvar images = this.parseImages( json.images, function () {\r\n\r\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\r\n\t\t} );\r\n\r\n\t\tvar textures  = this.parseTextures( json.textures, images );\r\n\t\tvar materials = this.parseMaterials( json.materials, textures );\r\n\r\n\t\tvar object = this.parseObject( json.object, geometries, materials );\r\n\r\n\t\tif ( json.animations ) {\r\n\r\n\t\t\tobject.animations = this.parseAnimations( json.animations );\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.images === undefined || json.images.length === 0 ) {\r\n\r\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\r\n\t\t}\r\n\r\n\t\treturn object;\r\n\r\n\t},\r\n\r\n\tparseGeometries: function ( json ) {\r\n\r\n\t\tvar geometries = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tvar geometryLoader = new THREE.JSONLoader();\r\n\t\t\tvar bufferGeometryLoader = new THREE.BufferGeometryLoader();\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar geometry;\r\n\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\t\tcase 'PlaneGeometry':\r\n\t\t\t\t\tcase 'PlaneBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'BoxGeometry':\r\n\t\t\t\t\tcase 'BoxBufferGeometry':\r\n\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\tdata.depth,\r\n\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.depthSegments\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'CircleGeometry':\r\n\t\t\t\t\tcase 'CircleBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'CylinderGeometry':\r\n\t\t\t\t\tcase 'CylinderBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radiusTop,\r\n\t\t\t\t\t\t\tdata.radiusBottom,\r\n\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'ConeGeometry':\r\n\t\t\t\t\tcase 'ConeBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE [ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'SphereGeometry':\r\n\t\t\t\t\tcase 'SphereBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\tdata.phiLength,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'DodecahedronGeometry':\r\n\t\t\t\t\tcase 'IcosahedronGeometry':\r\n\t\t\t\t\tcase 'OctahedronGeometry':\r\n\t\t\t\t\tcase 'TetrahedronGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'RingGeometry':\r\n\t\t\t\t\tcase 'RingBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.innerRadius,\r\n\t\t\t\t\t\t\tdata.outerRadius,\r\n\t\t\t\t\t\t\tdata.thetaSegments,\r\n\t\t\t\t\t\t\tdata.phiSegments,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'TorusGeometry':\r\n\t\t\t\t\tcase 'TorusBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\tdata.arc\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'TorusKnotGeometry':\r\n\t\t\t\t\tcase 'TorusKnotBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\tdata.p,\r\n\t\t\t\t\t\t\tdata.q\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'LatheGeometry':\r\n\t\t\t\t\tcase 'LatheBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.points,\r\n\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\tdata.phiLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'BufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'Geometry':\r\n\r\n\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.uuid = data.uuid;\r\n\r\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\r\n\r\n\t\t\t\tgeometries[ data.uuid ] = geometry;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn geometries;\r\n\r\n\t},\r\n\r\n\tparseMaterials: function ( json, textures ) {\r\n\r\n\t\tvar materials = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tvar loader = new THREE.MaterialLoader();\r\n\t\t\tloader.setTextures( textures );\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar material = loader.parse( json[ i ] );\r\n\t\t\t\tmaterials[ material.uuid ] = material;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn materials;\r\n\r\n\t},\r\n\r\n\tparseAnimations: function ( json ) {\r\n\r\n\t\tvar animations = [];\r\n\r\n\t\tfor ( var i = 0; i < json.length; i ++ ) {\r\n\r\n\t\t\tvar clip = THREE.AnimationClip.parse( json[ i ] );\r\n\r\n\t\t\tanimations.push( clip );\r\n\r\n\t\t}\r\n\r\n\t\treturn animations;\r\n\r\n\t},\r\n\r\n\tparseImages: function ( json, onLoad ) {\r\n\r\n\t\tvar scope = this;\r\n\t\tvar images = {};\r\n\r\n\t\tfunction loadImage( url ) {\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\treturn loader.load( url, function () {\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\tif ( json !== undefined && json.length > 0 ) {\r\n\r\n\t\t\tvar manager = new THREE.LoadingManager( onLoad );\r\n\r\n\t\t\tvar loader = new THREE.ImageLoader( manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar image = json[ i ];\r\n\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\r\n\r\n\t\t\t\timages[ image.uuid ] = loadImage( path );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn images;\r\n\r\n\t},\r\n\r\n\tparseTextures: function ( json, images ) {\r\n\r\n\t\tfunction parseConstant( value ) {\r\n\r\n\t\t\tif ( typeof( value ) === 'number' ) return value;\r\n\r\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\r\n\r\n\t\t\treturn THREE[ value ];\r\n\r\n\t\t}\r\n\r\n\t\tvar textures = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\tif ( data.image === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( images[ data.image ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar texture = new THREE.Texture( images[ data.image ] );\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\ttexture.uuid = data.uuid;\r\n\r\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\r\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );\r\n\t\t\t\tif ( data.offset !== undefined ) texture.offset = new THREE.Vector2( data.offset[ 0 ], data.offset[ 1 ] );\r\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat = new THREE.Vector2( data.repeat[ 0 ], data.repeat[ 1 ] );\r\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );\r\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );\r\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\r\n\t\t\t\tif ( Array.isArray( data.wrap ) ) {\r\n\r\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ] );\r\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextures[ data.uuid ] = texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn textures;\r\n\r\n\t},\r\n\r\n\tparseObject: function () {\r\n\r\n\t\tvar matrix = new THREE.Matrix4();\r\n\r\n\t\treturn function ( data, geometries, materials ) {\r\n\r\n\t\t\tvar object;\r\n\r\n\t\t\tfunction getGeometry( name ) {\r\n\r\n\t\t\t\tif ( geometries[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn geometries[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getMaterial( name ) {\r\n\r\n\t\t\t\tif ( name === undefined ) return undefined;\r\n\r\n\t\t\t\tif ( materials[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn materials[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\tcase 'Scene':\r\n\r\n\t\t\t\t\tobject = new THREE.Scene();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PerspectiveCamera':\r\n\r\n\t\t\t\t\tobject = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\r\n\r\n\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\r\n\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\r\n\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\r\n\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\r\n\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'OrthographicCamera':\r\n\r\n\t\t\t\t\tobject = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'AmbientLight':\r\n\r\n\t\t\t\t\tobject = new THREE.AmbientLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'DirectionalLight':\r\n\r\n\t\t\t\t\tobject = new THREE.DirectionalLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointLight':\r\n\r\n\t\t\t\t\tobject = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SpotLight':\r\n\r\n\t\t\t\t\tobject = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'HemisphereLight':\r\n\r\n\t\t\t\t\tobject = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Mesh':\r\n\r\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\r\n\t\t\t\t\tvar material = getMaterial( data.material );\r\n\r\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\r\n\r\n\t\t\t\t\t\tobject = new THREE.SkinnedMesh( geometry, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tobject = new THREE.Mesh( geometry, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LOD':\r\n\r\n\t\t\t\t\tobject = new THREE.LOD();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Line':\r\n\r\n\t\t\t\t\tobject = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointCloud':\r\n\t\t\t\tcase 'Points':\r\n\r\n\t\t\t\t\tobject = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Sprite':\r\n\r\n\t\t\t\t\tobject = new THREE.Sprite( getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Group':\r\n\r\n\t\t\t\t\tobject = new THREE.Group();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tobject = new THREE.Object3D();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.uuid = data.uuid;\r\n\r\n\t\t\tif ( data.name !== undefined ) object.name = data.name;\r\n\t\t\tif ( data.matrix !== undefined ) {\r\n\r\n\t\t\t\tmatrix.fromArray( data.matrix );\r\n\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\r\n\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\r\n\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\r\n\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\r\n\r\n\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\r\n\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\r\n\r\n\t\t\tif ( data.children !== undefined ) {\r\n\r\n\t\t\t\tfor ( var child in data.children ) {\r\n\r\n\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.type === 'LOD' ) {\r\n\r\n\t\t\t\tvar levels = data.levels;\r\n\r\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\t\t\tvar level = levels[ l ];\r\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\r\n\r\n\t\t\t\t\tif ( child !== undefined ) {\r\n\r\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t};\r\n\r\n\t}()\r\n\r\n};\r\n\r\n// File:src/loaders/TextureLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.TextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.TextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.TextureLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar texture = new THREE.Texture();\r\n\r\n\t\tvar loader = new THREE.ImageLoader( this.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.load( url, function ( image ) {\r\n\r\n\t\t\ttexture.image = image;\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad !== undefined ) {\r\n\r\n\t\t\t\tonLoad( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/CubeTextureLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CubeTextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.CubeTextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.CubeTextureLoader,\r\n\r\n\tload: function ( urls, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar texture = new THREE.CubeTexture();\r\n\r\n\t\tvar loader = new THREE.ImageLoader( this.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.setPath( this.path );\r\n\r\n\t\tvar loaded = 0;\r\n\r\n\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\tloader.load( urls[ i ], function ( image ) {\r\n\r\n\t\t\t\ttexture.images[ i ] = image;\r\n\r\n\t\t\t\tloaded ++;\r\n\r\n\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, onError );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < urls.length; ++ i ) {\r\n\r\n\t\t\tloadTexture( i );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/BinaryTextureLoader.js\r\n\r\n/**\r\n * @author Nikos M. / https://github.com/foo123/\r\n *\r\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\r\n */\r\n\r\nTHREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n\t// override in sub classes\r\n\tthis._parser = null;\r\n\r\n};\r\n\r\nTHREE.BinaryTextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.BinaryTextureLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar texture = new THREE.DataTexture();\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\r\n\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\tvar texData = scope._parser( buffer );\r\n\r\n\t\t\tif ( ! texData ) return;\r\n\r\n\t\t\tif ( undefined !== texData.image ) {\r\n\r\n\t\t\t\ttexture.image = texData.image;\r\n\r\n\t\t\t} else if ( undefined !== texData.data ) {\r\n\r\n\t\t\t\ttexture.image.width = texData.width;\r\n\t\t\t\ttexture.image.height = texData.height;\r\n\t\t\t\ttexture.image.data = texData.data;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\r\n\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\r\n\r\n\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\r\n\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\r\n\r\n\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\r\n\r\n\t\t\tif ( undefined !== texData.format ) {\r\n\r\n\t\t\t\ttexture.format = texData.format;\r\n\r\n\t\t\t}\r\n\t\t\tif ( undefined !== texData.type ) {\r\n\r\n\t\t\t\ttexture.type = texData.type;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( undefined !== texData.mipmaps ) {\r\n\r\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( 1 === texData.mipmapCount ) {\r\n\r\n\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad ) onLoad( texture, texData );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/CompressedTextureLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * Abstract Base class to block based textures loader (dds, pvr, ...)\r\n */\r\n\r\nTHREE.CompressedTextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n\t// override in sub classes\r\n\tthis._parser = null;\r\n\r\n};\r\n\r\n\r\nTHREE.CompressedTextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.CompressedTextureLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar images = [];\r\n\r\n\t\tvar texture = new THREE.CompressedTexture();\r\n\t\ttexture.image = images;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\r\n\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\tloader.load( url[ i ], function ( buffer ) {\r\n\r\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\r\n\r\n\t\t\t\timages[ i ] = {\r\n\t\t\t\t\twidth: texDatas.width,\r\n\t\t\t\t\theight: texDatas.height,\r\n\t\t\t\t\tformat: texDatas.format,\r\n\t\t\t\t\tmipmaps: texDatas.mipmaps\r\n\t\t\t\t};\r\n\r\n\t\t\t\tloaded += 1;\r\n\r\n\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\r\n\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\r\n\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t}\r\n\r\n\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\tvar loaded = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\r\n\r\n\t\t\t\tloadTexture( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// compressed cubemap texture stored in a single DDS file\r\n\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\r\n\r\n\t\t\t\tif ( texDatas.isCubemap ) {\r\n\r\n\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\r\n\r\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\r\n\r\n\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\r\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\r\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\r\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttexture.image.width = texDatas.width;\r\n\t\t\t\t\ttexture.image.height = texDatas.height;\r\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\r\n\r\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/materials/Material.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Material = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'Material';\r\n\r\n\tthis.fog = true;\r\n\tthis.lights = true;\r\n\r\n\tthis.blending = THREE.NormalBlending;\r\n\tthis.side = THREE.FrontSide;\r\n\tthis.shading = THREE.SmoothShading; // THREE.FlatShading, THREE.SmoothShading\r\n\tthis.vertexColors = THREE.NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\r\n\r\n\tthis.opacity = 1;\r\n\tthis.transparent = false;\r\n\r\n\tthis.blendSrc = THREE.SrcAlphaFactor;\r\n\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\r\n\tthis.blendEquation = THREE.AddEquation;\r\n\tthis.blendSrcAlpha = null;\r\n\tthis.blendDstAlpha = null;\r\n\tthis.blendEquationAlpha = null;\r\n\r\n\tthis.depthFunc = THREE.LessEqualDepth;\r\n\tthis.depthTest = true;\r\n\tthis.depthWrite = true;\r\n\r\n\tthis.clippingPlanes = null;\r\n\tthis.clipShadows = false;\r\n\r\n\tthis.colorWrite = true;\r\n\r\n\tthis.precision = null; // override the renderer's default precision for this material\r\n\r\n\tthis.polygonOffset = false;\r\n\tthis.polygonOffsetFactor = 0;\r\n\tthis.polygonOffsetUnits = 0;\r\n\r\n\tthis.alphaTest = 0;\r\n\tthis.premultipliedAlpha = false;\r\n\r\n\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\r\n\r\n\tthis.visible = true;\r\n\r\n\tthis._needsUpdate = true;\r\n\r\n};\r\n\r\nTHREE.Material.prototype = {\r\n\r\n\tconstructor: THREE.Material,\r\n\r\n\tget needsUpdate() {\r\n\r\n\t\treturn this._needsUpdate;\r\n\r\n\t},\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.update();\r\n\t\tthis._needsUpdate = value;\r\n\r\n\t},\r\n\r\n\tsetValues: function ( values ) {\r\n\r\n\t\tif ( values === undefined ) return;\r\n\r\n\t\tfor ( var key in values ) {\r\n\r\n\t\t\tvar newValue = values[ key ];\r\n\r\n\t\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar currentValue = this[ key ];\r\n\r\n\t\t\tif ( currentValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( currentValue instanceof THREE.Color ) {\r\n\r\n\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else if ( key === 'overdraw' ) {\r\n\r\n\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\r\n\t\t\t\tthis[ key ] = Number( newValue );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar isRoot = meta === undefined;\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Material',\r\n\t\t\t\tgenerator: 'Material.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard Material serialization\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.color instanceof THREE.Color ) data.color = this.color.getHex();\r\n\r\n\t\tif ( this.roughness !== 0.5 ) data.roughness = this.roughness;\r\n\t\tif ( this.metalness !== 0.5 ) data.metalness = this.metalness;\r\n\r\n\t\tif ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();\r\n\t\tif ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();\r\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\r\n\r\n\t\tif ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;\r\n\t\tif ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\r\n\t\tif ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\r\n\t\tif ( this.bumpMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\r\n\t\t\tdata.bumpScale = this.bumpScale;\r\n\r\n\t\t}\r\n\t\tif ( this.normalMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\r\n\t\t\tdata.normalScale = this.normalScale.toArray();\r\n\r\n\t\t}\r\n\t\tif ( this.displacementMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\r\n\t\t\tdata.displacementScale = this.displacementScale;\r\n\t\t\tdata.displacementBias = this.displacementBias;\r\n\r\n\t\t}\r\n\t\tif ( this.roughnessMap instanceof THREE.Texture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\r\n\t\tif ( this.metalnessMap instanceof THREE.Texture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.emissiveMap instanceof THREE.Texture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.envMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\r\n\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.size !== undefined ) data.size = this.size;\r\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\r\n\r\n\t\tif ( this.blending !== THREE.NormalBlending ) data.blending = this.blending;\r\n\t\tif ( this.shading !== THREE.SmoothShading ) data.shading = this.shading;\r\n\t\tif ( this.side !== THREE.FrontSide ) data.side = this.side;\r\n\t\tif ( this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;\r\n\r\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\r\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\r\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\r\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\r\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\r\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache ( cache ) {\r\n\r\n\t\t\tvar values = [];\r\n\r\n\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\tvar images = extractFromCache( meta.images );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.fog = source.fog;\r\n\t\tthis.lights = source.lights;\r\n\r\n\t\tthis.blending = source.blending;\r\n\t\tthis.side = source.side;\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\r\n\t\tthis.opacity = source.opacity;\r\n\t\tthis.transparent = source.transparent;\r\n\r\n\t\tthis.blendSrc = source.blendSrc;\r\n\t\tthis.blendDst = source.blendDst;\r\n\t\tthis.blendEquation = source.blendEquation;\r\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\r\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\r\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\r\n\r\n\t\tthis.depthFunc = source.depthFunc;\r\n\t\tthis.depthTest = source.depthTest;\r\n\t\tthis.depthWrite = source.depthWrite;\r\n\r\n\t\tthis.colorWrite = source.colorWrite;\r\n\r\n\t\tthis.precision = source.precision;\r\n\r\n\t\tthis.polygonOffset = source.polygonOffset;\r\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\r\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\r\n\r\n\t\tthis.alphaTest = source.alphaTest;\r\n\r\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\r\n\r\n\t\tthis.overdraw = source.overdraw;\r\n\r\n\t\tthis.visible = source.visible;\r\n\t\tthis.clipShadows = source.clipShadows;\r\n\r\n\t\tvar srcPlanes = source.clippingPlanes,\r\n\t\t\tdstPlanes = null;\r\n\r\n\t\tif ( srcPlanes !== null ) {\r\n\r\n\t\t\tvar n = srcPlanes.length;\r\n\t\t\tdstPlanes = new Array( n );\r\n\r\n\t\t\tfor ( var i = 0; i !== n; ++ i )\r\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\r\n\r\n\t\t}\r\n\r\n\t\tthis.clippingPlanes = dstPlanes;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tupdate: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'update' } );\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nObject.assign( THREE.Material.prototype, THREE.EventDispatcher.prototype );\r\n\r\nTHREE.MaterialIdCount = 0;\r\n\r\n// File:src/materials/LineBasicMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  linewidth: <float>,\r\n *  linecap: \"round\",\r\n *  linejoin: \"round\"\r\n * }\r\n */\r\n\r\nTHREE.LineBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'LineBasicMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.linewidth = 1;\r\n\tthis.linecap = 'round';\r\n\tthis.linejoin = 'round';\r\n\r\n\tthis.lights = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\r\n\r\nTHREE.LineBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.linewidth = source.linewidth;\r\n\tthis.linecap = source.linecap;\r\n\tthis.linejoin = source.linejoin;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/LineDashedMaterial.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  linewidth: <float>,\r\n *\r\n *  scale: <float>,\r\n *  dashSize: <float>,\r\n *  gapSize: <float>\r\n * }\r\n */\r\n\r\nTHREE.LineDashedMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'LineDashedMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.linewidth = 1;\r\n\r\n\tthis.scale = 1;\r\n\tthis.dashSize = 3;\r\n\tthis.gapSize = 1;\r\n\r\n\tthis.lights = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\r\n\r\nTHREE.LineDashedMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.linewidth = source.linewidth;\r\n\r\n\tthis.scale = source.scale;\r\n\tthis.dashSize = source.dashSize;\r\n\tthis.gapSize = source.gapSize;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshBasicMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshBasicMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // emissive\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.aoMap = null;\r\n\tthis.aoMapIntensity = 1.0;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\r\n\tthis.lights = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\r\n\r\nTHREE.MeshBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.aoMap = source.aoMap;\r\n\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\tthis.specularMap = source.specularMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.combine = source.combine;\r\n\tthis.reflectivity = source.reflectivity;\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshDepthMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author bhouston / https://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * parameters = {\r\n *\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  displacementMap: new THREE.Texture( <Image> ),\r\n *  displacementScale: <float>,\r\n *  displacementBias: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshDepthMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshDepthMaterial';\r\n\r\n\tthis.depthPacking = THREE.BasicDepthPacking;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.displacementMap = null;\r\n\tthis.displacementScale = 1;\r\n\tthis.displacementBias = 0;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.fog = false;\r\n\tthis.lights = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\r\n\r\nTHREE.MeshDepthMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.depthPacking = source.depthPacking;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.displacementMap = source.displacementMap;\r\n\tthis.displacementScale = source.displacementScale;\r\n\tthis.displacementBias = source.displacementBias;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshLambertMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissive: <hex>,\r\n *  emissiveIntensity: <float>\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshLambertMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshLambertMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\tthis.lightMapIntensity = 1.0;\r\n\r\n\tthis.aoMap = null;\r\n\tthis.aoMapIntensity = 1.0;\r\n\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\tthis.emissiveIntensity = 1.0;\r\n\tthis.emissiveMap = null;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\r\n\r\nTHREE.MeshLambertMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.lightMap = source.lightMap;\r\n\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\tthis.aoMap = source.aoMap;\r\n\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\tthis.emissive.copy( source.emissive );\r\n\tthis.emissiveMap = source.emissiveMap;\r\n\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\tthis.specularMap = source.specularMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.combine = source.combine;\r\n\tthis.reflectivity = source.reflectivity;\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshNormalMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * parameters = {\r\n *  opacity: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshNormalMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this, parameters );\r\n\r\n\tthis.type = 'MeshNormalMaterial';\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.fog = false;\r\n\tthis.lights = false;\r\n\tthis.morphTargets = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\r\n\r\nTHREE.MeshNormalMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshPhongMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  specular: <hex>,\r\n *  shininess: <float>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissive: <hex>,\r\n *  emissiveIntensity: <float>\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  bumpMap: new THREE.Texture( <Image> ),\r\n *  bumpScale: <float>,\r\n *\r\n *  normalMap: new THREE.Texture( <Image> ),\r\n *  normalScale: <Vector2>,\r\n *\r\n *  displacementMap: new THREE.Texture( <Image> ),\r\n *  displacementScale: <float>,\r\n *  displacementBias: <float>,\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshPhongMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshPhongMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\tthis.specular = new THREE.Color( 0x111111 );\r\n\tthis.shininess = 30;\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\tthis.lightMapIntensity = 1.0;\r\n\r\n\tthis.aoMap = null;\r\n\tthis.aoMapIntensity = 1.0;\r\n\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\tthis.emissiveIntensity = 1.0;\r\n\tthis.emissiveMap = null;\r\n\r\n\tthis.bumpMap = null;\r\n\tthis.bumpScale = 1;\r\n\r\n\tthis.normalMap = null;\r\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.displacementMap = null;\r\n\tthis.displacementScale = 1;\r\n\tthis.displacementBias = 0;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\r\n\r\nTHREE.MeshPhongMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\tthis.specular.copy( source.specular );\r\n\tthis.shininess = source.shininess;\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.lightMap = source.lightMap;\r\n\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\tthis.aoMap = source.aoMap;\r\n\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\tthis.emissive.copy( source.emissive );\r\n\tthis.emissiveMap = source.emissiveMap;\r\n\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\tthis.bumpMap = source.bumpMap;\r\n\tthis.bumpScale = source.bumpScale;\r\n\r\n\tthis.normalMap = source.normalMap;\r\n\tthis.normalScale.copy( source.normalScale );\r\n\r\n\tthis.displacementMap = source.displacementMap;\r\n\tthis.displacementScale = source.displacementScale;\r\n\tthis.displacementBias = source.displacementBias;\r\n\r\n\tthis.specularMap = source.specularMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.combine = source.combine;\r\n\tthis.reflectivity = source.reflectivity;\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshStandardMaterial.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  roughness: <float>,\r\n *  metalness: <float>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissive: <hex>,\r\n *  emissiveIntensity: <float>\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  bumpMap: new THREE.Texture( <Image> ),\r\n *  bumpScale: <float>,\r\n *\r\n *  normalMap: new THREE.Texture( <Image> ),\r\n *  normalScale: <Vector2>,\r\n *\r\n *  displacementMap: new THREE.Texture( <Image> ),\r\n *  displacementScale: <float>,\r\n *  displacementBias: <float>,\r\n *\r\n *  roughnessMap: new THREE.Texture( <Image> ),\r\n *\r\n *  metalnessMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n *  envMapIntensity: <float>\r\n *\r\n *  refractionRatio: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshStandardMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.defines = { 'STANDARD': '' };\r\n\r\n\tthis.type = 'MeshStandardMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\tthis.roughness = 0.5;\r\n\tthis.metalness = 0.5;\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\tthis.lightMapIntensity = 1.0;\r\n\r\n\tthis.aoMap = null;\r\n\tthis.aoMapIntensity = 1.0;\r\n\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\tthis.emissiveIntensity = 1.0;\r\n\tthis.emissiveMap = null;\r\n\r\n\tthis.bumpMap = null;\r\n\tthis.bumpScale = 1;\r\n\r\n\tthis.normalMap = null;\r\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.displacementMap = null;\r\n\tthis.displacementScale = 1;\r\n\tthis.displacementBias = 0;\r\n\r\n\tthis.roughnessMap = null;\r\n\r\n\tthis.metalnessMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.envMapIntensity = 1.0;\r\n\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshStandardMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;\r\n\r\nTHREE.MeshStandardMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.defines = { 'STANDARD': '' };\r\n\r\n\tthis.color.copy( source.color );\r\n\tthis.roughness = source.roughness;\r\n\tthis.metalness = source.metalness;\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.lightMap = source.lightMap;\r\n\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\tthis.aoMap = source.aoMap;\r\n\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\tthis.emissive.copy( source.emissive );\r\n\tthis.emissiveMap = source.emissiveMap;\r\n\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\tthis.bumpMap = source.bumpMap;\r\n\tthis.bumpScale = source.bumpScale;\r\n\r\n\tthis.normalMap = source.normalMap;\r\n\tthis.normalScale.copy( source.normalScale );\r\n\r\n\tthis.displacementMap = source.displacementMap;\r\n\tthis.displacementScale = source.displacementScale;\r\n\tthis.displacementBias = source.displacementBias;\r\n\r\n\tthis.roughnessMap = source.roughnessMap;\r\n\r\n\tthis.metalnessMap = source.metalnessMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.envMapIntensity = source.envMapIntensity;\r\n\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshPhysicalMaterial.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * parameters = {\r\n *  reflectivity: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshPhysicalMaterial = function ( parameters ) {\r\n\r\n\tTHREE.MeshStandardMaterial.call( this );\r\n\r\n\tthis.defines = { 'PHYSICAL': '' };\r\n\r\n\tthis.type = 'MeshPhysicalMaterial';\r\n\r\n\tthis.reflectivity = 0.5; // maps to F0 = 0.04\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshPhysicalMaterial.prototype = Object.create( THREE.MeshStandardMaterial.prototype );\r\nTHREE.MeshPhysicalMaterial.prototype.constructor = THREE.MeshPhysicalMaterial;\r\n\r\nTHREE.MeshPhysicalMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.MeshStandardMaterial.prototype.copy.call( this, source );\r\n\r\n\tthis.defines = { 'PHYSICAL': '' };\r\n\r\n\tthis.reflectivity = source.reflectivity;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MultiMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.MultiMaterial = function ( materials ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.type = 'MultiMaterial';\r\n\r\n\tthis.materials = materials instanceof Array ? materials : [];\r\n\r\n\tthis.visible = true;\r\n\r\n};\r\n\r\nTHREE.MultiMaterial.prototype = {\r\n\r\n\tconstructor: THREE.MultiMaterial,\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar output = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.2,\r\n\t\t\t\ttype: 'material',\r\n\t\t\t\tgenerator: 'MaterialExporter'\r\n\t\t\t},\r\n\t\t\tuuid: this.uuid,\r\n\t\t\ttype: this.type,\r\n\t\t\tmaterials: []\r\n\t\t};\r\n\r\n\t\tvar materials = this.materials;\r\n\r\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar material = materials[ i ].toJSON( meta );\r\n\t\t\tdelete material.metadata;\r\n\r\n\t\t\toutput.materials.push( material );\r\n\r\n\t\t}\r\n\r\n\t\toutput.visible = this.visible;\r\n\r\n\t\treturn output;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar material = new this.constructor();\r\n\r\n\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\r\n\r\n\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tmaterial.visible = this.visible;\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/materials/PointsMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  size: <float>,\r\n *  sizeAttenuation: <bool>\r\n * }\r\n */\r\n\r\nTHREE.PointsMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'PointsMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.size = 1;\r\n\tthis.sizeAttenuation = true;\r\n\r\n\tthis.lights = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\r\n\r\nTHREE.PointsMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.size = source.size;\r\n\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/ShaderMaterial.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  defines: { \"label\" : \"value\" },\r\n *  uniforms: { \"parameter1\": { type: \"1f\", value: 1.0 }, \"parameter2\": { type: \"1i\" value2: 2 } },\r\n *\r\n *  fragmentShader: <string>,\r\n *  vertexShader: <string>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  lights: <bool>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>\r\n * }\r\n */\r\n\r\nTHREE.ShaderMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'ShaderMaterial';\r\n\r\n\tthis.defines = {};\r\n\tthis.uniforms = {};\r\n\r\n\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\r\n\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\r\n\r\n\tthis.linewidth = 1;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.fog = false; // set to use scene fog\r\n\tthis.lights = false; // set to use scene lights\r\n\tthis.clipping = false; // set to use user-defined clipping planes\r\n\r\n\tthis.skinning = false; // set to use skinning attribute streams\r\n\tthis.morphTargets = false; // set to use morph targets\r\n\tthis.morphNormals = false; // set to use morph normals\r\n\r\n\tthis.extensions = {\r\n\t\tderivatives: false, // set to use derivatives\r\n\t\tfragDepth: false, // set to use fragment depth values\r\n\t\tdrawBuffers: false, // set to use draw buffers\r\n\t\tshaderTextureLOD: false // set to use shader texture LOD\r\n\t};\r\n\r\n\t// When rendered geometry doesn't include these attributes but the material does,\r\n\t// use these default values in WebGL. This avoids errors when buffer data is missing.\r\n\tthis.defaultAttributeValues = {\r\n\t\t'color': [ 1, 1, 1 ],\r\n\t\t'uv': [ 0, 0 ],\r\n\t\t'uv2': [ 0, 0 ]\r\n\t};\r\n\r\n\tthis.index0AttributeName = undefined;\r\n\r\n\tif ( parameters !== undefined ) {\r\n\r\n\t\tif ( parameters.attributes !== undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\r\n\r\nTHREE.ShaderMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.fragmentShader = source.fragmentShader;\r\n\tthis.vertexShader = source.vertexShader;\r\n\r\n\tthis.uniforms = THREE.UniformsUtils.clone( source.uniforms );\r\n\r\n\tthis.defines = source.defines;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\tthis.lights = source.lights;\r\n\tthis.clipping = source.clipping;\r\n\r\n\tthis.skinning = source.skinning;\r\n\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\tthis.extensions = source.extensions;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.ShaderMaterial.prototype.toJSON = function ( meta ) {\r\n\r\n\tvar data = THREE.Material.prototype.toJSON.call( this, meta );\r\n\r\n\tdata.uniforms = this.uniforms;\r\n\tdata.vertexShader = this.vertexShader;\r\n\tdata.fragmentShader = this.fragmentShader;\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\n// File:src/materials/RawShaderMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RawShaderMaterial = function ( parameters ) {\r\n\r\n\tTHREE.ShaderMaterial.call( this, parameters );\r\n\r\n\tthis.type = 'RawShaderMaterial';\r\n\r\n};\r\n\r\nTHREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\r\nTHREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;\r\n\r\n// File:src/materials/SpriteMaterial.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *\tuvOffset: new THREE.Vector2(),\r\n *\tuvScale: new THREE.Vector2()\r\n * }\r\n */\r\n\r\nTHREE.SpriteMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'SpriteMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\tthis.map = null;\r\n\r\n\tthis.rotation = 0;\r\n\r\n\tthis.fog = false;\r\n\tthis.lights = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\r\n\r\nTHREE.SpriteMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\tthis.map = source.map;\r\n\r\n\tthis.rotation = source.rotation;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/ShadowMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ShadowMaterial = function () {\r\n\r\n\tTHREE.ShaderMaterial.call( this, {\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\t{\r\n\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t}\r\n\t\t] ),\r\n\t\tvertexShader: THREE.ShaderChunk[ 'shadow_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'shadow_frag' ]\r\n\t} );\r\n\r\n\tthis.lights = true;\r\n\tthis.transparent = true;\r\n\r\n\tObject.defineProperties( this, {\r\n\t\topacity: {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function () {\r\n\t\t\t\treturn this.uniforms.opacity.value;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tthis.uniforms.opacity.value = value;\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\r\n};\r\n\r\nTHREE.ShadowMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\r\nTHREE.ShadowMaterial.prototype.constructor = THREE.ShadowMaterial;\r\n\r\n// File:src/textures/Texture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n */\r\n\r\nTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.sourceFile = '';\r\n\r\n\tthis.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\r\n\tthis.mipmaps = [];\r\n\r\n\tthis.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\r\n\r\n\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\r\n\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\r\n\r\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\r\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\r\n\r\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\r\n\r\n\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\r\n\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\r\n\r\n\tthis.offset = new THREE.Vector2( 0, 0 );\r\n\tthis.repeat = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.generateMipmaps = true;\r\n\tthis.premultiplyAlpha = false;\r\n\tthis.flipY = true;\r\n\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\r\n\r\n\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\r\n\t//\r\n\t// Also changing the encoding after already used by a Material will not automatically make the Material\r\n\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\r\n\tthis.encoding = encoding !== undefined ? encoding :  THREE.LinearEncoding;\r\n\r\n\tthis.version = 0;\r\n\tthis.onUpdate = null;\r\n\r\n};\r\n\r\nTHREE.Texture.DEFAULT_IMAGE = undefined;\r\nTHREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\r\n\r\nTHREE.Texture.prototype = {\r\n\r\n\tconstructor: THREE.Texture,\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.image = source.image;\r\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\r\n\r\n\t\tthis.mapping = source.mapping;\r\n\r\n\t\tthis.wrapS = source.wrapS;\r\n\t\tthis.wrapT = source.wrapT;\r\n\r\n\t\tthis.magFilter = source.magFilter;\r\n\t\tthis.minFilter = source.minFilter;\r\n\r\n\t\tthis.anisotropy = source.anisotropy;\r\n\r\n\t\tthis.format = source.format;\r\n\t\tthis.type = source.type;\r\n\r\n\t\tthis.offset.copy( source.offset );\r\n\t\tthis.repeat.copy( source.repeat );\r\n\r\n\t\tthis.generateMipmaps = source.generateMipmaps;\r\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\r\n\t\tthis.flipY = source.flipY;\r\n\t\tthis.unpackAlignment = source.unpackAlignment;\r\n\t\tthis.encoding = source.encoding;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\treturn meta.textures[ this.uuid ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getDataURL( image ) {\r\n\r\n\t\t\tvar canvas;\r\n\r\n\t\t\tif ( image.toDataURL !== undefined ) {\r\n\r\n\t\t\t\tcanvas = image;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcanvas = document.createElement( 'canvas' );\r\n\t\t\t\tcanvas.width = image.width;\r\n\t\t\t\tcanvas.height = image.height;\r\n\r\n\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar output = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Texture',\r\n\t\t\t\tgenerator: 'Texture.toJSON'\r\n\t\t\t},\r\n\r\n\t\t\tuuid: this.uuid,\r\n\t\t\tname: this.name,\r\n\r\n\t\t\tmapping: this.mapping,\r\n\r\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\r\n\t\t\toffset: [ this.offset.x, this.offset.y ],\r\n\t\t\twrap: [ this.wrapS, this.wrapT ],\r\n\r\n\t\t\tminFilter: this.minFilter,\r\n\t\t\tmagFilter: this.magFilter,\r\n\t\t\tanisotropy: this.anisotropy\r\n\t\t};\r\n\r\n\t\tif ( this.image !== undefined ) {\r\n\r\n\t\t\t// TODO: Move to THREE.Image\r\n\r\n\t\t\tvar image = this.image;\r\n\r\n\t\t\tif ( image.uuid === undefined ) {\r\n\r\n\t\t\t\timage.uuid = THREE.Math.generateUUID(); // UGH\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\r\n\r\n\t\t\t\tmeta.images[ image.uuid ] = {\r\n\t\t\t\t\tuuid: image.uuid,\r\n\t\t\t\t\turl: getDataURL( image )\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput.image = image.uuid;\r\n\r\n\t\t}\r\n\r\n\t\tmeta.textures[ this.uuid ] = output;\r\n\r\n\t\treturn output;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t},\r\n\r\n\ttransformUv: function ( uv ) {\r\n\r\n\t\tif ( this.mapping !== THREE.UVMapping )  return;\r\n\r\n\t\tuv.multiply( this.repeat );\r\n\t\tuv.add( this.offset );\r\n\r\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\r\n\r\n\t\t\tswitch ( this.wrapS ) {\r\n\r\n\t\t\t\tcase THREE.RepeatWrapping:\r\n\r\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\r\n\r\n\t\t\tswitch ( this.wrapT ) {\r\n\r\n\t\t\t\tcase THREE.RepeatWrapping:\r\n\r\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.flipY ) {\r\n\r\n\t\t\tuv.y = 1 - uv.y;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nObject.assign( THREE.Texture.prototype, THREE.EventDispatcher.prototype );\r\n\r\nTHREE.TextureIdCount = 0;\r\n\r\n// File:src/textures/DepthTexture.js\r\n\r\n/**\r\n * @author Matt DesLauriers / @mattdesl\r\n */\r\n\r\nTHREE.DepthTexture = function ( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\r\n  THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, THREE.DepthFormat, type, anisotropy );\r\n\r\n  this.image = { width: width, height: height };\r\n\r\n  this.type = type !== undefined ? type : THREE.UnsignedShortType;\r\n\r\n  this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\r\n  this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\r\n\r\n  this.flipY = false;\r\n  this.generateMipmaps  = false;\r\n\r\n};\r\n\r\nTHREE.DepthTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.DepthTexture.prototype.constructor = THREE.DepthTexture;\r\n\r\n// File:src/textures/CanvasTexture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.needsUpdate = true;\r\n\r\n};\r\n\r\nTHREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;\r\n\r\n// File:src/textures/CubeTexture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\r\n\r\n\timages = images !== undefined ? images : [];\r\n\tmapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\r\n\r\n\tTHREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\tthis.flipY = false;\r\n\r\n};\r\n\r\nTHREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\r\n\r\nObject.defineProperty( THREE.CubeTexture.prototype, 'images', {\r\n\r\n\tget: function () {\r\n\r\n\t\treturn this.image;\r\n\r\n\t},\r\n\r\n\tset: function ( value ) {\r\n\r\n\t\tthis.image = value;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/textures/CompressedTexture.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\r\n\r\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\tthis.image = { width: width, height: height };\r\n\tthis.mipmaps = mipmaps;\r\n\r\n\t// no flipping for cube textures\r\n\t// (also flipping doesn't work for compressed textures )\r\n\r\n\tthis.flipY = false;\r\n\r\n\t// can't generate mipmaps for compressed textures\r\n\t// mips must be embedded in DDS files\r\n\r\n\tthis.generateMipmaps = false;\r\n\r\n};\r\n\r\nTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;\r\n\r\n// File:src/textures/DataTexture.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\r\n\r\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\tthis.image = { data: data, width: width, height: height };\r\n\r\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\r\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\r\n\r\n\tthis.flipY = false;\r\n\tthis.generateMipmaps  = false;\r\n\r\n};\r\n\r\nTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.DataTexture.prototype.constructor = THREE.DataTexture;\r\n\r\n// File:src/textures/VideoTexture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.generateMipmaps = false;\r\n\r\n\tvar scope = this;\r\n\r\n\tfunction update() {\r\n\r\n\t\trequestAnimationFrame( update );\r\n\r\n\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\r\n\r\n\t\t\tscope.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate();\r\n\r\n};\r\n\r\nTHREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.VideoTexture.prototype.constructor = THREE.VideoTexture;\r\n\r\n// File:src/objects/Group.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Group = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Group';\r\n\r\n};\r\n\r\nTHREE.Group.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Group\r\n\r\n} );\r\n\r\n// File:src/objects/Points.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Points = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Points';\r\n\r\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\r\n\tthis.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n};\r\n\r\nTHREE.Points.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Points,\r\n\r\n\traycast: ( function () {\r\n\r\n\t\tvar inverseMatrix = new THREE.Matrix4();\r\n\t\tvar ray = new THREE.Ray();\r\n\t\tvar sphere = new THREE.Sphere();\r\n\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\tvar object = this;\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\t\t\tvar threshold = raycaster.params.Points.threshold;\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\tsphere.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\r\n\t\t\tvar position = new THREE.Vector3();\r\n\r\n\t\t\tfunction testPoint( point, index ) {\r\n\r\n\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\r\n\r\n\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\r\n\r\n\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\r\n\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\r\n\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\r\n\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\r\n\t\t\t\t\t\tpoint: intersectPoint.clone(),\r\n\t\t\t\t\t\tindex: index,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tobject: object\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar a = indices[ i ];\r\n\r\n\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\r\n\r\n\t\t\t\t\t\ttestPoint( position, a );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\r\n\r\n\t\t\t\t\t\ttestPoint( position, i );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\ttestPoint( vertices[ i ], i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}() ),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/Line.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Line = function ( geometry, material, mode ) {\r\n\r\n\tif ( mode === 1 ) {\r\n\r\n\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\r\n\t\treturn new THREE.LineSegments( geometry, material );\r\n\r\n\t}\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Line';\r\n\r\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\r\n\tthis.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n};\r\n\r\nTHREE.Line.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Line,\r\n\r\n\traycast: ( function () {\r\n\r\n\t\tvar inverseMatrix = new THREE.Matrix4();\r\n\t\tvar ray = new THREE.Ray();\r\n\t\tvar sphere = new THREE.Sphere();\r\n\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\tvar precision = raycaster.linePrecision;\r\n\t\t\tvar precisionSq = precision * precision;\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\tsphere.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\t\tvar vStart = new THREE.Vector3();\r\n\t\t\tvar vEnd = new THREE.Vector3();\r\n\t\t\tvar interSegment = new THREE.Vector3();\r\n\t\t\tvar interRay = new THREE.Vector3();\r\n\t\t\tvar step = this instanceof THREE.LineSegments ? 2 : 1;\r\n\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\t\tvar a = indices[ i ];\r\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\r\n\r\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\r\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\r\n\r\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\r\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\r\n\r\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar nbVertices = vertices.length;\r\n\r\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\r\n\r\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\r\n\r\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}() ),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/LineSegments.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LineSegments = function ( geometry, material ) {\r\n\r\n\tTHREE.Line.call( this, geometry, material );\r\n\r\n\tthis.type = 'LineSegments';\r\n\r\n};\r\n\r\nTHREE.LineSegments.prototype = Object.assign( Object.create( THREE.Line.prototype ), {\r\n\r\n\tconstructor: THREE.LineSegments\r\n\r\n} );\r\n\r\n// File:src/objects/Mesh.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author jonobr1 / http://jonobr1.com/\r\n */\r\n\r\nTHREE.Mesh = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Mesh';\r\n\r\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\r\n\tthis.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\tthis.drawMode = THREE.TrianglesDrawMode;\r\n\r\n\tthis.updateMorphTargets();\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Mesh,\r\n\r\n\tsetDrawMode: function ( value ) {\r\n\r\n\t\tthis.drawMode = value;\r\n\r\n\t},\r\n\r\n\tupdateMorphTargets: function () {\r\n\r\n\t\tif ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {\r\n\r\n\t\t\tthis.morphTargetBase = - 1;\r\n\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetMorphTargetIndexByName: function ( name ) {\r\n\r\n\t\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\r\n\r\n\t\t\treturn this.morphTargetDictionary[ name ];\r\n\r\n\t\t}\r\n\r\n\t\tconsole.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );\r\n\r\n\t\treturn 0;\r\n\r\n\t},\r\n\r\n\traycast: ( function () {\r\n\r\n\t\tvar inverseMatrix = new THREE.Matrix4();\r\n\t\tvar ray = new THREE.Ray();\r\n\t\tvar sphere = new THREE.Sphere();\r\n\r\n\t\tvar vA = new THREE.Vector3();\r\n\t\tvar vB = new THREE.Vector3();\r\n\t\tvar vC = new THREE.Vector3();\r\n\r\n\t\tvar tempA = new THREE.Vector3();\r\n\t\tvar tempB = new THREE.Vector3();\r\n\t\tvar tempC = new THREE.Vector3();\r\n\r\n\t\tvar uvA = new THREE.Vector2();\r\n\t\tvar uvB = new THREE.Vector2();\r\n\t\tvar uvC = new THREE.Vector2();\r\n\r\n\t\tvar barycoord = new THREE.Vector3();\r\n\r\n\t\tvar intersectionPoint = new THREE.Vector3();\r\n\t\tvar intersectionPointWorld = new THREE.Vector3();\r\n\r\n\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\r\n\r\n\t\t\tTHREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\r\n\r\n\t\t\tuv1.multiplyScalar( barycoord.x );\r\n\t\t\tuv2.multiplyScalar( barycoord.y );\r\n\t\t\tuv3.multiplyScalar( barycoord.z );\r\n\r\n\t\t\tuv1.add( uv2 ).add( uv3 );\r\n\r\n\t\t\treturn uv1.clone();\r\n\r\n\t\t}\r\n\r\n\t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\r\n\r\n\t\t\tvar intersect;\r\n\t\t\tvar material = object.material;\r\n\r\n\t\t\tif ( material.side === THREE.BackSide ) {\r\n\r\n\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( intersect === null ) return null;\r\n\r\n\t\t\tintersectionPointWorld.copy( point );\r\n\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\r\n\r\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdistance: distance,\r\n\t\t\t\tpoint: intersectionPointWorld.clone(),\r\n\t\t\t\tobject: object\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\r\n\r\n\t\t\tvA.fromArray( positions, a * 3 );\r\n\t\t\tvB.fromArray( positions, b * 3 );\r\n\t\t\tvC.fromArray( positions, c * 3 );\r\n\r\n\t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\r\n\r\n\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\tif ( uvs ) {\r\n\r\n\t\t\t\t\tuvA.fromArray( uvs, a * 2 );\r\n\t\t\t\t\tuvB.fromArray( uvs, b * 2 );\r\n\t\t\t\t\tuvC.fromArray( uvs, c * 2 );\r\n\r\n\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tintersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );\r\n\t\t\t\tintersection.faceIndex = a;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn intersection;\r\n\r\n\t\t}\r\n\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar material = this.material;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\t\tif ( material === undefined ) return;\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\tsphere.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\t\t// Check boundingBox before continuing\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar uvs, intersection;\r\n\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tvar a, b, c;\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( attributes.uv !== undefined ) {\r\n\r\n\t\t\t\t\tuvs = attributes.uv.array;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\ta = indices[ i ];\r\n\t\t\t\t\t\tb = indices[ i + 1 ];\r\n\t\t\t\t\t\tc = indices[ i + 2 ];\r\n\r\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\r\n\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\r\n\r\n\t\t\t\t\t\ta = i / 3;\r\n\t\t\t\t\t\tb = a + 1;\r\n\t\t\t\t\t\tc = a + 2;\r\n\r\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\r\n\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\tvar fvA, fvB, fvC;\r\n\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\r\n\t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\r\n\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\r\n\r\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tvar face = faces[ f ];\r\n\t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\r\n\r\n\t\t\t\t\tif ( faceMaterial === undefined ) continue;\r\n\r\n\t\t\t\t\tfvA = vertices[ face.a ];\r\n\t\t\t\t\tfvB = vertices[ face.b ];\r\n\t\t\t\t\tfvC = vertices[ face.c ];\r\n\r\n\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\r\n\r\n\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\r\n\r\n\t\t\t\t\t\tvA.set( 0, 0, 0 );\r\n\t\t\t\t\t\tvB.set( 0, 0, 0 );\r\n\t\t\t\t\t\tvC.set( 0, 0, 0 );\r\n\r\n\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\r\n\r\n\t\t\t\t\t\t\tif ( influence === 0 ) continue;\r\n\r\n\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\r\n\r\n\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\r\n\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\r\n\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvA.add( fvA );\r\n\t\t\t\t\t\tvB.add( fvB );\r\n\t\t\t\t\t\tvC.add( fvC );\r\n\r\n\t\t\t\t\t\tfvA = vA;\r\n\t\t\t\t\t\tfvB = vB;\r\n\t\t\t\t\t\tfvC = vC;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tif ( uvs ) {\r\n\r\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\r\n\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\r\n\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\r\n\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\r\n\r\n\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tintersection.face = face;\r\n\t\t\t\t\t\tintersection.faceIndex = f;\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}() ),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/Bone.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.Bone = function ( skin ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Bone';\r\n\r\n\tthis.skin = skin;\r\n\r\n};\r\n\r\nTHREE.Bone.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Bone,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\t\tthis.skin = source.skin;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/Skeleton.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author michael guerrero / http://realitymeltdown.com\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {\r\n\r\n\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\r\n\r\n\tthis.identityMatrix = new THREE.Matrix4();\r\n\r\n\t// copy the bone array\r\n\r\n\tbones = bones || [];\r\n\r\n\tthis.bones = bones.slice( 0 );\r\n\r\n\t// create a bone texture or an array of floats\r\n\r\n\tif ( this.useVertexTexture ) {\r\n\r\n\t\t// layout (1 matrix = 4 pixels)\r\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\r\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\r\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\r\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\r\n\r\n\r\n\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\r\n\t\tsize = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );\r\n\t\tsize = Math.max( size, 4 );\r\n\r\n\t\tthis.boneTextureWidth = size;\r\n\t\tthis.boneTextureHeight = size;\r\n\r\n\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\r\n\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\r\n\r\n\t} else {\r\n\r\n\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\r\n\r\n\t}\r\n\r\n\t// use the supplied bone inverses or calculate the inverses\r\n\r\n\tif ( boneInverses === undefined ) {\r\n\r\n\t\tthis.calculateInverses();\r\n\r\n\t} else {\r\n\r\n\t\tif ( this.bones.length === boneInverses.length ) {\r\n\r\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\r\n\r\n\t\t\tthis.boneInverses = [];\r\n\r\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\t\tthis.boneInverses.push( new THREE.Matrix4() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nObject.assign( THREE.Skeleton.prototype, {\r\n\r\n\tcalculateInverses: function () {\r\n\r\n\t\tthis.boneInverses = [];\r\n\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\tvar inverse = new THREE.Matrix4();\r\n\r\n\t\t\tif ( this.bones[ b ] ) {\r\n\r\n\t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boneInverses.push( inverse );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tpose: function () {\r\n\r\n\t\tvar bone;\r\n\r\n\t\t// recover the bind-time world matrices\r\n\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\tbone = this.bones[ b ];\r\n\r\n\t\t\tif ( bone ) {\r\n\r\n\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// compute the local matrices, positions, rotations and scales\r\n\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\tbone = this.bones[ b ];\r\n\r\n\t\t\tif ( bone ) {\r\n\r\n\t\t\t\tif ( bone.parent ) {\r\n\r\n\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\r\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tupdate: ( function () {\r\n\r\n\t\tvar offsetMatrix = new THREE.Matrix4();\r\n\r\n\t\treturn function update() {\r\n\r\n\t\t\t// flatten bone matrices to array\r\n\r\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\t\t// compute the offset between the current and the original transform\r\n\r\n\t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\r\n\r\n\t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\r\n\t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.useVertexTexture ) {\r\n\r\n\t\t\t\tthis.boneTexture.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/SkinnedMesh.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.type = 'SkinnedMesh';\r\n\r\n\tthis.bindMode = \"attached\";\r\n\tthis.bindMatrix = new THREE.Matrix4();\r\n\tthis.bindMatrixInverse = new THREE.Matrix4();\r\n\r\n\t// init bones\r\n\r\n\t// TODO: remove bone creation as there is no reason (other than\r\n\t// convenience) for THREE.SkinnedMesh to do this.\r\n\r\n\tvar bones = [];\r\n\r\n\tif ( this.geometry && this.geometry.bones !== undefined ) {\r\n\r\n\t\tvar bone, gbone;\r\n\r\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\r\n\r\n\t\t\tgbone = this.geometry.bones[ b ];\r\n\r\n\t\t\tbone = new THREE.Bone( this );\r\n\t\t\tbones.push( bone );\r\n\r\n\t\t\tbone.name = gbone.name;\r\n\t\t\tbone.position.fromArray( gbone.pos );\r\n\t\t\tbone.quaternion.fromArray( gbone.rotq );\r\n\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\r\n\r\n\t\t\tgbone = this.geometry.bones[ b ];\r\n\r\n\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\r\n\t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\r\n\r\n\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.add( bones[ b ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.normalizeSkinWeights();\r\n\r\n\tthis.updateMatrixWorld( true );\r\n\tthis.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\r\n\r\n};\r\n\r\n\r\nTHREE.SkinnedMesh.prototype = Object.assign( Object.create( THREE.Mesh.prototype ), {\r\n\r\n\tconstructor: THREE.SkinnedMesh,\r\n\r\n\tbind: function( skeleton, bindMatrix ) {\r\n\r\n\t\tthis.skeleton = skeleton;\r\n\r\n\t\tif ( bindMatrix === undefined ) {\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.skeleton.calculateInverses();\r\n\r\n\t\t\tbindMatrix = this.matrixWorld;\r\n\r\n\t\t}\r\n\r\n\t\tthis.bindMatrix.copy( bindMatrix );\r\n\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\r\n\r\n\t},\r\n\r\n\tpose: function () {\r\n\r\n\t\tthis.skeleton.pose();\r\n\r\n\t},\r\n\r\n\tnormalizeSkinWeights: function () {\r\n\r\n\t\tif ( this.geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\r\n\r\n\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\r\n\r\n\t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\r\n\r\n\t\t\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\t\t\tsw.multiplyScalar( scale );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( this.geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tvar vec = new THREE.Vector4();\r\n\r\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\r\n\r\n\t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\r\n\r\n\t\t\t\tvec.x = skinWeight.getX( i );\r\n\t\t\t\tvec.y = skinWeight.getY( i );\r\n\t\t\t\tvec.z = skinWeight.getZ( i );\r\n\t\t\t\tvec.w = skinWeight.getW( i );\r\n\r\n\t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\r\n\r\n\t\t\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\t\t\tvec.multiplyScalar( scale );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tupdateMatrixWorld: function( force ) {\r\n\r\n\t\tTHREE.Mesh.prototype.updateMatrixWorld.call( this, true );\r\n\r\n\t\tif ( this.bindMode === \"attached\" ) {\r\n\r\n\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\r\n\r\n\t\t} else if ( this.bindMode === \"detached\" ) {\r\n\r\n\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function() {\r\n\r\n\t\treturn new this.constructor( this.geometry, this.material, this.useVertexTexture ).copy( this );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/LOD.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LOD = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'LOD';\r\n\r\n\tObject.defineProperties( this, {\r\n\t\tlevels: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: []\r\n\t\t}\r\n\t} );\r\n\r\n};\r\n\r\n\r\nTHREE.LOD.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.LOD,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source, false );\r\n\r\n\t\tvar levels = source.levels;\r\n\r\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar level = levels[ i ];\r\n\r\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddLevel: function ( object, distance ) {\r\n\r\n\t\tif ( distance === undefined ) distance = 0;\r\n\r\n\t\tdistance = Math.abs( distance );\r\n\r\n\t\tvar levels = this.levels;\r\n\r\n\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\tif ( distance < levels[ l ].distance ) {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\r\n\r\n\t\tthis.add( object );\r\n\r\n\t},\r\n\r\n\tgetObjectForDistance: function ( distance ) {\r\n\r\n\t\tvar levels = this.levels;\r\n\r\n\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( distance < levels[ i ].distance ) {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn levels[ i - 1 ].object;\r\n\r\n\t},\r\n\r\n\traycast: ( function () {\r\n\r\n\t\tvar matrixPosition = new THREE.Vector3();\r\n\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\r\n\r\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\r\n\r\n\t\t};\r\n\r\n\t}() ),\r\n\r\n\tupdate: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\r\n\t\treturn function update( camera ) {\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tif ( levels.length > 1 ) {\r\n\r\n\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\t\tvar distance = v1.distanceTo( v2 );\r\n\r\n\t\t\t\tlevels[ 0 ].object.visible = true;\r\n\r\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\r\n\r\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\r\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( ; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tlevels[ i ].object.visible = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\tdata.object.levels = [];\r\n\r\n\t\tvar levels = this.levels;\r\n\r\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar level = levels[ i ];\r\n\r\n\t\t\tdata.object.levels.push( {\r\n\t\t\t\tobject: level.object.uuid,\r\n\t\t\t\tdistance: level.distance\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/Sprite.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Sprite = function ( material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Sprite';\r\n\r\n\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\r\n\r\n};\r\n\r\nTHREE.Sprite.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Sprite,\r\n\r\n\traycast: ( function () {\r\n\r\n\t\tvar matrixPosition = new THREE.Vector3();\r\n\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\r\n\t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\r\n\r\n\t\t\tif ( distanceSq > guessSizeSq ) {\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersects.push( {\r\n\r\n\t\t\t\tdistance: Math.sqrt( distanceSq ),\r\n\t\t\t\tpoint: this.position,\r\n\t\t\t\tface: null,\r\n\t\t\t\tobject: this\r\n\r\n\t\t\t} );\r\n\r\n\t\t};\r\n\r\n\t}() ),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.material ).copy( this );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/LensFlare.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.lensFlares = [];\r\n\r\n\tthis.positionScreen = new THREE.Vector3();\r\n\tthis.customUpdateCallback = undefined;\r\n\r\n\tif ( texture !== undefined ) {\r\n\r\n\t\tthis.add( texture, size, distance, blending, color );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LensFlare.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.LensFlare,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\t\tthis.positionScreen.copy( source.positionScreen );\r\n\t\tthis.customUpdateCallback = source.customUpdateCallback;\r\n\r\n\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( texture, size, distance, blending, color, opacity ) {\r\n\r\n\t\tif ( size === undefined ) size = - 1;\r\n\t\tif ( distance === undefined ) distance = 0;\r\n\t\tif ( opacity === undefined ) opacity = 1;\r\n\t\tif ( color === undefined ) color = new THREE.Color( 0xffffff );\r\n\t\tif ( blending === undefined ) blending = THREE.NormalBlending;\r\n\r\n\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\r\n\r\n\t\tthis.lensFlares.push( {\r\n\t\t\ttexture: texture,\t// THREE.Texture\r\n\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\r\n\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\r\n\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\r\n\t\t\tscale: 1, \t\t// scale\r\n\t\t\trotation: 0, \t\t// rotation\r\n\t\t\topacity: opacity,\t// opacity\r\n\t\t\tcolor: color,\t\t// color\r\n\t\t\tblending: blending\t// blending\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\t/*\r\n\t * Update lens flares update positions on all flares based on the screen position\r\n\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\r\n\t */\r\n\r\n\tupdateLensFlares: function () {\r\n\r\n\t\tvar f, fl = this.lensFlares.length;\r\n\t\tvar flare;\r\n\t\tvar vecX = - this.positionScreen.x * 2;\r\n\t\tvar vecY = - this.positionScreen.y * 2;\r\n\r\n\t\tfor ( f = 0; f < fl; f ++ ) {\r\n\r\n\t\t\tflare = this.lensFlares[ f ];\r\n\r\n\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\r\n\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\r\n\r\n\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\r\n\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/scenes/Scene.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Scene = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Scene';\r\n\r\n\tthis.fog = null;\r\n\tthis.overrideMaterial = null;\r\n\r\n\tthis.autoUpdate = true; // checked by the renderer\r\n\r\n};\r\n\r\nTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Scene.prototype.constructor = THREE.Scene;\r\n\r\nTHREE.Scene.prototype.copy = function ( source, recursive ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source, recursive );\r\n\r\n\tif ( source.fog !== null ) this.fog = source.fog.clone();\r\n\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\r\n\r\n\tthis.autoUpdate = source.autoUpdate;\r\n\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/scenes/Fog.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Fog = function ( color, near, far ) {\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.color = new THREE.Color( color );\r\n\r\n\tthis.near = ( near !== undefined ) ? near : 1;\r\n\tthis.far = ( far !== undefined ) ? far : 1000;\r\n\r\n};\r\n\r\nTHREE.Fog.prototype.clone = function () {\r\n\r\n\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\r\n\r\n};\r\n\r\n// File:src/scenes/FogExp2.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.FogExp2 = function ( color, density ) {\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.color = new THREE.Color( color );\r\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\r\n\r\n};\r\n\r\nTHREE.FogExp2.prototype.clone = function () {\r\n\r\n\treturn new THREE.FogExp2( this.color.getHex(), this.density );\r\n\r\n};\r\n\r\n// File:src/renderers/shaders/ShaderChunk.js\r\n\r\nTHREE.ShaderChunk = {};\r\n\r\n// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'alphamap_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'alphamap_pars_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tuniform sampler2D alphaMap;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'alphatest_fragment' ] = \"#ifdef ALPHATEST\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'aomap_fragment' ] = \"#ifdef USE_AOMAP\\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'aomap_pars_fragment' ] = \"#ifdef USE_AOMAP\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'begin_vertex' ] = \"\\nvec3 transformed = vec3( position );\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'beginnormal_vertex' ] = \"\\nvec3 objectNormal = vec3( normal );\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/bsdfs.glsl\r\n\r\nTHREE.ShaderChunk[ 'bsdfs' ] = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\t\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\t\t}\\n\t\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat alpha = pow2( roughness );\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\tfloat D = D_GGX( alpha, dotNH );\\n\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\tvec4 r = roughness * c0 + c1;\\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_BlinnPhong_Implicit( );\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'bumpmap_pars_fragment' ] = \"#ifdef USE_BUMPMAP\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\tvec2 dHdxy_fwd() {\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\t\treturn vec2( dBx, dBy );\\n\t}\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'clipping_planes_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\t\tvec4 plane = clippingPlanes[ i ];\\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'clipping_planes_pars_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\t\tvarying vec3 vViewPosition;\\n\t#endif\\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'clipping_planes_pars_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvarying vec3 vViewPosition;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'clipping_planes_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_fragment' ] = \"#ifdef USE_COLOR\\n\tdiffuseColor.rgb *= vColor;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_pars_fragment' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_pars_vertex' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_vertex' ] = \"#ifdef USE_COLOR\\n\tvColor.xyz = color.xyz;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/common.glsl\r\n\r\nTHREE.ShaderChunk[ 'common' ] = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\tvec3 color;\\n\tvec3 direction;\\n\tbool visible;\\n};\\nstruct ReflectedLight {\\n\tvec3 directDiffuse;\\n\tvec3 directSpecular;\\n\tvec3 indirectDiffuse;\\n\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\tvec3 position;\\n\tvec3 normal;\\n\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'cube_uv_reflection_fragment' ] = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\tvec3 absDirection = abs(direction);\\n\tint face = -1;\\n\tif( absDirection.x > absDirection.z ) {\\n\t\tif(absDirection.x > absDirection.y )\\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\telse {\\n\t\tif(absDirection.z > absDirection.y )\\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\tfloat dxRoughness = dFdx(roughness);\\n\tfloat dyRoughness = dFdy(roughness);\\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\tfloat mipLevel = 0.5 * log2(d);\\n\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\tbool bRes = mipLevel == 0.0;\\n\tscale =  bRes && (scale < a) ? a : scale;\\n\tvec3 r;\\n\tvec2 offset;\\n\tint face = getFaceFromDirection(direction);\\n\tfloat rcpPowScale = 1.0 / powScale;\\n\tif( face == 0) {\\n\t\tr = vec3(direction.x, -direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 1) {\\n\t\tr = vec3(direction.y, direction.x, direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 2) {\\n\t\tr = vec3(direction.z, direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 3) {\\n\t\tr = vec3(direction.x, direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse if( face == 4) {\\n\t\tr = vec3(direction.y, direction.x, -direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse {\\n\t\tr = vec3(direction.z, -direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\tr = normalize(r);\\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\tvec2 base = offset + vec2( texelOffset );\\n\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\tfloat r1 = floor(roughnessVal);\\n\tfloat r2 = r1 + 1.0;\\n\tfloat t = fract(roughnessVal);\\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\tfloat s = mipInfo.y;\\n\tfloat level0 = mipInfo.x;\\n\tfloat level1 = level0 + 1.0;\\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\tvec4 result = mix(color10, color20, t);\\n\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'defaultnormal_vertex' ] = \"#ifdef FLIP_SIDED\\n\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'displacementmap_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'displacementmap_pars_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'emissivemap_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'emissivemap_pars_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tuniform sampler2D emissiveMap;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'encodings_pars_fragment' ] = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/encodings_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'encodings_fragment' ] = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_fragment' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#else\\n\t\tvec3 reflectVec = vReflect;\\n\t#endif\\n\t#ifdef DOUBLE_SIDED\\n\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t#else\\n\t\tfloat flipNormal = 1.0;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\tenvColor = envMapTexelToLinear( envColor );\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_pars_fragment' ] = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\tuniform float reflectivity;\\n\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\t\tvarying vec3 vWorldPosition;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\t\tuniform float refractionRatio;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_pars_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvarying vec3 vWorldPosition;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t\tuniform float refractionRatio;\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvWorldPosition = worldPosition.xyz;\\n\t#else\\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'fog_fragment' ] = \"#ifdef USE_FOG\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\t#else\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\t#endif\\n\t#ifdef FOG_EXP2\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\t#else\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\t#endif\\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'fog_pars_fragment' ] = \"#ifdef USE_FOG\\n\tuniform vec3 fogColor;\\n\t#ifdef FOG_EXP2\\n\t\tuniform float fogDensity;\\n\t#else\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lightmap_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lightmap_pars_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_lambert_vertex' ] = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\t\t#endif\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_pars.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_pars' ] = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\tvec3 irradiance = ambientLightColor;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\tstruct DirectionalLight {\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tdirectLight.color = directionalLight.color;\\n\t\tdirectLight.direction = directionalLight.direction;\\n\t\tdirectLight.visible = true;\\n\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\tstruct PointLight {\\n\t\tvec3 position;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tvec3 lVector = pointLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\t\t\tdirectLight.color = pointLight.color;\\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tstruct SpotLight {\\n\t\tvec3 position;\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tfloat coneCos;\\n\t\tfloat penumbraCos;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\t\tvec3 lVector = spotLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\t\t\tdirectLight.color = spotLight.color;\\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tstruct HemisphereLight {\\n\t\tvec3 direction;\\n\t\tvec3 skyColor;\\n\t\tvec3 groundColor;\\n\t};\\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tirradiance *= PI;\\n\t\t#endif\\n\t\treturn irradiance;\\n\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t\t#else\\n\t\t\tfloat flipNormal = 1.0;\\n\t\t#endif\\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\t\t#else\\n\t\t\tvec4 envMapColor = vec4( 0.0 );\\n\t\t#endif\\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\\n\t}\\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\t}\\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\t\t#endif\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t\t#else\\n\t\t\tfloat flipNormal = 1.0;\\n\t\t#endif\\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\t\tvec2 sampleUV;\\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#endif\\n\t\treturn envMapColor.rgb * envMapIntensity;\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_phong_fragment' ] = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_phong_pars_fragment' ] = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\tvec3\tdiffuseColor;\\n\tvec3\tspecularColor;\\n\tfloat\tspecularShininess;\\n\tfloat\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\t(0)\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_physical_fragment' ] = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\tmaterial.specularColor = mix( vec3( 0.16 * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_physical_pars_fragment' ] = \"struct PhysicalMaterial {\\n\tvec3\tdiffuseColor;\\n\tfloat\tspecularRoughness;\\n\tvec3\tspecularColor;\\n\t#ifndef STANDARD\\n\t#endif\\n};\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_template.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_template' ] = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\t#ifdef USE_LIGHTMAP\\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tlightMapIrradiance *= PI;\\n\t\t#endif\\n\t\tirradiance += lightMapIrradiance;\\n\t#endif\\n\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t}\\n\t#endif\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\t#endif\\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\tRE_IndirectSpecular( radiance, geometry, material, reflectedLight );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_fragment' ] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_pars_fragment' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tuniform float logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_pars_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n\tuniform float logDepthBufFC;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\t#else\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 texelColor = texture2D( map, vUv );\\n\ttexelColor = mapTexelToLinear( texelColor );\\n\tdiffuseColor *= texelColor;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform sampler2D map;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_particle_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_particle_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'metalnessmap_fragment' ] = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'metalnessmap_pars_fragment' ] = \"#ifdef USE_METALNESSMAP\\n\tuniform sampler2D metalnessMap;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'morphnormal_vertex' ] = \"#ifdef USE_MORPHNORMALS\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'morphtarget_pars_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\t#ifndef USE_MORPHNORMALS\\n\tuniform float morphTargetInfluences[ 8 ];\\n\t#else\\n\tuniform float morphTargetInfluences[ 4 ];\\n\t#endif\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'morphtarget_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\t#ifndef USE_MORPHNORMALS\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'normal_fragment' ] = \"#ifdef FLAT_SHADED\\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\tvec3 normal = normalize( vNormal );\\n\t#ifdef DOUBLE_SIDED\\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\\n\t#endif\\n#endif\\n#ifdef USE_NORMALMAP\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'normalmap_pars_fragment' ] = \"#ifdef USE_NORMALMAP\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/packing.glsl\r\n\r\nTHREE.ShaderChunk[ 'packing' ] = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthoDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat OrthoDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'premultiplied_alpha_fragment' ] = \"#ifdef PREMULTIPLIED_ALPHA\\n\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'project_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'roughnessmap_fragment' ] = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'roughnessmap_pars_fragment' ] = \"#ifdef USE_ROUGHNESSMAP\\n\tuniform sampler2D roughnessMap;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmap_pars_fragment' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\t}\\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\t\tvec2 f = fract( uv * size + 0.5 );\\n\t\tfloat a = mix( lb, lt, f.y );\\n\t\tfloat b = mix( rb, rt, f.y );\\n\t\tfloat c = mix( a, b, f.x );\\n\t\treturn c;\\n\t}\\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tshadowCoord.xyz /= shadowCoord.w;\\n\t\tshadowCoord.z += shadowBias;\\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\tbool inFrustum = all( inFrustumVec );\\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\t\tbool frustumTest = all( frustumTestVec );\\n\t\tif ( frustumTest ) {\\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\t\t#endif\\n\t\t}\\n\t\treturn 1.0;\\n\t}\\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\t\tvec3 absV = abs( v );\\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\tabsV *= scaleToCube;\\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\t\tvec2 planar = v.xy;\\n\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\tfloat almostOne = 1.0 - almostATexel;\\n\t\tif ( absV.z >= almostOne ) {\\n\t\t\tif ( v.z > 0.0 )\\n\t\t\t\tplanar.x = 4.0 - v.x;\\n\t\t} else if ( absV.x >= almostOne ) {\\n\t\t\tfloat signX = sign( v.x );\\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\t\t} else if ( absV.y >= almostOne ) {\\n\t\t\tfloat signY = sign( v.y );\\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\tplanar.y = v.z * signY - 2.0;\\n\t\t}\\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\t}\\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\t\tvec3 lightToPosition = shadowCoord.xyz;\\n\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\t\t#endif\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmap_pars_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmap_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmask_pars_fragment' ] = \"float getShadowMask() {\\n\tfloat shadow = 1.0;\\n\t#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#endif\\n\treturn shadow;\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinbase_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinning_pars_vertex' ] = \"#ifdef USE_SKINNING\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\t#ifdef BONE_TEXTURE\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\t\t\ty = dy * ( y + 0.5 );\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\t\t\treturn bone;\\n\t\t}\\n\t#else\\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\t\t}\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinning_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinnormal_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'specularmap_fragment' ] = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n#else\\n\tspecularStrength = 1.0;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'specularmap_pars_fragment' ] = \"#ifdef USE_SPECULARMAP\\n\tuniform sampler2D specularMap;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'tonemapping_fragment' ] = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'tonemapping_pars_fragment' ] = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv2_pars_fragment' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvarying vec2 vUv2;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv2_pars_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv2_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvUv2 = uv2;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv_pars_fragment' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv_pars_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'worldpos_vertex' ] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\t#ifdef USE_SKINNING\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\t#else\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/UniformsUtils.js\r\n\r\n/**\r\n * Uniform Utilities\r\n */\r\n\r\nTHREE.UniformsUtils = {\r\n\r\n\tmerge: function ( uniforms ) {\r\n\r\n\t\tvar merged = {};\r\n\r\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\r\n\r\n\t\t\tvar tmp = this.clone( uniforms[ u ] );\r\n\r\n\t\t\tfor ( var p in tmp ) {\r\n\r\n\t\t\t\tmerged[ p ] = tmp[ p ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn merged;\r\n\r\n\t},\r\n\r\n\tclone: function ( uniforms_src ) {\r\n\r\n\t\tvar uniforms_dst = {};\r\n\r\n\t\tfor ( var u in uniforms_src ) {\r\n\r\n\t\t\tuniforms_dst[ u ] = {};\r\n\r\n\t\t\tfor ( var p in uniforms_src[ u ] ) {\r\n\r\n\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\r\n\r\n\t\t\t\tif ( parameter_src instanceof THREE.Color ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Matrix3 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\r\n\r\n\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn uniforms_dst;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/shaders/UniformsLib.js\r\n\r\n/**\r\n * Uniforms library for shared webgl shaders\r\n */\r\n\r\nTHREE.UniformsLib = {\r\n\r\n\tcommon: {\r\n\r\n\t\t\"diffuse\": { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\"opacity\": { type: \"1f\", value: 1.0 },\r\n\r\n\t\t\"map\": { type: \"t\", value: null },\r\n\t\t\"offsetRepeat\": { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\r\n\r\n\t\t\"specularMap\": { type: \"t\", value: null },\r\n\t\t\"alphaMap\": { type: \"t\", value: null },\r\n\r\n\t\t\"envMap\": { type: \"t\", value: null },\r\n\t\t\"flipEnvMap\": { type: \"1f\", value: - 1 },\r\n\t\t\"reflectivity\": { type: \"1f\", value: 1.0 },\r\n\t\t\"refractionRatio\": { type: \"1f\", value: 0.98 }\r\n\r\n\t},\r\n\r\n\taomap: {\r\n\r\n\t\t\"aoMap\": { type: \"t\", value: null },\r\n\t\t\"aoMapIntensity\": { type: \"1f\", value: 1 }\r\n\r\n\t},\r\n\r\n\tlightmap: {\r\n\r\n\t\t\"lightMap\": { type: \"t\", value: null },\r\n\t\t\"lightMapIntensity\": { type: \"1f\", value: 1 }\r\n\r\n\t},\r\n\r\n\temissivemap: {\r\n\r\n\t\t\"emissiveMap\": { type: \"t\", value: null }\r\n\r\n\t},\r\n\r\n\tbumpmap: {\r\n\r\n\t\t\"bumpMap\": { type: \"t\", value: null },\r\n\t\t\"bumpScale\": { type: \"1f\", value: 1 }\r\n\r\n\t},\r\n\r\n\tnormalmap: {\r\n\r\n\t\t\"normalMap\": { type: \"t\", value: null },\r\n\t\t\"normalScale\": { type: \"v2\", value: new THREE.Vector2( 1, 1 ) }\r\n\r\n\t},\r\n\r\n\tdisplacementmap: {\r\n\r\n\t\t\"displacementMap\": { type: \"t\", value: null },\r\n\t\t\"displacementScale\": { type: \"1f\", value: 1 },\r\n\t\t\"displacementBias\": { type: \"1f\", value: 0 }\r\n\r\n\t},\r\n\r\n\troughnessmap: {\r\n\r\n\t\t\"roughnessMap\": { type: \"t\", value: null }\r\n\r\n\t},\r\n\r\n\tmetalnessmap: {\r\n\r\n\t\t\"metalnessMap\": { type: \"t\", value: null }\r\n\r\n\t},\r\n\r\n\tfog: {\r\n\r\n\t\t\"fogDensity\": { type: \"1f\", value: 0.00025 },\r\n\t\t\"fogNear\": { type: \"1f\", value: 1 },\r\n\t\t\"fogFar\": { type: \"1f\", value: 2000 },\r\n\t\t\"fogColor\": { type: \"c\", value: new THREE.Color( 0xffffff ) }\r\n\r\n\t},\r\n\r\n\tlights: {\r\n\r\n\t\t\"ambientLightColor\": { type: \"3fv\", value: [] },\r\n\r\n\t\t\"directionalLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\"direction\": { type: \"v3\" },\r\n\t\t\t\"color\": { type: \"c\" },\r\n\r\n\t\t\t\"shadow\": { type: \"1i\" },\r\n\t\t\t\"shadowBias\": { type: \"1f\" },\r\n\t\t\t\"shadowRadius\": { type: \"1f\" },\r\n\t\t\t\"shadowMapSize\": { type: \"v2\" }\r\n\t\t} },\r\n\r\n\t\t\"directionalShadowMap\": { type: \"tv\", value: [] },\r\n\t\t\"directionalShadowMatrix\": { type: \"m4v\", value: [] },\r\n\r\n\t\t\"spotLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\"color\": { type: \"c\" },\r\n\t\t\t\"position\": { type: \"v3\" },\r\n\t\t\t\"direction\": { type: \"v3\" },\r\n\t\t\t\"distance\": { type: \"1f\" },\r\n\t\t\t\"coneCos\": { type: \"1f\" },\r\n\t\t\t\"penumbraCos\": { type: \"1f\" },\r\n\t\t\t\"decay\": { type: \"1f\" },\r\n\r\n\t\t\t\"shadow\": { type: \"1i\" },\r\n\t\t\t\"shadowBias\": { type: \"1f\" },\r\n\t\t\t\"shadowRadius\": { type: \"1f\" },\r\n\t\t\t\"shadowMapSize\": { type: \"v2\" }\r\n\t\t} },\r\n\r\n\t\t\"spotShadowMap\": { type: \"tv\", value: [] },\r\n\t\t\"spotShadowMatrix\": { type: \"m4v\", value: [] },\r\n\r\n\t\t\"pointLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\"color\": { type: \"c\" },\r\n\t\t\t\"position\": { type: \"v3\" },\r\n\t\t\t\"decay\": { type: \"1f\" },\r\n\t\t\t\"distance\": { type: \"1f\" },\r\n\r\n\t\t\t\"shadow\": { type: \"1i\" },\r\n\t\t\t\"shadowBias\": { type: \"1f\" },\r\n\t\t\t\"shadowRadius\": { type: \"1f\" },\r\n\t\t\t\"shadowMapSize\": { type: \"v2\" }\r\n\t\t} },\r\n\r\n\t\t\"pointShadowMap\": { type: \"tv\", value: [] },\r\n\t\t\"pointShadowMatrix\": { type: \"m4v\", value: [] },\r\n\r\n\t\t\"hemisphereLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\"direction\": { type: \"v3\" },\r\n\t\t\t\"skyColor\": { type: \"c\" },\r\n\t\t\t\"groundColor\": { type: \"c\" }\r\n\t\t} }\r\n\r\n\t},\r\n\r\n\tpoints: {\r\n\r\n\t\t\"diffuse\": { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\"opacity\": { type: \"1f\", value: 1.0 },\r\n\t\t\"size\": { type: \"1f\", value: 1.0 },\r\n\t\t\"scale\": { type: \"1f\", value: 1.0 },\r\n\t\t\"map\": { type: \"t\", value: null },\r\n\t\t\"offsetRepeat\": { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) }\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/shaders/ShaderLib/cube_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'cube_frag' ] = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/cube_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'cube_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/depth_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'depth_frag' ] = \"#if DEPTH_PACKING == 3200\\n\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( 1.0 );\\n\t#if DEPTH_PACKING == 3200\\n\t\tdiffuseColor.a = opacity;\\n\t#endif\\n\t#include <map_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <logdepthbuf_fragment>\\n\t#if DEPTH_PACKING == 3200\\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\t#elif DEPTH_PACKING == 3201\\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\t#endif\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/depth_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'depth_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'distanceRGBA_frag' ] = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'distanceRGBA_vert' ] = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvWorldPosition = worldPosition;\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/equirect_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'equirect_frag' ] = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 direction = normalize( vWorldPosition );\\n\tvec2 sampleUV;\\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/equirect_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'equirect_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/linedashed_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'linedashed_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\t\tdiscard;\\n\t}\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <color_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/linedashed_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'linedashed_vert' ] = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\tvLineDistance = scale * lineDistance;\\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\tgl_Position = projectionMatrix * mvPosition;\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshbasic_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshbasic_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\tReflectedLight reflectedLight;\\n\treflectedLight.directDiffuse = vec3( 0.0 );\\n\treflectedLight.directSpecular = vec3( 0.0 );\\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshbasic_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshbasic_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <skinbase_vertex>\\n\t#ifdef USE_ENVMAP\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#endif\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <envmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshlambert_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshlambert_frag' ] = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <emissivemap_fragment>\\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\t#include <lightmap_fragment>\\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\t#ifdef DOUBLE_SIDED\\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\t#else\\n\t\treflectedLight.directDiffuse = vLightFront;\\n\t#endif\\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshlambert_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshlambert_vert' ] = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <lights_lambert_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshphong_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshphong_frag' ] = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_phong_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshphong_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshphong_vert' ] = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshphysical_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshphysical_frag' ] = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <roughnessmap_fragment>\\n\t#include <metalnessmap_fragment>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_physical_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshphysical_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshphysical_vert' ] = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/normal_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'normal_frag' ] = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/normal_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'normal_vert' ] = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvNormal = normalize( normalMatrix * normal );\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/points_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'points_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_particle_fragment>\\n\t#include <color_fragment>\\n\t#include <alphatest_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/points_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'points_vert' ] = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#ifdef USE_SIZEATTENUATION\\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\t#else\\n\t\tgl_PointSize = size;\\n\t#endif\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/shadow_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadow_frag' ] = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/shadow_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadow_vert' ] = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib.js\r\n\r\n/**\r\n * Webgl Shader Library for three.js\r\n *\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n */\r\n\r\n\r\nTHREE.ShaderLib = {\r\n\r\n\t'basic': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ 'common' ],\r\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\r\n\t\t\tTHREE.UniformsLib[ 'fog' ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'meshbasic_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshbasic_frag' ]\r\n\r\n\t},\r\n\r\n\t'lambert': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ 'common' ],\r\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\r\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\r\n\t\t\tTHREE.UniformsLib[ 'fog' ],\r\n\t\t\tTHREE.UniformsLib[ 'lights' ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'meshlambert_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshlambert_frag' ]\r\n\r\n\t},\r\n\r\n\t'phong': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ 'common' ],\r\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\r\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\r\n\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'normalmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'fog' ],\r\n\t\t\tTHREE.UniformsLib[ 'lights' ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\"specular\" : { type: \"c\", value: new THREE.Color( 0x111111 ) },\r\n\t\t\t\t\"shininess\": { type: \"1f\", value: 30 }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'meshphong_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshphong_frag' ]\r\n\r\n\t},\r\n\r\n\t'standard': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ 'common' ],\r\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\r\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\r\n\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'normalmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'roughnessmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'metalnessmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'fog' ],\r\n\t\t\tTHREE.UniformsLib[ 'lights' ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\"roughness\": { type: \"1f\", value: 0.5 },\r\n\t\t\t\t\"metalness\": { type: \"1f\", value: 0 },\r\n\t\t\t\t\"envMapIntensity\" : { type: \"1f\", value: 1 } // temporary\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\r\n\r\n\t},\r\n\r\n\t'points': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ 'points' ],\r\n\t\t\tTHREE.UniformsLib[ 'fog' ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'points_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'points_frag' ]\r\n\r\n\t},\r\n\r\n\t'dashed': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ 'common' ],\r\n\t\t\tTHREE.UniformsLib[ 'fog' ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"scale\"    : { type: \"1f\", value: 1 },\r\n\t\t\t\t\"dashSize\" : { type: \"1f\", value: 1 },\r\n\t\t\t\t\"totalSize\": { type: \"1f\", value: 2 }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'linedashed_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'linedashed_frag' ]\r\n\r\n\t},\r\n\r\n\t'depth': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ 'common' ],\r\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'depth_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'depth_frag' ]\r\n\r\n\t},\r\n\r\n\t'normal': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"opacity\" : { type: \"1f\", value: 1.0 }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'normal_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'normal_frag' ]\r\n\r\n\t},\r\n\r\n\t/* -------------------------------------------------------------------------\r\n\t//\tCube map shader\r\n\t ------------------------------------------------------------------------- */\r\n\r\n\t'cube': {\r\n\r\n\t\tuniforms: {\r\n\t\t\t\"tCube\": { type: \"t\", value: null },\r\n\t\t\t\"tFlip\": { type: \"1f\", value: - 1 }\r\n\t\t},\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'cube_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'cube_frag' ]\r\n\r\n\t},\r\n\r\n\t/* -------------------------------------------------------------------------\r\n\t//\tCube map shader\r\n\t ------------------------------------------------------------------------- */\r\n\r\n\t'equirect': {\r\n\r\n\t\tuniforms: {\r\n\t\t\t\"tEquirect\": { type: \"t\", value: null },\r\n\t\t\t\"tFlip\": { type: \"1f\", value: - 1 }\r\n\t\t},\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'equirect_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'equirect_frag' ]\r\n\r\n\t},\r\n\r\n\t'distanceRGBA': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"lightPos\": { type: \"v3\", value: new THREE.Vector3() }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'distanceRGBA_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'distanceRGBA_frag' ]\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ShaderLib[ 'physical' ] = {\r\n\r\n\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\tTHREE.ShaderLib[ 'standard' ].uniforms,\r\n\r\n\t\t{\r\n\t\t\t// future\r\n\t\t}\r\n\r\n\t] ),\r\n\r\n\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\r\n\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\r\n\r\n};\r\n\r\n\r\n// File:src/renderers/WebGLRenderer.js\r\n\r\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n * @author tschw\r\n */\r\n\r\nTHREE.WebGLRenderer = function ( parameters ) {\r\n\r\n\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),\r\n\t_context = parameters.context !== undefined ? parameters.context : null,\r\n\r\n\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\r\n\t_depth = parameters.depth !== undefined ? parameters.depth : true,\r\n\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\r\n\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\r\n\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\r\n\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\r\n\r\n\tvar lights = [];\r\n\r\n\tvar opaqueObjects = [];\r\n\tvar opaqueObjectsLastIndex = - 1;\r\n\tvar transparentObjects = [];\r\n\tvar transparentObjectsLastIndex = - 1;\r\n\r\n\tvar morphInfluences = new Float32Array( 8 );\r\n\r\n\tvar sprites = [];\r\n\tvar lensFlares = [];\r\n\r\n\t// public properties\r\n\r\n\tthis.domElement = _canvas;\r\n\tthis.context = null;\r\n\r\n\t// clearing\r\n\r\n\tthis.autoClear = true;\r\n\tthis.autoClearColor = true;\r\n\tthis.autoClearDepth = true;\r\n\tthis.autoClearStencil = true;\r\n\r\n\t// scene graph\r\n\r\n\tthis.sortObjects = true;\r\n\r\n\t// user-defined clipping\r\n\r\n\tthis.clippingPlanes = [];\r\n\tthis.localClippingEnabled = false;\r\n\r\n\t// physically based shading\r\n\r\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\r\n\tthis.gammaInput = false;\r\n\tthis.gammaOutput = false;\r\n\r\n\t// physical lights\r\n\r\n\tthis.physicallyCorrectLights = false;\r\n\r\n\t// tone mapping\r\n\r\n\tthis.toneMapping = THREE.LinearToneMapping;\r\n\tthis.toneMappingExposure = 1.0;\r\n\tthis.toneMappingWhitePoint = 1.0;\r\n\r\n\t// morphs\r\n\r\n\tthis.maxMorphTargets = 8;\r\n\tthis.maxMorphNormals = 4;\r\n\r\n\t// flags\r\n\r\n\tthis.autoScaleCubemaps = true;\r\n\r\n\t// internal properties\r\n\r\n\tvar _this = this,\r\n\r\n\t// internal state cache\r\n\r\n\t_currentProgram = null,\r\n\t_currentRenderTarget = null,\r\n\t_currentFramebuffer = null,\r\n\t_currentMaterialId = - 1,\r\n\t_currentGeometryProgram = '',\r\n\t_currentCamera = null,\r\n\r\n\t_currentScissor = new THREE.Vector4(),\r\n\t_currentScissorTest = null,\r\n\r\n\t_currentViewport = new THREE.Vector4(),\r\n\r\n\t//\r\n\r\n\t_usedTextureUnits = 0,\r\n\r\n\t//\r\n\r\n\t_clearColor = new THREE.Color( 0x000000 ),\r\n\t_clearAlpha = 0,\r\n\r\n\t_width = _canvas.width,\r\n\t_height = _canvas.height,\r\n\r\n\t_pixelRatio = 1,\r\n\r\n\t_scissor = new THREE.Vector4( 0, 0, _width, _height ),\r\n\t_scissorTest = false,\r\n\r\n\t_viewport = new THREE.Vector4( 0, 0, _width, _height ),\r\n\r\n\t// frustum\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\r\n\t// clipping\r\n\r\n\t_clipping = new THREE.WebGLClipping(),\r\n\t_clippingEnabled = false,\r\n\t_localClippingEnabled = false,\r\n\r\n\t_sphere = new THREE.Sphere(),\r\n\r\n\t// camera matrices cache\r\n\r\n\t_projScreenMatrix = new THREE.Matrix4(),\r\n\r\n\t_vector3 = new THREE.Vector3(),\r\n\r\n\t// light arrays cache\r\n\r\n\t_lights = {\r\n\r\n\t\thash: '',\r\n\r\n\t\tambient: [ 0, 0, 0 ],\r\n\t\tdirectional: [],\r\n\t\tdirectionalShadowMap: [],\r\n\t\tdirectionalShadowMatrix: [],\r\n\t\tspot: [],\r\n\t\tspotShadowMap: [],\r\n\t\tspotShadowMatrix: [],\r\n\t\tpoint: [],\r\n\t\tpointShadowMap: [],\r\n\t\tpointShadowMatrix: [],\r\n\t\themi: [],\r\n\r\n\t\tshadows: []\r\n\r\n\t},\r\n\r\n\t// info\r\n\r\n\t_infoMemory = {\r\n\r\n\t\tgeometries: 0,\r\n\t\ttextures: 0\r\n\r\n\t},\r\n\r\n\t_infoRender = {\r\n\r\n\t\tcalls: 0,\r\n\t\tvertices: 0,\r\n\t\tfaces: 0,\r\n\t\tpoints: 0\r\n\r\n\t};\r\n\r\n\tthis.info = {\r\n\r\n\t\trender: _infoRender,\r\n\t\tmemory: _infoMemory,\r\n\t\tprograms: null\r\n\r\n\t};\r\n\r\n\r\n\t// initialize\r\n\r\n\tvar _gl;\r\n\r\n\ttry {\r\n\r\n\t\tvar attributes = {\r\n\t\t\talpha: _alpha,\r\n\t\t\tdepth: _depth,\r\n\t\t\tstencil: _stencil,\r\n\t\t\tantialias: _antialias,\r\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\r\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\r\n\t\t};\r\n\r\n\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\r\n\r\n\t\tif ( _gl === null ) {\r\n\r\n\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\r\n\r\n\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow 'Error creating WebGL context.';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\r\n\r\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\r\n\r\n\t\t\t_gl.getShaderPrecisionFormat = function () {\r\n\r\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\r\n\r\n\t} catch ( error ) {\r\n\r\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\r\n\r\n\t}\r\n\r\n\tvar _isWebGL2 = (typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext);\r\n\tvar extensions = new THREE.WebGLExtensions( _gl );\r\n\r\n\textensions.get( 'WEBGL_depth_texture' );\r\n\textensions.get( 'OES_texture_float' );\r\n\textensions.get( 'OES_texture_float_linear' );\r\n\textensions.get( 'OES_texture_half_float' );\r\n\textensions.get( 'OES_texture_half_float_linear' );\r\n\textensions.get( 'OES_standard_derivatives' );\r\n\textensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\tif ( extensions.get( 'OES_element_index_uint' ) ) {\r\n\r\n\t\tTHREE.BufferGeometry.MaxIndex = 4294967296;\r\n\r\n\t}\r\n\r\n\tvar capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );\r\n\r\n\tvar state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );\r\n\tvar properties = new THREE.WebGLProperties();\r\n\tvar objects = new THREE.WebGLObjects( _gl, properties, this.info );\r\n\tvar programCache = new THREE.WebGLPrograms( this, capabilities );\r\n\tvar lightCache = new THREE.WebGLLights();\r\n\r\n\tthis.info.programs = programCache.programs;\r\n\r\n\tvar bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );\r\n\tvar indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\r\n\r\n\t//\r\n\r\n\tfunction getTargetPixelRatio() {\r\n\r\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\r\n\r\n\t}\r\n\r\n\tfunction glClearColor( r, g, b, a ) {\r\n\r\n\t\tif ( _premultipliedAlpha === true ) {\r\n\r\n\t\t\tr *= a; g *= a; b *= a;\r\n\r\n\t\t}\r\n\r\n\t\tstate.clearColor( r, g, b, a );\r\n\r\n\t}\r\n\r\n\tfunction setDefaultGLState() {\r\n\r\n\t\tstate.init();\r\n\r\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\r\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\r\n\r\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t}\r\n\r\n\tfunction resetGLState() {\r\n\r\n\t\t_currentProgram = null;\r\n\t\t_currentCamera = null;\r\n\r\n\t\t_currentGeometryProgram = '';\r\n\t\t_currentMaterialId = - 1;\r\n\r\n\t\tstate.reset();\r\n\r\n\t}\r\n\r\n\tsetDefaultGLState();\r\n\r\n\tthis.context = _gl;\r\n\tthis.capabilities = capabilities;\r\n\tthis.extensions = extensions;\r\n\tthis.properties = properties;\r\n\tthis.state = state;\r\n\r\n\t// shadow map\r\n\r\n\tvar shadowMap = new THREE.WebGLShadowMap( this, _lights, objects );\r\n\r\n\tthis.shadowMap = shadowMap;\r\n\r\n\r\n\t// Plugins\r\n\r\n\tvar spritePlugin = new THREE.SpritePlugin( this, sprites );\r\n\tvar lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );\r\n\r\n\t// API\r\n\r\n\tthis.getContext = function () {\r\n\r\n\t\treturn _gl;\r\n\r\n\t};\r\n\r\n\tthis.getContextAttributes = function () {\r\n\r\n\t\treturn _gl.getContextAttributes();\r\n\r\n\t};\r\n\r\n\tthis.forceContextLoss = function () {\r\n\r\n\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\r\n\r\n\t};\r\n\r\n\tthis.getMaxAnisotropy = ( function () {\r\n\r\n\t\tvar value;\r\n\r\n\t\treturn function getMaxAnisotropy() {\r\n\r\n\t\t\tif ( value !== undefined ) return value;\r\n\r\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tvalue = _gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvalue = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn value;\r\n\r\n\t\t};\r\n\r\n\t} )();\r\n\r\n\tthis.getPrecision = function () {\r\n\r\n\t\treturn capabilities.precision;\r\n\r\n\t};\r\n\r\n\tthis.getPixelRatio = function () {\r\n\r\n\t\treturn _pixelRatio;\r\n\r\n\t};\r\n\r\n\tthis.setPixelRatio = function ( value ) {\r\n\r\n\t\tif ( value === undefined ) return;\r\n\r\n\t\t_pixelRatio = value;\r\n\r\n\t\tthis.setSize( _viewport.z, _viewport.w, false );\r\n\r\n\t};\r\n\r\n\tthis.getSize = function () {\r\n\r\n\t\treturn {\r\n\t\t\twidth: _width,\r\n\t\t\theight: _height\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tthis.setSize = function ( width, height, updateStyle ) {\r\n\r\n\t\t_width = width;\r\n\t\t_height = height;\r\n\r\n\t\t_canvas.width = width * _pixelRatio;\r\n\t\t_canvas.height = height * _pixelRatio;\r\n\r\n\t\tif ( updateStyle !== false ) {\r\n\r\n\t\t\t_canvas.style.width = width + 'px';\r\n\t\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\t}\r\n\r\n\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t};\r\n\r\n\tthis.setViewport = function ( x, y, width, height ) {\r\n\r\n\t\tstate.viewport( _viewport.set( x, y, width, height ) );\r\n\r\n\t};\r\n\r\n\tthis.setScissor = function ( x, y, width, height ) {\r\n\r\n\t\tstate.scissor( _scissor.set( x, y, width, height ) );\r\n\r\n\t};\r\n\r\n\tthis.setScissorTest = function ( boolean ) {\r\n\r\n\t\tstate.setScissorTest( _scissorTest = boolean );\r\n\r\n\t};\r\n\r\n\t// Clearing\r\n\r\n\tthis.getClearColor = function () {\r\n\r\n\t\treturn _clearColor;\r\n\r\n\t};\r\n\r\n\tthis.setClearColor = function ( color, alpha ) {\r\n\r\n\t\t_clearColor.set( color );\r\n\r\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\r\n\r\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\tthis.getClearAlpha = function () {\r\n\r\n\t\treturn _clearAlpha;\r\n\r\n\t};\r\n\r\n\tthis.setClearAlpha = function ( alpha ) {\r\n\r\n\t\t_clearAlpha = alpha;\r\n\r\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\tthis.clear = function ( color, depth, stencil ) {\r\n\r\n\t\tvar bits = 0;\r\n\r\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\r\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\r\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\r\n\r\n\t\t_gl.clear( bits );\r\n\r\n\t};\r\n\r\n\tthis.clearColor = function () {\r\n\r\n\t\tthis.clear( true, false, false );\r\n\r\n\t};\r\n\r\n\tthis.clearDepth = function () {\r\n\r\n\t\tthis.clear( false, true, false );\r\n\r\n\t};\r\n\r\n\tthis.clearStencil = function () {\r\n\r\n\t\tthis.clear( false, false, true );\r\n\r\n\t};\r\n\r\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\r\n\r\n\t\tthis.setRenderTarget( renderTarget );\r\n\t\tthis.clear( color, depth, stencil );\r\n\r\n\t};\r\n\r\n\t// Reset\r\n\r\n\tthis.resetGLState = resetGLState;\r\n\r\n\tthis.dispose = function() {\r\n\r\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\r\n\r\n\t};\r\n\r\n\t// Events\r\n\r\n\tfunction onContextLost( event ) {\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\tresetGLState();\r\n\t\tsetDefaultGLState();\r\n\r\n\t\tproperties.clear();\r\n\r\n\t}\r\n\r\n\tfunction onTextureDispose( event ) {\r\n\r\n\t\tvar texture = event.target;\r\n\r\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\tdeallocateTexture( texture );\r\n\r\n\t\t_infoMemory.textures --;\r\n\r\n\r\n\t}\r\n\r\n\tfunction onRenderTargetDispose( event ) {\r\n\r\n\t\tvar renderTarget = event.target;\r\n\r\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\tdeallocateRenderTarget( renderTarget );\r\n\r\n\t\t_infoMemory.textures --;\r\n\r\n\t}\r\n\r\n\tfunction onMaterialDispose( event ) {\r\n\r\n\t\tvar material = event.target;\r\n\r\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\tdeallocateMaterial( material );\r\n\r\n\t}\r\n\r\n\t// Buffer deallocation\r\n\r\n\tfunction deallocateTexture( texture ) {\r\n\r\n\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\r\n\r\n\t\t\t// cube texture\r\n\r\n\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// 2D texture\r\n\r\n\t\t\tif ( textureProperties.__webglInit === undefined ) return;\r\n\r\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\t// remove all webgl properties\r\n\t\tproperties.delete( texture );\r\n\r\n\t}\r\n\r\n\tfunction deallocateRenderTarget( renderTarget ) {\r\n\r\n\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\tif ( ! renderTarget ) return;\r\n\r\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\r\n\r\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderTarget.depthTexture ) {\r\n\r\n\t\t\trenderTarget.depthTexture.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\r\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\r\n\r\n\t\t}\r\n\r\n\t\tproperties.delete( renderTarget.texture );\r\n\t\tproperties.delete( renderTarget );\r\n\r\n\t}\r\n\r\n\tfunction deallocateMaterial( material ) {\r\n\r\n\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\tproperties.delete( material );\r\n\r\n\t}\r\n\r\n\r\n\tfunction releaseMaterialProgramReference( material ) {\r\n\r\n\t\tvar programInfo = properties.get( material ).program;\r\n\r\n\t\tmaterial.program = undefined;\r\n\r\n\t\tif ( programInfo !== undefined ) {\r\n\r\n\t\t\tprogramCache.releaseProgram( programInfo );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Buffer rendering\r\n\r\n\tthis.renderBufferImmediate = function ( object, program, material ) {\r\n\r\n\t\tstate.initAttributes();\r\n\r\n\t\tvar buffers = properties.get( object );\r\n\r\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\r\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\r\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\r\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\r\n\r\n\t\tvar attributes = program.getAttributes();\r\n\r\n\t\tif ( object.hasPositions ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.position );\r\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasNormals ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\r\n\r\n\t\t\tif ( material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.type !== 'MeshPhysicalMaterial' && material.shading === THREE.FlatShading ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\r\n\r\n\t\t\t\t\tvar array = object.normalArray;\r\n\r\n\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\r\n\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\r\n\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\r\n\r\n\t\t\t\t\tarray[ i + 0 ] = nx;\r\n\t\t\t\t\tarray[ i + 1 ] = ny;\r\n\t\t\t\t\tarray[ i + 2 ] = nz;\r\n\r\n\t\t\t\t\tarray[ i + 3 ] = nx;\r\n\t\t\t\t\tarray[ i + 4 ] = ny;\r\n\t\t\t\t\tarray[ i + 5 ] = nz;\r\n\r\n\t\t\t\t\tarray[ i + 6 ] = nx;\r\n\t\t\t\t\tarray[ i + 7 ] = ny;\r\n\t\t\t\t\tarray[ i + 8 ] = nz;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.normal );\r\n\r\n\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasUvs && material.map ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.uv );\r\n\r\n\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.color );\r\n\r\n\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\r\n\r\n\t\tobject.count = 0;\r\n\r\n\t};\r\n\r\n\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\r\n\r\n\t\tsetMaterial( material );\r\n\r\n\t\tvar program = setProgram( camera, fog, material, object );\r\n\r\n\t\tvar updateBuffers = false;\r\n\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\r\n\r\n\t\tif ( geometryProgram !== _currentGeometryProgram ) {\r\n\r\n\t\t\t_currentGeometryProgram = geometryProgram;\r\n\t\t\tupdateBuffers = true;\r\n\r\n\t\t}\r\n\r\n\t\t// morph targets\r\n\r\n\t\tvar morphTargetInfluences = object.morphTargetInfluences;\r\n\r\n\t\tif ( morphTargetInfluences !== undefined ) {\r\n\r\n\t\t\tvar activeInfluences = [];\r\n\r\n\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar influence = morphTargetInfluences[ i ];\r\n\t\t\t\tactiveInfluences.push( [ influence, i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tactiveInfluences.sort( absNumericalSort );\r\n\r\n\t\t\tif ( activeInfluences.length > 8 ) {\r\n\r\n\t\t\t\tactiveInfluences.length = 8;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\r\n\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar influence = activeInfluences[ i ];\r\n\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\r\n\r\n\t\t\t\tif ( influence[ 0 ] !== 0 ) {\r\n\r\n\t\t\t\t\tvar index = influence[ 1 ];\r\n\r\n\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\r\n\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\r\n\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprogram.getUniforms().setValue(\r\n\t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\r\n\r\n\t\t\tupdateBuffers = true;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar index = geometry.index;\r\n\t\tvar position = geometry.attributes.position;\r\n\r\n\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\tindex = objects.getWireframeAttribute( geometry );\r\n\r\n\t\t}\r\n\r\n\t\tvar renderer;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\trenderer = indexedBufferRenderer;\r\n\t\t\trenderer.setIndex( index );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer = bufferRenderer;\r\n\r\n\t\t}\r\n\r\n\t\tif ( updateBuffers ) {\r\n\r\n\t\t\tsetupVertexAttributes( material, program, geometry );\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar dataStart = 0;\r\n\t\tvar dataCount = Infinity;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tdataCount = index.count;\r\n\r\n\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\tdataCount = position.count;\r\n\r\n\t\t}\r\n\r\n\t\tvar rangeStart = geometry.drawRange.start;\r\n\t\tvar rangeCount = geometry.drawRange.count;\r\n\r\n\t\tvar groupStart = group !== null ? group.start : 0;\r\n\t\tvar groupCount = group !== null ? group.count : Infinity;\r\n\r\n\t\tvar drawStart = Math.max( dataStart, rangeStart, groupStart );\r\n\t\tvar drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\r\n\r\n\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\r\n\r\n\t\t//\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\r\n\t\t\t\trenderer.setMode( _gl.LINES );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tswitch ( object.drawMode ) {\r\n\r\n\t\t\t\t\tcase THREE.TrianglesDrawMode:\r\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.TriangleStripDrawMode:\r\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.TriangleFanDrawMode:\r\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\tvar lineWidth = material.linewidth;\r\n\r\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\r\n\r\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\r\n\r\n\t\t\tif ( object instanceof THREE.LineSegments ) {\r\n\r\n\t\t\t\trenderer.setMode( _gl.LINES );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object instanceof THREE.Points ) {\r\n\r\n\t\t\trenderer.setMode( _gl.POINTS );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\r\n\r\n\t\t\tif ( geometry.maxInstancedCount > 0 ) {\r\n\r\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.render( drawStart, drawCount );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\r\n\r\n\t\tvar extension;\r\n\r\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\r\n\r\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( startIndex === undefined ) startIndex = 0;\r\n\r\n\t\tstate.initAttributes();\r\n\r\n\t\tvar geometryAttributes = geometry.attributes;\r\n\r\n\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\r\n\r\n\t\tfor ( var name in programAttributes ) {\r\n\r\n\t\t\tvar programAttribute = programAttributes[ name ];\r\n\r\n\t\t\tif ( programAttribute >= 0 ) {\r\n\r\n\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\r\n\r\n\t\t\t\tif ( geometryAttribute !== undefined ) {\r\n\r\n\t\t\t\t\tvar type = _gl.FLOAT;\r\n\t\t\t\t\tvar array = geometryAttribute.array;\r\n\t\t\t\t\tvar normalized = geometryAttribute.normalized;\r\n\r\n\t\t\t\t\tif ( array instanceof Float32Array ) {\r\n\r\n\t\t\t\t\t\ttype = _gl.FLOAT;\r\n\r\n\t\t\t\t\t} else if ( array instanceof Float64Array ) {\r\n\r\n\t\t\t\t\t\tconsole.warn(\"Unsupported data buffer format: Float64Array\");\r\n\r\n\t\t\t\t\t} else if ( array instanceof Uint16Array ) {\r\n\r\n\t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\r\n\r\n\t\t\t\t\t} else if ( array instanceof Int16Array ) {\r\n\r\n\t\t\t\t\t\ttype = _gl.SHORT;\r\n\r\n\t\t\t\t\t} else if ( array instanceof Uint32Array ) {\r\n\r\n\t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\r\n\r\n\t\t\t\t\t} else if ( array instanceof Int32Array ) {\r\n\r\n\t\t\t\t\t\ttype = _gl.INT;\r\n\r\n\t\t\t\t\t} else if ( array instanceof Int8Array ) {\r\n\r\n\t\t\t\t\t\ttype = _gl.BYTE;\r\n\r\n\t\t\t\t\t} else if ( array instanceof Uint8Array ) {\r\n\r\n\t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\r\n\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\r\n\r\n\t\t\t\t\tif ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\tvar data = geometryAttribute.data;\r\n\t\t\t\t\t\tvar stride = data.stride;\r\n\t\t\t\t\t\tvar offset = geometryAttribute.offset;\r\n\r\n\t\t\t\t\t\tif ( data instanceof THREE.InstancedInterleavedBuffer ) {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\r\n\r\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\r\n\r\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\r\n\r\n\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\tswitch ( value.length ) {\r\n\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t}\r\n\r\n\t// Sorting\r\n\r\n\tfunction absNumericalSort( a, b ) {\r\n\r\n\t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\r\n\r\n\t}\r\n\r\n\tfunction painterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\r\n\r\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\r\n\r\n\t\t} else if ( a.material.id !== b.material.id ) {\r\n\r\n\t\t\treturn a.material.id - b.material.id;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn a.z - b.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction reversePainterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\r\n\r\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\r\n\r\n\t\t} if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Rendering\r\n\r\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\r\n\r\n\t\tif ( camera instanceof THREE.Camera === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar fog = scene.fog;\r\n\r\n\t\t// reset caching for this frame\r\n\r\n\t\t_currentGeometryProgram = '';\r\n\t\t_currentMaterialId = - 1;\r\n\t\t_currentCamera = null;\r\n\r\n\t\t// update scene graph\r\n\r\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\r\n\r\n\t\t// update camera matrices and frustum\r\n\r\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\tlights.length = 0;\r\n\r\n\t\topaqueObjectsLastIndex = - 1;\r\n\t\ttransparentObjectsLastIndex = - 1;\r\n\r\n\t\tsprites.length = 0;\r\n\t\tlensFlares.length = 0;\r\n\r\n\t\t_localClippingEnabled = this.localClippingEnabled;\r\n\t\t_clippingEnabled = _clipping.init(\r\n\t\t\t\tthis.clippingPlanes, _localClippingEnabled, camera );\r\n\r\n\t\tprojectObject( scene, camera );\r\n\r\n\r\n\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\r\n\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\r\n\r\n\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\topaqueObjects.sort( painterSortStable );\r\n\t\t\ttransparentObjects.sort( reversePainterSortStable );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( _clippingEnabled ) _clipping.beginShadows();\r\n\r\n\t\tsetupShadows( lights );\r\n\r\n\t\tshadowMap.render( scene, camera );\r\n\r\n\t\tsetupLights( lights, camera );\r\n\r\n\t\tif ( _clippingEnabled ) _clipping.endShadows();\r\n\r\n\t\t//\r\n\r\n\t\t_infoRender.calls = 0;\r\n\t\t_infoRender.vertices = 0;\r\n\t\t_infoRender.faces = 0;\r\n\t\t_infoRender.points = 0;\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\trenderTarget = null;\r\n\r\n\t\t}\r\n\r\n\t\tthis.setRenderTarget( renderTarget );\r\n\r\n\t\tif ( this.autoClear || forceClear ) {\r\n\r\n\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( scene.overrideMaterial ) {\r\n\r\n\t\t\tvar overrideMaterial = scene.overrideMaterial;\r\n\r\n\t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\r\n\t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// opaque pass (front-to-back order)\r\n\r\n\t\t\tstate.setBlending( THREE.NoBlending );\r\n\t\t\trenderObjects( opaqueObjects, camera, fog );\r\n\r\n\t\t\t// transparent pass (back-to-front order)\r\n\r\n\t\t\trenderObjects( transparentObjects, camera, fog );\r\n\r\n\t\t}\r\n\r\n\t\t// custom render plugins (post pass)\r\n\r\n\t\tspritePlugin.render( scene, camera );\r\n\t\tlensFlarePlugin.render( scene, camera, _currentViewport );\r\n\r\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\r\n\r\n\t\tif ( renderTarget ) {\r\n\r\n\t\t\tvar texture = renderTarget.texture;\r\n\r\n\t\t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\r\n\t\t\t\t\ttexture.minFilter !== THREE.NearestFilter &&\r\n\t\t\t\t\ttexture.minFilter !== THREE.LinearFilter ) {\r\n\r\n\t\t\t\tupdateRenderTargetMipmap( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\r\n\t\tstate.setDepthTest( true );\r\n\t\tstate.setDepthWrite( true );\r\n\t\tstate.setColorWrite( true );\r\n\r\n\t\t// _gl.finish();\r\n\r\n\t};\r\n\r\n\tfunction pushRenderItem( object, geometry, material, z, group ) {\r\n\r\n\t\tvar array, index;\r\n\r\n\t\t// allocate the next position in the appropriate array\r\n\r\n\t\tif ( material.transparent ) {\r\n\r\n\t\t\tarray = transparentObjects;\r\n\t\t\tindex = ++ transparentObjectsLastIndex;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tarray = opaqueObjects;\r\n\t\t\tindex = ++ opaqueObjectsLastIndex;\r\n\r\n\t\t}\r\n\r\n\t\t// recycle existing render item or grow the array\r\n\r\n\t\tvar renderItem = array[ index ];\r\n\r\n\t\tif ( renderItem !== undefined ) {\r\n\r\n\t\t\trenderItem.id = object.id;\r\n\t\t\trenderItem.object = object;\r\n\t\t\trenderItem.geometry = geometry;\r\n\t\t\trenderItem.material = material;\r\n\t\t\trenderItem.z = _vector3.z;\r\n\t\t\trenderItem.group = group;\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderItem = {\r\n\t\t\t\tid: object.id,\r\n\t\t\t\tobject: object,\r\n\t\t\t\tgeometry: geometry,\r\n\t\t\t\tmaterial: material,\r\n\t\t\t\tz: _vector3.z,\r\n\t\t\t\tgroup: group\r\n\t\t\t};\r\n\r\n\t\t\t// assert( index === array.length );\r\n\t\t\tarray.push( renderItem );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// TODO Duplicated code (Frustum)\r\n\r\n\tfunction isObjectViewable( object ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( geometry.boundingSphere === null )\r\n\t\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\t_sphere.copy( geometry.boundingSphere ).\r\n\t\t\tapplyMatrix4( object.matrixWorld );\r\n\r\n\t\treturn isSphereViewable( _sphere );\r\n\r\n\t}\r\n\r\n\tfunction isSpriteViewable( sprite ) {\r\n\r\n\t\t_sphere.center.set( 0, 0, 0 );\r\n\t\t_sphere.radius = 0.7071067811865476;\r\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\r\n\r\n\t\treturn isSphereViewable( _sphere );\r\n\r\n\t}\r\n\r\n\tfunction isSphereViewable( sphere ) {\r\n\r\n\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\r\n\r\n\t\tvar numPlanes = _clipping.numPlanes;\r\n\r\n\t\tif ( numPlanes === 0 ) return true;\r\n\r\n\t\tvar planes = _this.clippingPlanes,\r\n\r\n\t\t\tcenter = sphere.center,\r\n\t\t\tnegRad = - sphere.radius,\r\n\t\t\ti = 0;\r\n\r\n\t\tdo {\r\n\r\n\t\t\t// out when deeper than radius in the negative halfspace\r\n\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\r\n\r\n\t\t} while ( ++ i !== numPlanes );\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction projectObject( object, camera ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tif ( object.layers.test( camera.layers ) ) {\r\n\r\n\t\t\tif ( object instanceof THREE.Light ) {\r\n\r\n\t\t\t\tlights.push( object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\r\n\r\n\t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\r\n\r\n\t\t\t\t\tsprites.push( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.LensFlare ) {\r\n\r\n\t\t\t\tlensFlares.push( object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject ) {\r\n\r\n\t\t\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\r\n\r\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\r\n\r\n\t\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\r\n\r\n\t\t\t\t\tobject.skeleton.update();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\r\n\r\n\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\tif ( material.visible === true ) {\r\n\r\n\t\t\t\t\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar geometry = objects.update( object );\r\n\r\n\t\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\r\n\r\n\t\t\t\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\t\t\t\tvar materials = material.materials;\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\r\n\r\n\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar children = object.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tprojectObject( children[ i ], camera );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\r\n\r\n\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar renderItem = renderList[ i ];\r\n\r\n\t\t\tvar object = renderItem.object;\r\n\t\t\tvar geometry = renderItem.geometry;\r\n\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\r\n\t\t\tvar group = renderItem.group;\r\n\r\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\r\n\r\n\t\t\tif ( object instanceof THREE.ImmediateRenderObject ) {\r\n\r\n\t\t\t\tsetMaterial( material );\r\n\r\n\t\t\t\tvar program = setProgram( camera, fog, material, object );\r\n\r\n\t\t\t\t_currentGeometryProgram = '';\r\n\r\n\t\t\t\tobject.render( function ( object ) {\r\n\r\n\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction initMaterial( material, fog, object ) {\r\n\r\n\t\tvar materialProperties = properties.get( material );\r\n\r\n\t\tvar parameters = programCache.getParameters(\r\n\t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\r\n\r\n\t\tvar code = programCache.getProgramCode( material, parameters );\r\n\r\n\t\tvar program = materialProperties.program;\r\n\t\tvar programChange = true;\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\t// new material\r\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t} else if ( program.code !== code ) {\r\n\r\n\t\t\t// changed glsl or parameters\r\n\t\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\t} else if ( parameters.shaderID !== undefined ) {\r\n\r\n\t\t\t// same glsl and uniform list\r\n\t\t\treturn;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// only rebuild uniform list\r\n\t\t\tprogramChange = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( programChange ) {\r\n\r\n\t\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\t\tvar shader = THREE.ShaderLib[ parameters.shaderID ];\r\n\r\n\t\t\t\tmaterialProperties.__webglShader = {\r\n\t\t\t\t\tname: material.type,\r\n\t\t\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\r\n\t\t\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\t\t\tfragmentShader: shader.fragmentShader\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaterialProperties.__webglShader = {\r\n\t\t\t\t\tname: material.type,\r\n\t\t\t\t\tuniforms: material.uniforms,\r\n\t\t\t\t\tvertexShader: material.vertexShader,\r\n\t\t\t\t\tfragmentShader: material.fragmentShader\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\r\n\r\n\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\r\n\r\n\t\t\tmaterialProperties.program = program;\r\n\t\t\tmaterial.program = program;\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = program.getAttributes();\r\n\r\n\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\tmaterial.numSupportedMorphTargets = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\r\n\r\n\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\tmaterial.numSupportedMorphNormals = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\r\n\r\n\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar uniforms = materialProperties.__webglShader.uniforms;\r\n\r\n\t\tif ( ! ( material instanceof THREE.ShaderMaterial ) &&\r\n\t\t\t\t! ( material instanceof THREE.RawShaderMaterial ) ||\r\n\t\t\t\tmaterial.clipping === true ) {\r\n\r\n\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\r\n\t\t\tuniforms.clippingPlanes = _clipping.uniform;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.lights ) {\r\n\r\n\t\t\t// store the light setup it was created for\r\n\r\n\t\t\tmaterialProperties.lightsHash = _lights.hash;\r\n\r\n\t\t\t// wire up the material to this renderer's lighting state\r\n\r\n\t\t\tuniforms.ambientLightColor.value = _lights.ambient;\r\n\t\t\tuniforms.directionalLights.value = _lights.directional;\r\n\t\t\tuniforms.spotLights.value = _lights.spot;\r\n\t\t\tuniforms.pointLights.value = _lights.point;\r\n\t\t\tuniforms.hemisphereLights.value = _lights.hemi;\r\n\r\n\t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\r\n\t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\r\n\t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\r\n\t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\r\n\t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\r\n\t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\r\n\r\n\t\t}\r\n\r\n\t\tvar progUniforms = materialProperties.program.getUniforms(),\r\n\t\t\tuniformsList =\r\n\t\t\t\t\tTHREE.WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\r\n\r\n\t\tmaterialProperties.uniformsList = uniformsList;\r\n\t\tmaterialProperties.dynamicUniforms =\r\n\t\t\t\tTHREE.WebGLUniforms.splitDynamic( uniformsList, uniforms );\r\n\r\n\t}\r\n\r\n\tfunction setMaterial( material ) {\r\n\r\n\t\tif ( material.side !== THREE.DoubleSide )\r\n\t\t\tstate.enable( _gl.CULL_FACE );\r\n\t\telse\r\n\t\t\tstate.disable( _gl.CULL_FACE );\r\n\r\n\t\tstate.setFlipSided( material.side === THREE.BackSide );\r\n\r\n\t\tif ( material.transparent === true ) {\r\n\r\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tstate.setBlending( THREE.NoBlending );\r\n\r\n\t\t}\r\n\r\n\t\tstate.setDepthFunc( material.depthFunc );\r\n\t\tstate.setDepthTest( material.depthTest );\r\n\t\tstate.setDepthWrite( material.depthWrite );\r\n\t\tstate.setColorWrite( material.colorWrite );\r\n\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t}\r\n\r\n\tfunction setProgram( camera, fog, material, object ) {\r\n\r\n\t\t_usedTextureUnits = 0;\r\n\r\n\t\tvar materialProperties = properties.get( material );\r\n\r\n\t\tif ( _clippingEnabled ) {\r\n\r\n\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\r\n\r\n\t\t\t\tvar useCache =\r\n\t\t\t\t\t\tcamera === _currentCamera &&\r\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\r\n\r\n\t\t\t\t// we might want to call this function with some ClippingGroup\r\n\t\t\t\t// object instead of the material, once it becomes feasible\r\n\t\t\t\t// (#8465, #8379)\r\n\t\t\t\t_clipping.setState(\r\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\r\n\t\t\t\t\t\tcamera, materialProperties, useCache );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( materialProperties.numClippingPlanes !== undefined &&\r\n\t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\r\n\r\n\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialProperties.program === undefined ) {\r\n\r\n\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialProperties.lightsHash !== undefined &&\r\n\t\t\tmaterialProperties.lightsHash !== _lights.hash ) {\r\n\r\n\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.needsUpdate ) {\r\n\r\n\t\t\tinitMaterial( material, fog, object );\r\n\t\t\tmaterial.needsUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tvar refreshProgram = false;\r\n\t\tvar refreshMaterial = false;\r\n\t\tvar refreshLights = false;\r\n\r\n\t\tvar program = materialProperties.program,\r\n\t\t\tp_uniforms = program.getUniforms(),\r\n\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\r\n\r\n\t\tif ( program.id !== _currentProgram ) {\r\n\r\n\t\t\t_gl.useProgram( program.program );\r\n\t\t\t_currentProgram = program.id;\r\n\r\n\t\t\trefreshProgram = true;\r\n\t\t\trefreshMaterial = true;\r\n\t\t\trefreshLights = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.id !== _currentMaterialId ) {\r\n\r\n\t\t\t_currentMaterialId = material.id;\r\n\r\n\t\t\trefreshMaterial = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( refreshProgram || camera !== _currentCamera ) {\r\n\r\n\t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\r\n\r\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\r\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( camera !== _currentCamera ) {\r\n\r\n\t\t\t\t_currentCamera = camera;\r\n\r\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\r\n\t\t\t\t// now, in case this material supports lights - or later, when\r\n\t\t\t\t// the next material that does gets activated:\r\n\r\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\r\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// load material specific uniforms\r\n\t\t\t// (shader material also gets them for the sake of genericity)\r\n\r\n\t\t\tif ( material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\r\n\t\t\t\t material.envMap ) {\r\n\r\n\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\r\n\r\n\t\t\t\tif ( uCamPos !== undefined ) {\r\n\r\n\t\t\t\t\tuCamPos.setValue( _gl,\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\r\n\t\t\t\t material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t material.skinning ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\r\n\t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\r\n\r\n\t\t}\r\n\r\n\t\t// skinning uniforms must be set even if material didn't change\r\n\t\t// auto-setting of texture unit for bone texture must go before other textures\r\n\t\t// not sure why, but otherwise weird things happen\r\n\r\n\t\tif ( material.skinning ) {\r\n\r\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\r\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\r\n\r\n\t\t\tvar skeleton = object.skeleton;\r\n\r\n\t\t\tif ( skeleton ) {\r\n\r\n\t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\r\n\r\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\r\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\r\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( refreshMaterial ) {\r\n\r\n\t\t\tif ( material.lights ) {\r\n\r\n\t\t\t\t// the current material requires lighting info\r\n\r\n\t\t\t\t// note: all lighting uniforms are always set correctly\r\n\t\t\t\t// they simply reference the renderer's state for their\r\n\t\t\t\t// values\r\n\t\t\t\t//\r\n\t\t\t\t// use the current material's .needsUpdate flags to set\r\n\t\t\t\t// the GL state when required\r\n\r\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// refresh uniforms common to several materials\r\n\r\n\t\t\tif ( fog && material.fog ) {\r\n\r\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// refresh single material specific uniforms\r\n\r\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\t\t\t\trefreshUniformsDash( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.PointsMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsPoints( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsPhong( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshPhysicalMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshStandardMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsStandard( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tTHREE.WebGLUniforms.upload(\r\n\t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// common matrices\r\n\r\n\t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\r\n\t\tp_uniforms.set( _gl, object, 'normalMatrix' );\r\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\r\n\r\n\r\n\t\t// dynamic uniforms\r\n\r\n\t\tvar dynUniforms = materialProperties.dynamicUniforms;\r\n\r\n\t\tif ( dynUniforms !== null ) {\r\n\r\n\t\t\tTHREE.WebGLUniforms.evalDynamic(\r\n\t\t\t\t\tdynUniforms, m_uniforms, object, camera );\r\n\r\n\t\t\tTHREE.WebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\r\n\r\n\t\t}\r\n\r\n\t\treturn program;\r\n\r\n\t}\r\n\r\n\t// Uniforms (refresh uniforms objects)\r\n\r\n\tfunction refreshUniformsCommon ( uniforms, material ) {\r\n\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\tuniforms.diffuse.value = material.color;\r\n\r\n\t\tif ( material.emissive ) {\r\n\r\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.map.value = material.map;\r\n\t\tuniforms.specularMap.value = material.specularMap;\r\n\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\tif ( material.aoMap ) {\r\n\r\n\t\t\tuniforms.aoMap.value = material.aoMap;\r\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\t// uv repeat and offset setting priorities\r\n\t\t// 1. color map\r\n\t\t// 2. specular map\r\n\t\t// 3. normal map\r\n\t\t// 4. bump map\r\n\t\t// 5. alpha map\r\n\t\t// 6. emissive map\r\n\r\n\t\tvar uvScaleMap;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t} else if ( material.specularMap ) {\r\n\r\n\t\t\tuvScaleMap = material.specularMap;\r\n\r\n\t\t} else if ( material.displacementMap ) {\r\n\r\n\t\t\tuvScaleMap = material.displacementMap;\r\n\r\n\t\t} else if ( material.normalMap ) {\r\n\r\n\t\t\tuvScaleMap = material.normalMap;\r\n\r\n\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\tuvScaleMap = material.bumpMap;\r\n\r\n\t\t} else if ( material.roughnessMap ) {\r\n\r\n\t\t\tuvScaleMap = material.roughnessMap;\r\n\r\n\t\t} else if ( material.metalnessMap ) {\r\n\r\n\t\t\tuvScaleMap = material.metalnessMap;\r\n\r\n\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t} else if ( material.emissiveMap ) {\r\n\r\n\t\t\tuvScaleMap = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\t// backwards compatibility\r\n\t\t\tif ( uvScaleMap instanceof THREE.WebGLRenderTarget ) {\r\n\r\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar offset = uvScaleMap.offset;\r\n\t\t\tvar repeat = uvScaleMap.repeat;\r\n\r\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.envMap.value = material.envMap;\r\n\r\n\t\t// don't flip CubeTexture envMaps, flip everything else:\r\n\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\r\n\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\r\n\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\r\n\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap instanceof THREE.CubeTexture ) ) ? 1 : - 1;\r\n\r\n\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsLine ( uniforms, material ) {\r\n\r\n\t\tuniforms.diffuse.value = material.color;\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsDash ( uniforms, material ) {\r\n\r\n\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\tuniforms.scale.value = material.scale;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPoints ( uniforms, material ) {\r\n\r\n\t\tuniforms.diffuse.value = material.color;\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\t\tuniforms.size.value = material.size * _pixelRatio;\r\n\t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\r\n\r\n\t\tuniforms.map.value = material.map;\r\n\r\n\t\tif ( material.map !== null ) {\r\n\r\n\t\t\tvar offset = material.map.offset;\r\n\t\t\tvar repeat = material.map.repeat;\r\n\r\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsFog ( uniforms, fog ) {\r\n\r\n\t\tuniforms.fogColor.value = fog.color;\r\n\r\n\t\tif ( fog instanceof THREE.Fog ) {\r\n\r\n\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\tuniforms.fogFar.value = fog.far;\r\n\r\n\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\r\n\t\t\tuniforms.fogDensity.value = fog.density;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsLambert ( uniforms, material ) {\r\n\r\n\t\tif ( material.lightMap ) {\r\n\r\n\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPhong ( uniforms, material ) {\r\n\r\n\t\tuniforms.specular.value = material.specular;\r\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\r\n\t\tif ( material.lightMap ) {\r\n\r\n\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsStandard ( uniforms, material ) {\r\n\r\n\t\tuniforms.roughness.value = material.roughness;\r\n\t\tuniforms.metalness.value = material.metalness;\r\n\r\n\t\tif ( material.roughnessMap ) {\r\n\r\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.metalnessMap ) {\r\n\r\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.lightMap ) {\r\n\r\n\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.envMap ) {\r\n\r\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\r\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPhysical ( uniforms, material ) {\r\n\r\n\t\trefreshUniformsStandard( uniforms, material );\r\n\r\n\t}\r\n\r\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\r\n\r\n\tfunction markUniformsLightsNeedsUpdate ( uniforms, value ) {\r\n\r\n\t\tuniforms.ambientLightColor.needsUpdate = value;\r\n\r\n\t\tuniforms.directionalLights.needsUpdate = value;\r\n\t\tuniforms.pointLights.needsUpdate = value;\r\n\t\tuniforms.spotLights.needsUpdate = value;\r\n\t\tuniforms.hemisphereLights.needsUpdate = value;\r\n\r\n\t}\r\n\r\n\t// Lighting\r\n\r\n\tfunction setupShadows ( lights ) {\r\n\r\n\t\tvar lightShadowsLength = 0;\r\n\r\n\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar light = lights[ i ];\r\n\r\n\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t_lights.shadows.length = lightShadowsLength;\r\n\r\n\t}\r\n\r\n\tfunction setupLights ( lights, camera ) {\r\n\r\n\t\tvar l, ll, light,\r\n\t\tr = 0, g = 0, b = 0,\r\n\t\tcolor,\r\n\t\tintensity,\r\n\t\tdistance,\r\n\t\tshadowMap,\r\n\r\n\t\tviewMatrix = camera.matrixWorldInverse,\r\n\r\n\t\tdirectionalLength = 0,\r\n\t\tpointLength = 0,\r\n\t\tspotLength = 0,\r\n\t\themiLength = 0;\r\n\r\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\tlight = lights[ l ];\r\n\r\n\t\t\tcolor = light.color;\r\n\t\t\tintensity = light.intensity;\r\n\t\t\tdistance = light.distance;\r\n\r\n\t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\r\n\r\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\r\n\r\n\t\t\t\tr += color.r * intensity;\r\n\t\t\t\tg += color.g * intensity;\r\n\t\t\t\tb += color.b * intensity;\r\n\r\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\tvar uniforms = lightCache.get( light );\r\n\r\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\tuniforms.direction.sub( _vector3 );\r\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\r\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\r\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\r\n\t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\r\n\t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\r\n\r\n\t\t\t} else if ( light instanceof THREE.SpotLight ) {\r\n\r\n\t\t\t\tvar uniforms = lightCache.get( light );\r\n\r\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\r\n\t\t\t\tuniforms.distance = distance;\r\n\r\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\tuniforms.direction.sub( _vector3 );\r\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\r\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\r\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\r\n\r\n\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\r\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\r\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\r\n\t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\r\n\t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\r\n\r\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\tvar uniforms = lightCache.get( light );\r\n\r\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\tuniforms.distance = light.distance;\r\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\r\n\r\n\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\r\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\r\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\r\n\r\n\t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\r\n\r\n\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new THREE.Matrix4();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\r\n\t\t\t\t// equal to inverse of the light's position\r\n\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\r\n\t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\r\n\r\n\t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\r\n\r\n\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\r\n\r\n\t\t\t\tvar uniforms = lightCache.get( light );\r\n\r\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\t\t\t\tuniforms.direction.normalize();\r\n\r\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\r\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\r\n\r\n\t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t_lights.ambient[ 0 ] = r;\r\n\t\t_lights.ambient[ 1 ] = g;\r\n\t\t_lights.ambient[ 2 ] = b;\r\n\r\n\t\t_lights.directional.length = directionalLength;\r\n\t\t_lights.spot.length = spotLength;\r\n\t\t_lights.point.length = pointLength;\r\n\t\t_lights.hemi.length = hemiLength;\r\n\r\n\t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\r\n\r\n\t}\r\n\r\n\t// GL state setting\r\n\r\n\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\r\n\r\n\t\tstate.setCullFace( cullFace );\r\n\t\tstate.setFlipSided( frontFaceDirection === THREE.FrontFaceDirectionCW );\r\n\r\n\t};\r\n\r\n\t// Textures\r\n\r\n\tfunction allocTextureUnit() {\r\n\r\n\t\tvar textureUnit = _usedTextureUnits;\r\n\r\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\r\n\r\n\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\r\n\r\n\t\t}\r\n\r\n\t\t_usedTextureUnits += 1;\r\n\r\n\t\treturn textureUnit;\r\n\r\n\t}\r\n\r\n\tfunction setTextureParameters ( textureType, texture, isPowerOfTwoImage ) {\r\n\r\n\t\tvar extension;\r\n\r\n\t\tif ( isPowerOfTwoImage ) {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\r\n\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\r\n\r\n\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\tif ( extension ) {\r\n\r\n\t\t\tif ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\r\n\t\t\tif ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\r\n\r\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\r\n\r\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _this.getMaxAnisotropy() ) );\r\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction uploadTexture( textureProperties, texture, slot ) {\r\n\r\n\t\tif ( textureProperties.__webglInit === undefined ) {\r\n\r\n\t\t\ttextureProperties.__webglInit = true;\r\n\r\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t_infoMemory.textures ++;\r\n\r\n\t\t}\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\r\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\r\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\r\n\r\n\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\r\n\r\n\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\r\n\r\n\t\t\timage = makePowerOfTwo( image );\r\n\r\n\t\t}\r\n\r\n\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\r\n\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\tglType = paramThreeToGL( texture.type );\r\n\r\n\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\r\n\r\n\t\tvar mipmap, mipmaps = texture.mipmaps;\r\n\r\n\t\tif ( texture instanceof THREE.DepthTexture ) {\r\n\r\n\t\t\t// populate depth texture with dummy data\r\n\r\n\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\r\n\r\n\t\t\tif ( texture.type === THREE.FloatType ) {\r\n\r\n\t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\r\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\r\n\r\n\t\t\t} else if ( _isWebGL2 ) {\r\n\r\n\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\r\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\r\n\r\n\t\t} else if ( texture instanceof THREE.DataTexture ) {\r\n\r\n\t\t\t// use manually created mipmaps if available\r\n\t\t\t// if there are no manual mipmaps\r\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\r\n\r\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\r\n\r\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\r\n\r\n\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\r\n\r\n\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// regular Texture (image, video, canvas)\r\n\r\n\t\t\t// use manually created mipmaps if available\r\n\t\t\t// if there are no manual mipmaps\r\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\r\n\r\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\r\n\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t}\r\n\r\n\tfunction setTexture2D( texture, slot ) {\r\n\r\n\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\tvar image = texture.image;\r\n\r\n\t\t\tif ( image === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( image.complete === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\r\n\t}\r\n\r\n\tfunction clampToMaxSize ( image, maxSize ) {\r\n\r\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\r\n\r\n\t\t\t// Warning: Scaling through the canvas will only work with images that use\r\n\t\t\t// premultiplied alpha.\r\n\r\n\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\r\n\r\n\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\tcanvas.width = Math.floor( image.width * scale );\r\n\t\t\tcanvas.height = Math.floor( image.height * scale );\r\n\r\n\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\r\n\r\n\t\t\treturn canvas;\r\n\r\n\t\t}\r\n\r\n\t\treturn image;\r\n\r\n\t}\r\n\r\n\tfunction isPowerOfTwo( image ) {\r\n\r\n\t\treturn THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );\r\n\r\n\t}\r\n\r\n\tfunction textureNeedsPowerOfTwo( texture ) {\r\n\r\n\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;\r\n\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tfunction makePowerOfTwo( image ) {\r\n\r\n\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\r\n\r\n\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\tcanvas.width = THREE.Math.nearestPowerOfTwo( image.width );\r\n\t\t\tcanvas.height = THREE.Math.nearestPowerOfTwo( image.height );\r\n\r\n\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\r\n\r\n\t\t\treturn canvas;\r\n\r\n\t\t}\r\n\r\n\t\treturn image;\r\n\r\n\t}\r\n\r\n\tfunction setTextureCube ( texture, slot ) {\r\n\r\n\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.image.length === 6 ) {\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\r\n\r\n\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\r\n\r\n\t\t\t\t\t_infoMemory.textures ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\r\n\r\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\r\n\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\r\n\t\t\t\tvar isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;\r\n\r\n\t\t\t\tvar cubeImage = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( _this.autoScaleCubemaps && ! isCompressed && ! isDataTexture ) {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar image = cubeImage[ 0 ],\r\n\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\r\n\t\t\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\t\t\tglType = paramThreeToGL( texture.type );\r\n\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( ! isCompressed ) {\r\n\r\n\t\t\t\t\t\tif ( isDataTexture ) {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\r\n\r\n\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setTextureCubeDynamic ( texture, slot ) {\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\r\n\r\n\t}\r\n\r\n\tthis.allocTextureUnit = allocTextureUnit;\r\n\r\n\t//this.setTexture2D = setTexture2D;\r\n\tthis.setTexture2D = ( function() {\r\n\r\n\t\tvar warned = false;\r\n\r\n\t\t// backwards compatibility: peel texture.texture\r\n\t\treturn function( texture, slot ) {\r\n\r\n\t\t\tif ( texture instanceof THREE.WebGLRenderTarget ) {\r\n\r\n\t\t\t\tif ( ! warned ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\t\twarned = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture = texture.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetTexture2D( texture, slot );\r\n\r\n\t\t};\r\n\r\n\t}() );\r\n\r\n\tthis.setTexture = ( function() {\r\n\r\n\t\tvar warned = false;\r\n\r\n\t\treturn function( texture, slot ) {\r\n\r\n\t\t\tif ( ! warned ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\r\n\t\t\t\twarned = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_this.setTexture2D( texture, slot );\r\n\r\n\t\t};\r\n\r\n\t}() );\r\n\r\n\tthis.setTextureCube = ( function() {\r\n\r\n\t\tvar warned = false;\r\n\r\n\t\treturn function( texture, slot ) {\r\n\r\n\t\t\t// backwards compatibility: peel texture.texture\r\n\t\t\tif ( texture instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\t\tif ( ! warned ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\t\twarned = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture = texture.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\r\n\t\t\t// TODO: unify these code paths\r\n\t\t\tif ( texture instanceof THREE.CubeTexture ||\r\n\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\r\n\r\n\t\t\t\t// CompressedTexture can have Array in image :/\r\n\r\n\t\t\t\t// this function alone should take care of cube textures\r\n\t\t\t\tsetTextureCube( texture, slot );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\r\n\r\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}() );\r\n\r\n\t// Render targets\r\n\r\n\t// Setup storage for target texture and bind it to correct framebuffer\r\n\tfunction setupFrameBufferTexture ( framebuffer, renderTarget, attachment, textureTarget ) {\r\n\r\n\t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\r\n\t\tvar glType = paramThreeToGL( renderTarget.texture.type );\r\n\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t}\r\n\r\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\r\n\tfunction setupRenderBufferStorage ( renderbuffer, renderTarget ) {\r\n\r\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// FIXME: We don't support !depth !stencil\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\r\n\r\n\t\t}\r\n\r\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\r\n\r\n\t}\r\n\r\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\r\n\tfunction setupDepthTexture ( framebuffer, renderTarget ) {\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\r\n\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\tif ( !( renderTarget.depthTexture instanceof THREE.DepthTexture ) ) {\r\n\r\n\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\r\n\r\n\t\t}\r\n\r\n\t\t// upload an empty depth texture with framebuffer size\r\n\t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\r\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\r\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\r\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\r\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\r\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\r\n\t\t}\r\n\r\n\t\t_this.setTexture2D( renderTarget.depthTexture, 0 );\r\n\r\n\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\r\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\r\n\r\n\t}\r\n\r\n\t// Setup GL resources for a non-texture depth buffer\r\n\tfunction setupDepthRenderbuffer( renderTarget ) {\r\n\r\n\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\r\n\t\tif ( renderTarget.depthTexture ) {\r\n\r\n\t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\r\n\r\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\r\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\r\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t}\r\n\r\n\t// Set up GL resources for the render target\r\n\tfunction setupRenderTarget( renderTarget ) {\r\n\r\n\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t_infoMemory.textures ++;\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\t\tvar isTargetPowerOfTwo = THREE.Math.isPowerOfTwo( renderTarget.width ) && THREE.Math.isPowerOfTwo( renderTarget.height );\r\n\r\n\t\t// Setup framebuffer\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\r\n\r\n\t\t}\r\n\r\n\t\t// Setup color buffer\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\r\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\r\n\r\n\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Setup depth and stencil buffers\r\n\r\n\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\tsetupDepthRenderbuffer( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.getCurrentRenderTarget = function() {\r\n\r\n\t\treturn _currentRenderTarget;\r\n\r\n\t};\r\n\r\n\tthis.setRenderTarget = function ( renderTarget ) {\r\n\r\n\t\t_currentRenderTarget = renderTarget;\r\n\r\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\r\n\r\n\t\t\tsetupRenderTarget( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\t\tvar framebuffer;\r\n\r\n\t\tif ( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_currentScissor.copy( renderTarget.scissor );\r\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\r\n\r\n\t\t\t_currentViewport.copy( renderTarget.viewport );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tframebuffer = null;\r\n\r\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\r\n\t\t\t_currentScissorTest = _scissorTest;\r\n\r\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\r\n\r\n\t\t}\r\n\r\n\t\tif ( _currentFramebuffer !== framebuffer ) {\r\n\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t\t_currentFramebuffer = framebuffer;\r\n\r\n\t\t}\r\n\r\n\t\tstate.scissor( _currentScissor );\r\n\t\tstate.setScissorTest( _currentScissorTest );\r\n\r\n\t\tstate.viewport( _currentViewport );\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\r\n\r\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\r\n\t\tif ( framebuffer ) {\r\n\r\n\t\t\tvar restore = false;\r\n\r\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\r\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\t\t\trestore = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tvar texture = renderTarget.texture;\r\n\r\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.type !== THREE.UnsignedByteType &&\r\n\t\t\t\t     paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) &&\r\n\t\t\t\t     ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) ) &&\r\n\t\t\t\t     ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\r\n\r\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\r\n\r\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\r\n\r\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} finally {\r\n\r\n\t\t\t\tif ( restore ) {\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction updateRenderTargetMipmap( renderTarget ) {\r\n\r\n\t\tvar target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\r\n\t\tvar texture = properties.get( renderTarget.texture ).__webglTexture;\r\n\r\n\t\tstate.bindTexture( target, texture );\r\n\t\t_gl.generateMipmap( target );\r\n\t\tstate.bindTexture( target, null );\r\n\r\n\t}\r\n\r\n\t// Fallback filters for non-power-of-2 textures\r\n\r\n\tfunction filterFallback ( f ) {\r\n\r\n\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\r\n\r\n\t\t\treturn _gl.NEAREST;\r\n\r\n\t\t}\r\n\r\n\t\treturn _gl.LINEAR;\r\n\r\n\t}\r\n\r\n\t// Map three.js constants to WebGL constants\r\n\r\n\tfunction paramThreeToGL ( p ) {\r\n\r\n\t\tvar extension;\r\n\r\n\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\r\n\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\r\n\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\r\n\r\n\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\r\n\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\r\n\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\r\n\r\n\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\r\n\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\r\n\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\r\n\r\n\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\r\n\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\r\n\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\r\n\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\r\n\r\n\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\r\n\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\r\n\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\r\n\t\tif ( p === THREE.IntType ) return _gl.INT;\r\n\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\r\n\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\r\n\r\n\t\textension = extensions.get( 'OES_texture_half_float' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;\r\n\r\n\t\t}\r\n\r\n\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\r\n\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\r\n\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\r\n\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\r\n\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\r\n\t\tif ( p === THREE.DepthFormat ) return _gl.DEPTH_COMPONENT;\r\n\r\n\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\r\n\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\r\n\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\r\n\r\n\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\r\n\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\r\n\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\r\n\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\r\n\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\r\n\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\r\n\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\r\n\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\r\n\r\n\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\r\n\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\r\n\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\r\n\r\n\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n\t\t\tif ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n\t\t\tif ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n\t\t\tif ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'EXT_blend_minmax' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.MinEquation ) return extension.MIN_EXT;\r\n\t\t\tif ( p === THREE.MaxEquation ) return extension.MAX_EXT;\r\n\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/WebGLRenderTarget.js\r\n\r\n/**\r\n * @author szimek / https://github.com/szimek/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author Marius Kintel / https://github.com/kintel\r\n */\r\n\r\n/*\r\n In options, we can specify:\r\n * Texture parameters for an auto-generated target texture\r\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\r\n*/\r\nTHREE.WebGLRenderTarget = function ( width, height, options ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\tthis.scissor = new THREE.Vector4( 0, 0, width, height );\r\n\tthis.scissorTest = false;\r\n\r\n\tthis.viewport = new THREE.Vector4( 0, 0, width, height );\r\n\r\n\toptions = options || {};\r\n\r\n\tif ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;\r\n\r\n\tthis.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\r\n\r\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\r\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\r\n\tthis.depthTexture = null;\r\n\r\n};\r\n\r\nObject.assign( THREE.WebGLRenderTarget.prototype, THREE.EventDispatcher.prototype, {\r\n\r\n\tsetSize: function ( width, height ) {\r\n\r\n\t\tif ( this.width !== width || this.height !== height ) {\r\n\r\n\t\t\tthis.width = width;\r\n\t\t\tthis.height = height;\r\n\r\n\t\t\tthis.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis.viewport.set( 0, 0, width, height );\r\n\t\tthis.scissor.set( 0, 0, width, height );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.width = source.width;\r\n\t\tthis.height = source.height;\r\n\r\n\t\tthis.viewport.copy( source.viewport );\r\n\r\n\t\tthis.texture = source.texture.clone();\r\n\r\n\t\tthis.depthBuffer = source.depthBuffer;\r\n\t\tthis.stencilBuffer = source.stencilBuffer;\r\n\t\tthis.depthTexture = source.depthTexture;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/renderers/WebGLRenderTargetCube.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com\r\n */\r\n\r\nTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\r\n\r\n\tTHREE.WebGLRenderTarget.call( this, width, height, options );\r\n\r\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\r\n\tthis.activeMipMapLevel = 0;\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\r\nTHREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;\r\n\r\n// File:src/renderers/webgl/WebGLBufferRenderer.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {\r\n\r\n\tvar mode;\r\n\r\n\tfunction setMode( value ) {\r\n\r\n\t\tmode = value;\r\n\r\n\t}\r\n\r\n\tfunction render( start, count ) {\r\n\r\n\t\t_gl.drawArrays( mode, start, count );\r\n\r\n\t\t_infoRender.calls ++;\r\n\t\t_infoRender.vertices += count;\r\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\r\n\r\n\t}\r\n\r\n\tfunction renderInstances( geometry ) {\r\n\r\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\tif ( extension === null ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar position = geometry.attributes.position;\r\n\r\n\t\tvar count = 0;\r\n\r\n\t\tif ( position instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\tcount = position.data.count;\r\n\r\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcount = position.count;\r\n\r\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\r\n\r\n\t\t}\r\n\r\n\t\t_infoRender.calls ++;\r\n\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\r\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\r\n\r\n\t}\r\n\r\n\tthis.setMode = setMode;\r\n\tthis.render = render;\r\n\tthis.renderInstances = renderInstances;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLClipping.js\r\n\r\nTHREE.WebGLClipping = function() {\r\n\r\n\tvar scope = this,\r\n\r\n\t\tglobalState = null,\r\n\t\tnumGlobalPlanes = 0,\r\n\t\tlocalClippingEnabled = false,\r\n\t\trenderingShadows = false,\r\n\r\n\t\tplane = new THREE.Plane(),\r\n\t\tviewNormalMatrix = new THREE.Matrix3(),\r\n\r\n\t\tuniform = { value: null, needsUpdate: false };\r\n\r\n\tthis.uniform = uniform;\r\n\tthis.numPlanes = 0;\r\n\r\n\tthis.init = function( planes, enableLocalClipping, camera ) {\r\n\r\n\t\tvar enabled =\r\n\t\t\tplanes.length !== 0 ||\r\n\t\t\tenableLocalClipping ||\r\n\t\t\t// enable state of previous frame - the clipping code has to\r\n\t\t\t// run another frame in order to reset the state:\r\n\t\t\tnumGlobalPlanes !== 0 ||\r\n\t\t\tlocalClippingEnabled;\r\n\r\n\t\tlocalClippingEnabled = enableLocalClipping;\r\n\r\n\t\tglobalState = projectPlanes( planes, camera, 0 );\r\n\t\tnumGlobalPlanes = planes.length;\r\n\r\n\t\treturn enabled;\r\n\r\n\t};\r\n\r\n\tthis.beginShadows = function() {\r\n\r\n\t\trenderingShadows = true;\r\n\t\tprojectPlanes( null );\r\n\r\n\t};\r\n\r\n\tthis.endShadows = function() {\r\n\r\n\t\trenderingShadows = false;\r\n\t\tresetGlobalState();\r\n\r\n\t};\r\n\r\n\tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\r\n\r\n\t\tif ( ! localClippingEnabled ||\r\n\t\t\t\tplanes === null || planes.length === 0 ||\r\n\t\t\t\trenderingShadows && ! clipShadows ) {\r\n\t\t\t// there's no local clipping\r\n\r\n\t\t\tif ( renderingShadows ) {\r\n\t\t\t\t// there's no global clipping\r\n\r\n\t\t\t\tprojectPlanes( null );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresetGlobalState();\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\r\n\t\t\t\tlGlobal = nGlobal * 4,\r\n\r\n\t\t\t\tdstArray = cache.clippingState || null;\r\n\r\n\t\t\tuniform.value = dstArray; // ensure unique state\r\n\r\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\r\n\r\n\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\r\n\r\n\t\t\t\tdstArray[ i ] = globalState[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcache.clippingState = dstArray;\r\n\t\t\tthis.numPlanes += nGlobal;\r\n\r\n\t\t}\r\n\r\n\r\n\t};\r\n\r\n\tfunction resetGlobalState() {\r\n\r\n\t\tif ( uniform.value !== globalState ) {\r\n\r\n\t\t\tuniform.value = globalState;\r\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\r\n\r\n\t\t}\r\n\r\n\t\tscope.numPlanes = numGlobalPlanes;\r\n\r\n\t}\r\n\r\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\r\n\r\n\t\tvar nPlanes = planes !== null ? planes.length : 0,\r\n\t\t\tdstArray = null;\r\n\r\n\t\tif ( nPlanes !== 0 ) {\r\n\r\n\t\t\tdstArray = uniform.value;\r\n\r\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\r\n\r\n\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\r\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\r\n\r\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\r\n\r\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\r\n\r\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var i = 0, i4 = dstOffset;\r\n\t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\r\n\r\n\t\t\t\t\tplane.copy( planes[ i ] ).\r\n\t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\r\n\r\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\r\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniform.value = dstArray;\r\n\t\t\tuniform.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tscope.numPlanes = nPlanes;\r\n\t\treturn dstArray;\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {\r\n\r\n\tvar mode;\r\n\r\n\tfunction setMode( value ) {\r\n\r\n\t\tmode = value;\r\n\r\n\t}\r\n\r\n\tvar type, size;\r\n\r\n\tfunction setIndex( index ) {\r\n\r\n\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\r\n\r\n\t\t\ttype = _gl.UNSIGNED_INT;\r\n\t\t\tsize = 4;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttype = _gl.UNSIGNED_SHORT;\r\n\t\t\tsize = 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction render( start, count ) {\r\n\r\n\t\t_gl.drawElements( mode, count, type, start * size );\r\n\r\n\t\t_infoRender.calls ++;\r\n\t\t_infoRender.vertices += count;\r\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\r\n\r\n\t}\r\n\r\n\tfunction renderInstances( geometry, start, count ) {\r\n\r\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\tif ( extension === null ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\r\n\r\n\t\t_infoRender.calls ++;\r\n\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\r\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\r\n\t}\r\n\r\n\tthis.setMode = setMode;\r\n\tthis.setIndex = setIndex;\r\n\tthis.render = render;\r\n\tthis.renderInstances = renderInstances;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLExtensions.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLExtensions = function ( gl ) {\r\n\r\n\tvar extensions = {};\r\n\r\n\tthis.get = function ( name ) {\r\n\r\n\t\tif ( extensions[ name ] !== undefined ) {\r\n\r\n\t\t\treturn extensions[ name ];\r\n\r\n\t\t}\r\n\r\n\t\tvar extension;\r\n\r\n\t\tswitch ( name ) {\r\n\r\n\t\t\tcase 'WEBGL_depth_texture':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'EXT_texture_filter_anisotropic':\r\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'WEBGL_compressed_texture_etc1':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\textension = gl.getExtension( name );\r\n\r\n\t\t}\r\n\r\n\t\tif ( extension === null ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\textensions[ name ] = extension;\r\n\r\n\t\treturn extension;\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLCapabilities.js\r\n\r\nTHREE.WebGLCapabilities = function ( gl, extensions, parameters ) {\r\n\r\n\tfunction getMaxPrecision( precision ) {\r\n\r\n\t\tif ( precision === 'highp' ) {\r\n\r\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\r\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\r\n\r\n\t\t\t\treturn 'highp';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprecision = 'mediump';\r\n\r\n\t\t}\r\n\r\n\t\tif ( precision === 'mediump' ) {\r\n\r\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\r\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\r\n\r\n\t\t\t\treturn 'mediump';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn 'lowp';\r\n\r\n\t}\r\n\r\n\tthis.getMaxPrecision = getMaxPrecision;\r\n\r\n\tthis.precision = parameters.precision !== undefined ? parameters.precision : 'highp';\r\n\tthis.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\r\n\r\n\tthis.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\tthis.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n\tthis.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n\tthis.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n\tthis.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n\tthis.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n\tthis.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\r\n\tthis.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\r\n\tthis.vertexTextures = this.maxVertexTextures > 0;\r\n\tthis.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\r\n\tthis.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\r\n\r\n\tvar _maxPrecision = getMaxPrecision( this.precision );\r\n\r\n\tif ( _maxPrecision !== this.precision ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );\r\n\t\tthis.precision = _maxPrecision;\r\n\r\n\t}\r\n\r\n\tif ( this.logarithmicDepthBuffer ) {\r\n\r\n\t\tthis.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLGeometries.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLGeometries = function ( gl, properties, info ) {\r\n\r\n\tvar geometries = {};\r\n\r\n\tfunction get( object ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( geometries[ geometry.id ] !== undefined ) {\r\n\r\n\t\t\treturn geometries[ geometry.id ];\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tvar buffergeometry;\r\n\r\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tbuffergeometry = geometry;\r\n\r\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tif ( geometry._bufferGeometry === undefined ) {\r\n\r\n\t\t\t\tgeometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbuffergeometry = geometry._bufferGeometry;\r\n\r\n\t\t}\r\n\r\n\t\tgeometries[ geometry.id ] = buffergeometry;\r\n\r\n\t\tinfo.memory.geometries ++;\r\n\r\n\t\treturn buffergeometry;\r\n\r\n\t}\r\n\r\n\tfunction onGeometryDispose( event ) {\r\n\r\n\t\tvar geometry = event.target;\r\n\t\tvar buffergeometry = geometries[ geometry.id ];\r\n\r\n\t\tif ( buffergeometry.index !== null ) {\r\n\r\n\t\t\tdeleteAttribute( buffergeometry.index );\r\n\r\n\t\t}\r\n\r\n\t\tdeleteAttributes( buffergeometry.attributes );\r\n\r\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tdelete geometries[ geometry.id ];\r\n\r\n\t\t// TODO\r\n\r\n\t\tvar property = properties.get( geometry );\r\n\r\n\t\tif ( property.wireframe ) {\r\n\r\n\t\t\tdeleteAttribute( property.wireframe );\r\n\r\n\t\t}\r\n\r\n\t\tproperties.delete( geometry );\r\n\r\n\t\tvar bufferproperty = properties.get( buffergeometry );\r\n\r\n\t\tif ( bufferproperty.wireframe ) {\r\n\r\n\t\t\tdeleteAttribute( bufferproperty.wireframe );\r\n\r\n\t\t}\r\n\r\n\t\tproperties.delete( buffergeometry );\r\n\r\n\t\t//\r\n\r\n\t\tinfo.memory.geometries --;\r\n\r\n\t}\r\n\r\n\tfunction getAttributeBuffer( attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\r\n\r\n\t\t}\r\n\r\n\t\treturn properties.get( attribute ).__webglBuffer;\r\n\r\n\t}\r\n\r\n\tfunction deleteAttribute( attribute ) {\r\n\r\n\t\tvar buffer = getAttributeBuffer( attribute );\r\n\r\n\t\tif ( buffer !== undefined ) {\r\n\r\n\t\t\tgl.deleteBuffer( buffer );\r\n\t\t\tremoveAttributeBuffer( attribute );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction deleteAttributes( attributes ) {\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tdeleteAttribute( attributes[ name ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction removeAttributeBuffer( attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\tproperties.delete( attribute.data );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tproperties.delete( attribute );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.get = get;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLLights.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLLights = function () {\r\n\r\n\tvar lights = {};\r\n\r\n\tthis.get = function ( light ) {\r\n\r\n\t\tif ( lights[ light.id ] !== undefined ) {\r\n\r\n\t\t\treturn lights[ light.id ];\r\n\r\n\t\t}\r\n\r\n\t\tvar uniforms;\r\n\r\n\t\tswitch ( light.type ) {\r\n\r\n\t\t\tcase 'DirectionalLight':\r\n\t\t\t\tuniforms = {\r\n\t\t\t\t\tdirection: new THREE.Vector3(),\r\n\t\t\t\t\tcolor: new THREE.Color(),\r\n\r\n\t\t\t\t\tshadow: false,\r\n\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'SpotLight':\r\n\t\t\t\tuniforms = {\r\n\t\t\t\t\tposition: new THREE.Vector3(),\r\n\t\t\t\t\tdirection: new THREE.Vector3(),\r\n\t\t\t\t\tcolor: new THREE.Color(),\r\n\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\tconeCos: 0,\r\n\t\t\t\t\tpenumbraCos: 0,\r\n\t\t\t\t\tdecay: 0,\r\n\r\n\t\t\t\t\tshadow: false,\r\n\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'PointLight':\r\n\t\t\t\tuniforms = {\r\n\t\t\t\t\tposition: new THREE.Vector3(),\r\n\t\t\t\t\tcolor: new THREE.Color(),\r\n\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\tdecay: 0,\r\n\r\n\t\t\t\t\tshadow: false,\r\n\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'HemisphereLight':\r\n\t\t\t\tuniforms = {\r\n\t\t\t\t\tdirection: new THREE.Vector3(),\r\n\t\t\t\t\tskyColor: new THREE.Color(),\r\n\t\t\t\t\tgroundColor: new THREE.Color()\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tlights[ light.id ] = uniforms;\r\n\r\n\t\treturn uniforms;\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLObjects.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLObjects = function ( gl, properties, info ) {\r\n\r\n\tvar geometries = new THREE.WebGLGeometries( gl, properties, info );\r\n\r\n\t//\r\n\r\n\tfunction update( object ) {\r\n\r\n\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\r\n\r\n\t\tvar geometry = geometries.get( object );\r\n\r\n\t\tif ( object.geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tgeometry.updateFromObject( object );\r\n\r\n\t\t}\r\n\r\n\t\tvar index = geometry.index;\r\n\t\tvar attributes = geometry.attributes;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\r\n\r\n\t\t}\r\n\r\n\t\t// morph targets\r\n\r\n\t\tvar morphAttributes = geometry.morphAttributes;\r\n\r\n\t\tfor ( var name in morphAttributes ) {\r\n\r\n\t\t\tvar array = morphAttributes[ name ];\r\n\r\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n\tfunction updateAttribute( attribute, bufferType ) {\r\n\r\n\t\tvar data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;\r\n\r\n\t\tvar attributeProperties = properties.get( data );\r\n\r\n\t\tif ( attributeProperties.__webglBuffer === undefined ) {\r\n\r\n\t\t\tcreateBuffer( attributeProperties, data, bufferType );\r\n\r\n\t\t} else if ( attributeProperties.version !== data.version ) {\r\n\r\n\t\t\tupdateBuffer( attributeProperties, data, bufferType );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction createBuffer( attributeProperties, data, bufferType ) {\r\n\r\n\t\tattributeProperties.__webglBuffer = gl.createBuffer();\r\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\r\n\r\n\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\r\n\t\tgl.bufferData( bufferType, data.array, usage );\r\n\r\n\t\tattributeProperties.version = data.version;\r\n\r\n\t}\r\n\r\n\tfunction updateBuffer( attributeProperties, data, bufferType ) {\r\n\r\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\r\n\r\n\t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\r\n\r\n\t\t\t// Not using update ranges\r\n\r\n\t\t\tgl.bufferSubData( bufferType, 0, data.array );\r\n\r\n\t\t} else if ( data.updateRange.count === 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\r\n\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\r\n\r\n\t\t\tdata.updateRange.count = 0; // reset range\r\n\r\n\t\t}\r\n\r\n\t\tattributeProperties.version = data.version;\r\n\r\n\t}\r\n\r\n\tfunction getAttributeBuffer( attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\r\n\r\n\t\t}\r\n\r\n\t\treturn properties.get( attribute ).__webglBuffer;\r\n\r\n\t}\r\n\r\n\tfunction getWireframeAttribute( geometry ) {\r\n\r\n\t\tvar property = properties.get( geometry );\r\n\r\n\t\tif ( property.wireframe !== undefined ) {\r\n\r\n\t\t\treturn property.wireframe;\r\n\r\n\t\t}\r\n\r\n\t\tvar indices = [];\r\n\r\n\t\tvar index = geometry.index;\r\n\t\tvar attributes = geometry.attributes;\r\n\t\tvar position = attributes.position;\r\n\r\n\t\t// console.time( 'wireframe' );\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tvar edges = {};\r\n\t\t\tvar array = index.array;\r\n\r\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\tvar a = array[ i + 0 ];\r\n\t\t\t\tvar b = array[ i + 1 ];\r\n\t\t\t\tvar c = array[ i + 2 ];\r\n\r\n\t\t\t\tif ( checkEdge( edges, a, b ) ) indices.push( a, b );\r\n\t\t\t\tif ( checkEdge( edges, b, c ) ) indices.push( b, c );\r\n\t\t\t\tif ( checkEdge( edges, c, a ) ) indices.push( c, a );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar array = attributes.position.array;\r\n\r\n\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\r\n\r\n\t\t\t\tvar a = i + 0;\r\n\t\t\t\tvar b = i + 1;\r\n\t\t\t\tvar c = i + 2;\r\n\r\n\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// console.timeEnd( 'wireframe' );\r\n\r\n\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\r\n\t\tvar attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );\r\n\r\n\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\r\n\r\n\t\tproperty.wireframe = attribute;\r\n\r\n\t\treturn attribute;\r\n\r\n\t}\r\n\r\n\tfunction checkEdge( edges, a, b ) {\r\n\r\n\t\tif ( a > b ) {\r\n\r\n\t\t\tvar tmp = a;\r\n\t\t\ta = b;\r\n\t\t\tb = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tvar list = edges[ a ];\r\n\r\n\t\tif ( list === undefined ) {\r\n\r\n\t\t\tedges[ a ] = [ b ];\r\n\t\t\treturn true;\r\n\r\n\t\t} else if ( list.indexOf( b ) === -1 ) {\r\n\r\n\t\t\tlist.push( b );\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tthis.getAttributeBuffer = getAttributeBuffer;\r\n\tthis.getWireframeAttribute = getWireframeAttribute;\r\n\r\n\tthis.update = update;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLProgram.js\r\n\r\nTHREE.WebGLProgram = ( function () {\r\n\r\n\tvar programIdCount = 0;\r\n\r\n\tfunction getEncodingComponents( encoding ) {\r\n\r\n\t\tswitch ( encoding ) {\r\n\r\n\t\t\tcase THREE.LinearEncoding:\r\n\t\t\t\treturn [ 'Linear','( value )' ];\r\n\t\t\tcase THREE.sRGBEncoding:\r\n\t\t\t\treturn [ 'sRGB','( value )' ];\r\n\t\t\tcase THREE.RGBEEncoding:\r\n\t\t\t\treturn [ 'RGBE','( value )' ];\r\n\t\t\tcase THREE.RGBM7Encoding:\r\n\t\t\t\treturn [ 'RGBM','( value, 7.0 )' ];\r\n\t\t\tcase THREE.RGBM16Encoding:\r\n\t\t\t\treturn [ 'RGBM','( value, 16.0 )' ];\r\n\t\t\tcase THREE.RGBDEncoding:\r\n\t\t\t\treturn [ 'RGBD','( value, 256.0 )' ];\r\n\t\t\tcase THREE.GammaEncoding:\r\n\t\t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\r\n\r\n\t\tvar components = getEncodingComponents( encoding );\r\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\r\n\r\n\t}\r\n\r\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\r\n\r\n\t\tvar components = getEncodingComponents( encoding );\r\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\r\n\r\n\t}\r\n\r\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\r\n\r\n\t\tvar toneMappingName;\r\n\r\n\t\tswitch ( toneMapping ) {\r\n\r\n\t\t\tcase THREE.LinearToneMapping:\r\n\t\t\t\ttoneMappingName = \"Linear\";\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.ReinhardToneMapping:\r\n\t\t\t\ttoneMappingName = \"Reinhard\";\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.Uncharted2ToneMapping:\r\n\t\t\t\ttoneMappingName = \"Uncharted2\";\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.CineonToneMapping:\r\n\t\t\t\ttoneMappingName = \"OptimizedCineon\";\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\r\n\r\n\t\t}\r\n\r\n\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\r\n\r\n\t}\r\n\r\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\r\n\r\n\t\textensions = extensions || {};\r\n\r\n\t\tvar chunks = [\r\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\r\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\r\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\r\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\r\n\t\t];\r\n\r\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction generateDefines( defines ) {\r\n\r\n\t\tvar chunks = [];\r\n\r\n\t\tfor ( var name in defines ) {\r\n\r\n\t\t\tvar value = defines[ name ];\r\n\r\n\t\t\tif ( value === false ) continue;\r\n\r\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction fetchAttributeLocations( gl, program, identifiers ) {\r\n\r\n\t\tvar attributes = {};\r\n\r\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\r\n\r\n\t\tfor ( var i = 0; i < n; i ++ ) {\r\n\r\n\t\t\tvar info = gl.getActiveAttrib( program, i );\r\n\t\t\tvar name = info.name;\r\n\r\n\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\r\n\r\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\r\n\r\n\t\t}\r\n\r\n\t\treturn attributes;\r\n\r\n\t}\r\n\r\n\tfunction filterEmptyLine( string ) {\r\n\r\n\t\treturn string !== '';\r\n\r\n\t}\r\n\r\n\tfunction replaceLightNums( string, parameters ) {\r\n\r\n\t\treturn string\r\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\r\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\r\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\r\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\r\n\r\n\t}\r\n\r\n\tfunction parseIncludes( string ) {\r\n\r\n\t\tvar pattern = /#include +<([\\w\\d.]+)>/g;\r\n\r\n\t\tfunction replace( match, include ) {\r\n\r\n\t\t\tvar replace = THREE.ShaderChunk[ include ];\r\n\r\n\t\t\tif ( replace === undefined ) {\r\n\r\n\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn parseIncludes( replace );\r\n\r\n\t\t}\r\n\r\n\t\treturn string.replace( pattern, replace );\r\n\r\n\t}\r\n\r\n\tfunction unrollLoops( string ) {\r\n\r\n\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\r\n\r\n\t\tfunction replace( match, start, end, snippet ) {\r\n\r\n\t\t\tvar unroll = '';\r\n\r\n\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\r\n\r\n\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn unroll;\r\n\r\n\t\t}\r\n\r\n\t\treturn string.replace( pattern, replace );\r\n\r\n\t}\r\n\r\n\treturn function WebGLProgram( renderer, code, material, parameters ) {\r\n\r\n\t\tvar gl = renderer.context;\r\n\r\n\t\tvar extensions = material.extensions;\r\n\t\tvar defines = material.defines;\r\n\r\n\t\tvar vertexShader = material.__webglShader.vertexShader;\r\n\t\tvar fragmentShader = material.__webglShader.fragmentShader;\r\n\r\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\r\n\r\n\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\r\n\r\n\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\r\n\r\n\t\t}\r\n\r\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\r\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\r\n\t\tif ( parameters.envMap ) {\r\n\r\n\t\t\tswitch ( material.envMap.mapping ) {\r\n\r\n\t\t\t\tcase THREE.CubeReflectionMapping:\r\n\t\t\t\tcase THREE.CubeRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.CubeUVReflectionMapping:\r\n\t\t\t\tcase THREE.CubeUVRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.EquirectangularReflectionMapping:\r\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.SphericalReflectionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( material.envMap.mapping ) {\r\n\r\n\t\t\t\tcase THREE.CubeRefractionMapping:\r\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( material.combine ) {\r\n\r\n\t\t\t\tcase THREE.MultiplyOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.MixOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.AddOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\r\n\r\n\t\t// console.log( 'building new program ' );\r\n\r\n\t\t//\r\n\r\n\t\tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\r\n\r\n\t\tvar customDefines = generateDefines( defines );\r\n\r\n\t\t//\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar prefixVertex, prefixFragment;\r\n\r\n\t\tif ( material instanceof THREE.RawShaderMaterial ) {\r\n\r\n\t\t\tprefixVertex = '';\r\n\t\t\tprefixFragment = '';\r\n\r\n\t\t} else {\r\n\r\n\t\t\tprefixVertex = [\r\n\r\n\t\t\t\t'precision ' + parameters.precision + ' float;',\r\n\t\t\t\t'precision ' + parameters.precision + ' int;',\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\r\n\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\r\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\r\n\r\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\r\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\r\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\t\t\t\t'uniform mat4 modelMatrix;',\r\n\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform mat3 normalMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\r\n\t\t\t\t'attribute vec3 position;',\r\n\t\t\t\t'attribute vec3 normal;',\r\n\t\t\t\t'attribute vec2 uv;',\r\n\r\n\t\t\t\t'#ifdef USE_COLOR',\r\n\r\n\t\t\t\t'\tattribute vec3 color;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\r\n\r\n\t\t\t\t'\tattribute vec3 morphTarget0;',\r\n\t\t\t\t'\tattribute vec3 morphTarget1;',\r\n\t\t\t\t'\tattribute vec3 morphTarget2;',\r\n\t\t\t\t'\tattribute vec3 morphTarget3;',\r\n\r\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\r\n\r\n\t\t\t\t'\t#else',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\r\n\r\n\t\t\t\t'\t#endif',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_SKINNING',\r\n\r\n\t\t\t\t'\tattribute vec4 skinIndex;',\r\n\t\t\t\t'\tattribute vec4 skinWeight;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tprefixFragment = [\r\n\r\n\t\t\t\tcustomExtensions,\r\n\r\n\t\t\t\t'precision ' + parameters.precision + ' float;',\r\n\t\t\t\t'precision ' + parameters.precision + ' int;',\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\r\n\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\r\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\r\n\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\r\n\r\n\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\t\t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\r\n\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\r\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\r\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? THREE.ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\r\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\r\n\r\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? THREE.ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\r\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\r\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\r\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\r\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\r\n\r\n\t\t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t}\r\n\r\n\t\tvertexShader = parseIncludes( vertexShader, parameters );\r\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\r\n\r\n\t\tfragmentShader = parseIncludes( fragmentShader, parameters );\r\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\r\n\r\n\t\tif ( material instanceof THREE.ShaderMaterial === false ) {\r\n\r\n\t\t\tvertexShader = unrollLoops( vertexShader );\r\n\t\t\tfragmentShader = unrollLoops( fragmentShader );\r\n\r\n\t\t}\r\n\r\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\r\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\r\n\r\n\t\t// console.log( '*VERTEX*', vertexGlsl );\r\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\r\n\r\n\t\tvar glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\r\n\t\tvar glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\r\n\r\n\t\tgl.attachShader( program, glVertexShader );\r\n\t\tgl.attachShader( program, glFragmentShader );\r\n\r\n\t\t// Force a particular attribute to index 0.\r\n\r\n\t\tif ( material.index0AttributeName !== undefined ) {\r\n\r\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\r\n\r\n\t\t} else if ( parameters.morphTargets === true ) {\r\n\r\n\t\t\t// programs with morphTargets displace position out of attribute 0\r\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\r\n\r\n\t\t}\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\tvar programLog = gl.getProgramInfoLog( program );\r\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\r\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\r\n\r\n\t\tvar runnable = true;\r\n\t\tvar haveDiagnostics = true;\r\n\r\n\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\r\n\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\r\n\r\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\r\n\r\n\t\t\trunnable = false;\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\r\n\r\n\t\t} else if ( programLog !== '' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\r\n\r\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\r\n\r\n\t\t\thaveDiagnostics = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( haveDiagnostics ) {\r\n\r\n\t\t\tthis.diagnostics = {\r\n\r\n\t\t\t\trunnable: runnable,\r\n\t\t\t\tmaterial: material,\r\n\r\n\t\t\t\tprogramLog: programLog,\r\n\r\n\t\t\t\tvertexShader: {\r\n\r\n\t\t\t\t\tlog: vertexLog,\r\n\t\t\t\t\tprefix: prefixVertex\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfragmentShader: {\r\n\r\n\t\t\t\t\tlog: fragmentLog,\r\n\t\t\t\t\tprefix: prefixFragment\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// clean up\r\n\r\n\t\tgl.deleteShader( glVertexShader );\r\n\t\tgl.deleteShader( glFragmentShader );\r\n\r\n\t\t// set up caching for uniform locations\r\n\r\n\t\tvar cachedUniforms;\r\n\r\n\t\tthis.getUniforms = function() {\r\n\r\n\t\t\tif ( cachedUniforms === undefined ) {\r\n\r\n\t\t\t\tcachedUniforms =\r\n\t\t\t\t\t\tnew THREE.WebGLUniforms( gl, program, renderer );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedUniforms;\r\n\r\n\t\t};\r\n\r\n\t\t// set up caching for attribute locations\r\n\r\n\t\tvar cachedAttributes;\r\n\r\n\t\tthis.getAttributes = function() {\r\n\r\n\t\t\tif ( cachedAttributes === undefined ) {\r\n\r\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedAttributes;\r\n\r\n\t\t};\r\n\r\n\t\t// free resource\r\n\r\n\t\tthis.destroy = function() {\r\n\r\n\t\t\tgl.deleteProgram( program );\r\n\t\t\tthis.program = undefined;\r\n\r\n\t\t};\r\n\r\n\t\t// DEPRECATED\r\n\r\n\t\tObject.defineProperties( this, {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\tget: function() {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\r\n\t\t\t\t\treturn this.getUniforms();\r\n\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tattributes: {\r\n\t\t\t\tget: function() {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\r\n\t\t\t\t\treturn this.getAttributes();\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\r\n\t\t//\r\n\r\n\t\tthis.id = programIdCount ++;\r\n\t\tthis.code = code;\r\n\t\tthis.usedTimes = 1;\r\n\t\tthis.program = program;\r\n\t\tthis.vertexShader = glVertexShader;\r\n\t\tthis.fragmentShader = glFragmentShader;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/renderers/webgl/WebGLPrograms.js\r\n\r\nTHREE.WebGLPrograms = function ( renderer, capabilities ) {\r\n\r\n\tvar programs = [];\r\n\r\n\tvar shaderIDs = {\r\n\t\tMeshDepthMaterial: 'depth',\r\n\t\tMeshNormalMaterial: 'normal',\r\n\t\tMeshBasicMaterial: 'basic',\r\n\t\tMeshLambertMaterial: 'lambert',\r\n\t\tMeshPhongMaterial: 'phong',\r\n\t\tMeshStandardMaterial: 'physical',\r\n\t\tMeshPhysicalMaterial: 'physical',\r\n\t\tLineBasicMaterial: 'basic',\r\n\t\tLineDashedMaterial: 'dashed',\r\n\t\tPointsMaterial: 'points'\r\n\t};\r\n\r\n\tvar parameterNames = [\r\n\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\r\n\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\r\n\t\t\"roughnessMap\", \"metalnessMap\",\r\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\r\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\r\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\r\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\r\n\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\r\n\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\r\n\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\r\n\t];\r\n\r\n\r\n\tfunction allocateBones ( object ) {\r\n\r\n\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\r\n\r\n\t\t\treturn 1024;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// default for when object is not specified\r\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\r\n\t\t\t//\r\n\t\t\t//  - leave some extra space for other uniforms\r\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\r\n\t\t\t//    (up to 54 should be safe)\r\n\r\n\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\r\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\r\n\r\n\t\t\tvar maxBones = nVertexMatrices;\r\n\r\n\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\r\n\r\n\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\r\n\r\n\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn maxBones;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\r\n\r\n\t\tvar encoding;\r\n\r\n\t\tif ( ! map ) {\r\n\r\n\t\t\tencoding = THREE.LinearEncoding;\r\n\r\n\t\t} else if ( map instanceof THREE.Texture ) {\r\n\r\n\t\t\tencoding = map.encoding;\r\n\r\n\t\t} else if ( map instanceof THREE.WebGLRenderTarget ) {\r\n\r\n\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\r\n\t\t\tencoding = map.texture.encoding;\r\n\r\n\t\t}\r\n\r\n\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\r\n\t\tif ( encoding === THREE.LinearEncoding && gammaOverrideLinear ) {\r\n\r\n\t\t\tencoding = THREE.GammaEncoding;\r\n\r\n\t\t}\r\n\r\n\t\treturn encoding;\r\n\r\n\t}\r\n\r\n\tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\r\n\r\n\t\tvar shaderID = shaderIDs[ material.type ];\r\n\r\n\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t// (not to blow over maxLights budget)\r\n\r\n\t\tvar maxBones = allocateBones( object );\r\n\t\tvar precision = renderer.getPrecision();\r\n\r\n\t\tif ( material.precision !== null ) {\r\n\r\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\r\n\r\n\t\t\tif ( precision !== material.precision ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\r\n\r\n\t\tvar parameters = {\r\n\r\n\t\t\tshaderID: shaderID,\r\n\r\n\t\t\tprecision: precision,\r\n\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\r\n\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\r\n\t\t\tmap: !! material.map,\r\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\r\n\t\t\tenvMap: !! material.envMap,\r\n\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\r\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\r\n\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === THREE.CubeUVReflectionMapping ) || ( material.envMap.mapping === THREE.CubeUVRefractionMapping ) ),\r\n\t\t\tlightMap: !! material.lightMap,\r\n\t\t\taoMap: !! material.aoMap,\r\n\t\t\temissiveMap: !! material.emissiveMap,\r\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\r\n\t\t\tbumpMap: !! material.bumpMap,\r\n\t\t\tnormalMap: !! material.normalMap,\r\n\t\t\tdisplacementMap: !! material.displacementMap,\r\n\t\t\troughnessMap: !! material.roughnessMap,\r\n\t\t\tmetalnessMap: !! material.metalnessMap,\r\n\t\t\tspecularMap: !! material.specularMap,\r\n\t\t\talphaMap: !! material.alphaMap,\r\n\r\n\t\t\tcombine: material.combine,\r\n\r\n\t\t\tvertexColors: material.vertexColors,\r\n\r\n\t\t\tfog: fog,\r\n\t\t\tuseFog: material.fog,\r\n\t\t\tfogExp: fog instanceof THREE.FogExp2,\r\n\r\n\t\t\tflatShading: material.shading === THREE.FlatShading,\r\n\r\n\t\t\tsizeAttenuation: material.sizeAttenuation,\r\n\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\r\n\r\n\t\t\tskinning: material.skinning,\r\n\t\t\tmaxBones: maxBones,\r\n\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\r\n\r\n\t\t\tmorphTargets: material.morphTargets,\r\n\t\t\tmorphNormals: material.morphNormals,\r\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\r\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\r\n\r\n\t\t\tnumDirLights: lights.directional.length,\r\n\t\t\tnumPointLights: lights.point.length,\r\n\t\t\tnumSpotLights: lights.spot.length,\r\n\t\t\tnumHemiLights: lights.hemi.length,\r\n\r\n\t\t\tnumClippingPlanes: nClipPlanes,\r\n\r\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\r\n\t\t\tshadowMapType: renderer.shadowMap.type,\r\n\r\n\t\t\ttoneMapping: renderer.toneMapping,\r\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\r\n\r\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\r\n\r\n\t\t\talphaTest: material.alphaTest,\r\n\t\t\tdoubleSided: material.side === THREE.DoubleSide,\r\n\t\t\tflipSided: material.side === THREE.BackSide,\r\n\r\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\r\n\r\n\t\t};\r\n\r\n\t\treturn parameters;\r\n\r\n\t};\r\n\r\n\tthis.getProgramCode = function ( material, parameters ) {\r\n\r\n\t\tvar array = [];\r\n\r\n\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\tarray.push( parameters.shaderID );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tarray.push( material.fragmentShader );\r\n\t\t\tarray.push( material.vertexShader );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.defines !== undefined ) {\r\n\r\n\t\t\tfor ( var name in material.defines ) {\r\n\r\n\t\t\t\tarray.push( name );\r\n\t\t\t\tarray.push( material.defines[ name ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\r\n\r\n\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn array.join();\r\n\r\n\t};\r\n\r\n\tthis.acquireProgram = function ( material, parameters, code ) {\r\n\r\n\t\tvar program;\r\n\r\n\t\t// Check if code has been already compiled\r\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\r\n\r\n\t\t\tvar programInfo = programs[ p ];\r\n\r\n\t\t\tif ( programInfo.code === code ) {\r\n\r\n\t\t\t\tprogram = programInfo;\r\n\t\t\t\t++ program.usedTimes;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\tprogram = new THREE.WebGLProgram( renderer, code, material, parameters );\r\n\t\t\tprograms.push( program );\r\n\r\n\t\t}\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n\tthis.releaseProgram = function( program ) {\r\n\r\n\t\tif ( -- program.usedTimes === 0 ) {\r\n\r\n\t\t\t// Remove from unordered set\r\n\t\t\tvar i = programs.indexOf( program );\r\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\r\n\t\t\tprograms.pop();\r\n\r\n\t\t\t// Free WebGL resources\r\n\t\t\tprogram.destroy();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Exposed for resource monitoring & error feedback via renderer.info:\r\n\tthis.programs = programs;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLProperties.js\r\n\r\n/**\r\n* @author fordacious / fordacious.github.io\r\n*/\r\n\r\nTHREE.WebGLProperties = function () {\r\n\r\n\tvar properties = {};\r\n\r\n\tthis.get = function ( object ) {\r\n\r\n\t\tvar uuid = object.uuid;\r\n\t\tvar map = properties[ uuid ];\r\n\r\n\t\tif ( map === undefined ) {\r\n\r\n\t\t\tmap = {};\r\n\t\t\tproperties[ uuid ] = map;\r\n\r\n\t\t}\r\n\r\n\t\treturn map;\r\n\r\n\t};\r\n\r\n\tthis.delete = function ( object ) {\r\n\r\n\t\tdelete properties[ object.uuid ];\r\n\r\n\t};\r\n\r\n\tthis.clear = function () {\r\n\r\n\t\tproperties = {};\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLShader.js\r\n\r\nTHREE.WebGLShader = ( function () {\r\n\r\n\tfunction addLineNumbers( string ) {\r\n\r\n\t\tvar lines = string.split( '\\n' );\r\n\r\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\r\n\r\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn lines.join( '\\n' );\r\n\r\n\t}\r\n\r\n\treturn function WebGLShader( gl, type, string ) {\r\n\r\n\t\tvar shader = gl.createShader( type );\r\n\r\n\t\tgl.shaderSource( shader, string );\r\n\t\tgl.compileShader( shader );\r\n\r\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\r\n\r\n\t\t}\r\n\r\n\t\t// --enable-privileged-webgl-extension\r\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\r\n\r\n\t\treturn shader;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/renderers/webgl/WebGLShadowMap.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.WebGLShadowMap = function ( _renderer, _lights, _objects ) {\r\n\r\n\tvar _gl = _renderer.context,\r\n\t_state = _renderer.state,\r\n\t_frustum = new THREE.Frustum(),\r\n\t_projScreenMatrix = new THREE.Matrix4(),\r\n\r\n\t_lightShadows = _lights.shadows,\r\n\r\n\t_shadowMapSize = new THREE.Vector2(),\r\n\r\n\t_lookTarget = new THREE.Vector3(),\r\n\t_lightPositionWorld = new THREE.Vector3(),\r\n\r\n\t_renderList = [],\r\n\r\n\t_MorphingFlag = 1,\r\n\t_SkinningFlag = 2,\r\n\r\n\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\r\n\r\n\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\r\n\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\r\n\r\n\t_materialCache = {};\r\n\r\n\tvar cubeDirections = [\r\n\t\tnew THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),\r\n\t\tnew THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )\r\n\t];\r\n\r\n\tvar cubeUps = [\r\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),\r\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),\tnew THREE.Vector3( 0, 0, - 1 )\r\n\t];\r\n\r\n\tvar cube2DViewPorts = [\r\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),\r\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()\r\n\t];\r\n\r\n\t// init\r\n\r\n\tvar depthMaterialTemplate = new THREE.MeshDepthMaterial();\r\n\tdepthMaterialTemplate.depthPacking = THREE.RGBADepthPacking;\r\n\tdepthMaterialTemplate.clipping = true;\r\n\r\n\tvar distanceShader = THREE.ShaderLib[ \"distanceRGBA\" ];\r\n\tvar distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );\r\n\r\n\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\r\n\r\n\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\r\n\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\r\n\r\n\t\tvar depthMaterial = depthMaterialTemplate.clone();\r\n\t\tdepthMaterial.morphTargets = useMorphing;\r\n\t\tdepthMaterial.skinning = useSkinning;\r\n\r\n\t\t_depthMaterials[ i ] = depthMaterial;\r\n\r\n\t\tvar distanceMaterial = new THREE.ShaderMaterial( {\r\n\t\t\tdefines: {\r\n\t\t\t\t'USE_SHADOWMAP': ''\r\n\t\t\t},\r\n\t\t\tuniforms: distanceUniforms,\r\n\t\t\tvertexShader: distanceShader.vertexShader,\r\n\t\t\tfragmentShader: distanceShader.fragmentShader,\r\n\t\t\tmorphTargets: useMorphing,\r\n\t\t\tskinning: useSkinning,\r\n\t\t\tclipping: true\r\n\t\t} );\r\n\r\n\t\t_distanceMaterials[ i ] = distanceMaterial;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.enabled = false;\r\n\r\n\tthis.autoUpdate = true;\r\n\tthis.needsUpdate = false;\r\n\r\n\tthis.type = THREE.PCFShadowMap;\r\n\r\n\tthis.renderReverseSided = true;\r\n\tthis.renderSingleSided = true;\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\r\n\r\n\t\tif ( _lightShadows.length === 0 ) return;\r\n\r\n\t\t// Set GL state for depth map.\r\n\t\t_state.clearColor( 1, 1, 1, 1 );\r\n\t\t_state.disable( _gl.BLEND );\r\n\t\t_state.setDepthTest( true );\r\n\t\t_state.setScissorTest( false );\r\n\r\n\t\t// render depth map\r\n\r\n\t\tvar faceCount, isPointLight;\r\n\r\n\t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar light = _lightShadows[ i ];\r\n\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\tif ( shadow === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar shadowCamera = shadow.camera;\r\n\r\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\r\n\r\n\t\t\tif ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\tfaceCount = 6;\r\n\t\t\t\tisPointLight = true;\r\n\r\n\t\t\t\tvar vpWidth = _shadowMapSize.x;\r\n\t\t\t\tvar vpHeight = _shadowMapSize.y;\r\n\r\n\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\r\n\t\t\t\t// following orientation:\r\n\t\t\t\t//\r\n\t\t\t\t//  xzXZ\r\n\t\t\t\t//   y Y\r\n\t\t\t\t//\r\n\t\t\t\t// X - Positive x direction\r\n\t\t\t\t// x - Negative x direction\r\n\t\t\t\t// Y - Positive y direction\r\n\t\t\t\t// y - Negative y direction\r\n\t\t\t\t// Z - Positive z direction\r\n\t\t\t\t// z - Negative z direction\r\n\r\n\t\t\t\t// positive X\r\n\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t// negative X\r\n\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t// positive Z\r\n\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t// negative Z\r\n\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t// positive Y\r\n\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\r\n\t\t\t\t// negative Y\r\n\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\r\n\r\n\t\t\t\t_shadowMapSize.x *= 4.0;\r\n\t\t\t\t_shadowMapSize.y *= 2.0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfaceCount = 1;\r\n\t\t\t\tisPointLight = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( shadow.map === null ) {\r\n\r\n\t\t\t\tvar pars = { minFilter: THREE.NearestFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat };\r\n\r\n\t\t\t\tshadow.map = new THREE.WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\r\n\t\t\t\tshadowCamera.updateProjectionMatrix();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( shadow instanceof THREE.SpotLightShadow ) {\r\n\r\n\t\t\t\tshadow.update( light );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar shadowMap = shadow.map;\r\n\t\t\tvar shadowMatrix = shadow.matrix;\r\n\r\n\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\tshadowCamera.position.copy( _lightPositionWorld );\r\n\r\n\t\t\t_renderer.setRenderTarget( shadowMap );\r\n\t\t\t_renderer.clear();\r\n\r\n\t\t\t// render shadow map for each cube face (if omni-directional) or\r\n\t\t\t// run a single pass if not\r\n\r\n\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\r\n\r\n\t\t\t\tif ( isPointLight ) {\r\n\r\n\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\r\n\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\r\n\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\r\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\r\n\r\n\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\r\n\t\t\t\t\t_state.viewport( vpDimensions );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tshadowCamera.updateMatrixWorld();\r\n\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\r\n\r\n\t\t\t\t// compute shadow matrix\r\n\r\n\t\t\t\tshadowMatrix.set(\r\n\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t\t\t);\r\n\r\n\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\r\n\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\r\n\r\n\t\t\t\t// update camera matrices and frustum\r\n\r\n\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t\t\t// set object matrices & frustum culling\r\n\r\n\t\t\t\t_renderList.length = 0;\r\n\r\n\t\t\t\tprojectObject( scene, camera, shadowCamera );\r\n\r\n\t\t\t\t// render shadow map\r\n\t\t\t\t// render regular objects\r\n\r\n\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar object = _renderList[ j ];\r\n\t\t\t\t\tvar geometry = _objects.update( object );\r\n\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\r\n\r\n\t\t\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\t\t\tvar materials = material.materials;\r\n\r\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar group = groups[ k ];\r\n\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\r\n\r\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\r\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\r\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Restore GL state.\r\n\t\tvar clearColor = _renderer.getClearColor(),\r\n\t\tclearAlpha = _renderer.getClearAlpha();\r\n\t\t_renderer.setClearColor( clearColor, clearAlpha );\r\n\r\n\t\tscope.needsUpdate = false;\r\n\r\n\t};\r\n\r\n\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tvar result = null;\r\n\r\n\t\tvar materialVariants = _depthMaterials;\r\n\t\tvar customMaterial = object.customDepthMaterial;\r\n\r\n\t\tif ( isPointLight ) {\r\n\r\n\t\t\tmaterialVariants = _distanceMaterials;\r\n\t\t\tcustomMaterial = object.customDistanceMaterial;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! customMaterial ) {\r\n\r\n\t\t\tvar useMorphing = geometry.morphTargets !== undefined &&\r\n\t\t\t\t\tgeometry.morphTargets.length > 0 && material.morphTargets;\r\n\r\n\t\t\tvar useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\r\n\r\n\t\t\tvar variantIndex = 0;\r\n\r\n\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\r\n\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\r\n\r\n\t\t\tresult = materialVariants[ variantIndex ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\tresult = customMaterial;\r\n\r\n\t\t}\r\n\r\n\t\tif ( _renderer.localClippingEnabled &&\r\n\t\t\t material.clipShadows === true &&\r\n\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\r\n\r\n\t\t\t// in this case we need a unique material instance reflecting the\r\n\t\t\t// appropriate state\r\n\r\n\t\t\tvar keyA = result.uuid, keyB = material.uuid;\r\n\r\n\t\t\tvar materialsForVariant = _materialCache[ keyA ];\r\n\r\n\t\t\tif ( materialsForVariant === undefined ) {\r\n\r\n\t\t\t\tmaterialsForVariant = {};\r\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\r\n\r\n\t\t\tif ( cachedMaterial === undefined ) {\r\n\r\n\t\t\t\tcachedMaterial = result.clone();\r\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult = cachedMaterial;\r\n\r\n\t\t}\r\n\r\n\t\tresult.visible = material.visible;\r\n\t\tresult.wireframe = material.wireframe;\r\n\r\n\t\tvar side = material.side;\r\n\r\n\t\tif ( scope.renderSingleSided && side == THREE.DoubleSide ) {\r\n\r\n\t\t\tside = THREE.FrontSide;\r\n\r\n\t\t}\r\n\r\n\t\tif ( scope.renderReverseSided ) {\r\n\r\n\t\t\tif ( side === THREE.FrontSide ) side = THREE.BackSide;\r\n\t\t\telse if ( side === THREE.BackSide ) side = THREE.FrontSide;\r\n\r\n\t\t}\r\n\r\n\t\tresult.side = side;\r\n\r\n\t\tresult.clipShadows = material.clipShadows;\r\n\t\tresult.clippingPlanes = material.clippingPlanes;\r\n\r\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\r\n\t\tresult.linewidth = material.linewidth;\r\n\r\n\t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\r\n\r\n\t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tfunction projectObject( object, camera, shadowCamera ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tif ( object.layers.test( camera.layers ) && ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) ) {\r\n\r\n\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\r\n\r\n\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\tif ( material.visible === true ) {\r\n\r\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\t\t\t_renderList.push( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar children = object.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tprojectObject( children[ i ], camera, shadowCamera );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLState.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {\r\n\r\n\tvar _this = this;\r\n\r\n\tthis.buffers = {\r\n\t\tcolor: new THREE.WebGLColorBuffer( gl, this ),\r\n\t\tdepth: new THREE.WebGLDepthBuffer( gl, this ),\r\n\t\tstencil: new THREE.WebGLStencilBuffer( gl, this )\r\n\t};\r\n\r\n\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n\tvar newAttributes = new Uint8Array( maxVertexAttributes );\r\n\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\r\n\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\r\n\r\n\tvar capabilities = {};\r\n\r\n\tvar compressedTextureFormats = null;\r\n\r\n\tvar currentBlending = null;\r\n\tvar currentBlendEquation = null;\r\n\tvar currentBlendSrc = null;\r\n\tvar currentBlendDst = null;\r\n\tvar currentBlendEquationAlpha = null;\r\n\tvar currentBlendSrcAlpha = null;\r\n\tvar currentBlendDstAlpha = null;\r\n\tvar currentPremultipledAlpha = false;\r\n\r\n\tvar currentFlipSided = null;\r\n\tvar currentCullFace = null;\r\n\r\n\tvar currentLineWidth = null;\r\n\r\n\tvar currentPolygonOffsetFactor = null;\r\n\tvar currentPolygonOffsetUnits = null;\r\n\r\n\tvar currentScissorTest = null;\r\n\r\n\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\r\n\tvar currentTextureSlot = null;\r\n\tvar currentBoundTextures = {};\r\n\r\n\tvar currentScissor = new THREE.Vector4();\r\n\tvar currentViewport = new THREE.Vector4();\r\n\r\n\tfunction createTexture( type, target, count ) {\r\n\r\n\t\tvar data = new Uint8Array( 3 );\r\n\t\tvar texture = gl.createTexture();\r\n\r\n\t\tgl.bindTexture( type, texture );\r\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\r\n\t\tfor ( var i = 0; i < count; i ++ ) {\r\n\r\n\t\t\tgl.texImage2D( target + i, 0, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, data );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\tvar emptyTextures = {};\r\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\r\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\r\n\r\n\t//\r\n\r\n\tthis.init = function () {\r\n\r\n\t\tthis.clearColor( 0, 0, 0, 1 );\r\n\t\tthis.clearDepth( 1 );\r\n\t\tthis.clearStencil( 0 );\r\n\r\n\t\tthis.enable( gl.DEPTH_TEST );\r\n\t\tthis.setDepthFunc( THREE.LessEqualDepth );\r\n\r\n\t\tthis.setFlipSided( false );\r\n\t\tthis.setCullFace( THREE.CullFaceBack );\r\n\t\tthis.enable( gl.CULL_FACE );\r\n\r\n\t\tthis.enable( gl.BLEND );\r\n\t\tthis.setBlending( THREE.NormalBlending );\r\n\r\n\t};\r\n\r\n\tthis.initAttributes = function () {\r\n\r\n\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\r\n\r\n\t\t\tnewAttributes[ i ] = 0;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.enableAttribute = function ( attribute ) {\r\n\r\n\t\tnewAttributes[ attribute ] = 1;\r\n\r\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\r\n\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\tenabledAttributes[ attribute ] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\r\n\r\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\r\n\t\t\tattributeDivisors[ attribute ] = 0;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {\r\n\r\n\t\tnewAttributes[ attribute ] = 1;\r\n\r\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\r\n\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\tenabledAttributes[ attribute ] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\r\n\r\n\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\r\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.disableUnusedAttributes = function () {\r\n\r\n\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\r\n\r\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\r\n\r\n\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.enable = function ( id ) {\r\n\r\n\t\tif ( capabilities[ id ] !== true ) {\r\n\r\n\t\t\tgl.enable( id );\r\n\t\t\tcapabilities[ id ] = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.disable = function ( id ) {\r\n\r\n\t\tif ( capabilities[ id ] !== false ) {\r\n\r\n\t\t\tgl.disable( id );\r\n\t\t\tcapabilities[ id ] = false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.getCompressedTextureFormats = function () {\r\n\r\n\t\tif ( compressedTextureFormats === null ) {\r\n\r\n\t\t\tcompressedTextureFormats = [];\r\n\r\n\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\r\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\r\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\r\n\r\n\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\r\n\r\n\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\r\n\r\n\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn compressedTextureFormats;\r\n\r\n\t};\r\n\r\n\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\r\n\r\n\t\tif ( blending !== THREE.NoBlending ) {\r\n\r\n\t\t\tthis.enable( gl.BLEND );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.BLEND );\r\n\t\t\tcurrentBlending = blending; // no blending, that is\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\r\n\r\n\t\t\tif ( blending === THREE.AdditiveBlending ) {\r\n\r\n\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\r\n\r\n\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\r\n\r\n\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentBlending = blending;\r\n\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\r\n\r\n\t\t}\r\n\r\n\t\tif ( blending === THREE.CustomBlending ) {\r\n\r\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\r\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\r\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\r\n\r\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\r\n\r\n\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\r\n\r\n\t\t\t\tcurrentBlendEquation = blendEquation;\r\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\r\n\r\n\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\r\n\r\n\t\t\t\tcurrentBlendSrc = blendSrc;\r\n\t\t\t\tcurrentBlendDst = blendDst;\r\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\r\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcurrentBlendEquation = null;\r\n\t\t\tcurrentBlendSrc = null;\r\n\t\t\tcurrentBlendDst = null;\r\n\t\t\tcurrentBlendEquationAlpha = null;\r\n\t\t\tcurrentBlendSrcAlpha = null;\r\n\t\t\tcurrentBlendDstAlpha = null;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// TODO Deprecate\r\n\r\n\tthis.setColorWrite = function ( colorWrite ) {\r\n\r\n\t\tthis.buffers.color.setMask( colorWrite );\r\n\r\n\t};\r\n\r\n\tthis.setDepthTest = function ( depthTest ) {\r\n\r\n\t\tthis.buffers.depth.setTest( depthTest );\r\n\r\n\t};\r\n\r\n\tthis.setDepthWrite = function ( depthWrite ) {\r\n\r\n\t\tthis.buffers.depth.setMask( depthWrite );\r\n\r\n\t};\r\n\r\n\tthis.setDepthFunc = function ( depthFunc ) {\r\n\r\n\t\tthis.buffers.depth.setFunc( depthFunc );\r\n\r\n\t};\r\n\r\n\tthis.setStencilTest = function ( stencilTest ) {\r\n\r\n\t\tthis.buffers.stencil.setTest( stencilTest );\r\n\r\n\t};\r\n\r\n\tthis.setStencilWrite = function ( stencilWrite ) {\r\n\r\n\t\tthis.buffers.stencil.setMask( stencilWrite );\r\n\r\n\t};\r\n\r\n\tthis.setStencilFunc = function ( stencilFunc, stencilRef, stencilMask ) {\r\n\r\n\t\tthis.buffers.stencil.setFunc( stencilFunc, stencilRef, stencilMask );\r\n\r\n\t};\r\n\r\n\tthis.setStencilOp = function ( stencilFail, stencilZFail, stencilZPass ) {\r\n\r\n\t\tthis.buffers.stencil.setOp( stencilFail, stencilZFail, stencilZPass );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tthis.setFlipSided = function ( flipSided ) {\r\n\r\n\t\tif ( currentFlipSided !== flipSided ) {\r\n\r\n\t\t\tif ( flipSided ) {\r\n\r\n\t\t\t\tgl.frontFace( gl.CW );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.frontFace( gl.CCW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentFlipSided = flipSided;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setCullFace = function ( cullFace ) {\r\n\r\n\t\tif ( cullFace !== THREE.CullFaceNone ) {\r\n\r\n\t\t\tthis.enable( gl.CULL_FACE );\r\n\r\n\t\t\tif ( cullFace !== currentCullFace ) {\r\n\r\n\t\t\t\tif ( cullFace === THREE.CullFaceBack ) {\r\n\r\n\t\t\t\t\tgl.cullFace( gl.BACK );\r\n\r\n\t\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t\t\tgl.cullFace( gl.FRONT );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.CULL_FACE );\r\n\r\n\t\t}\r\n\r\n\t\tcurrentCullFace = cullFace;\r\n\r\n\t};\r\n\r\n\tthis.setLineWidth = function ( width ) {\r\n\r\n\t\tif ( width !== currentLineWidth ) {\r\n\r\n\t\t\tgl.lineWidth( width );\r\n\r\n\t\t\tcurrentLineWidth = width;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setPolygonOffset = function ( polygonOffset, factor, units ) {\r\n\r\n\t\tif ( polygonOffset ) {\r\n\r\n\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\r\n\r\n\t\t\t\tgl.polygonOffset( factor, units );\r\n\r\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\r\n\t\t\t\tcurrentPolygonOffsetUnits = units;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.getScissorTest = function () {\r\n\r\n\t\treturn currentScissorTest;\r\n\r\n\t};\r\n\r\n\tthis.setScissorTest = function ( scissorTest ) {\r\n\r\n\t\tcurrentScissorTest = scissorTest;\r\n\r\n\t\tif ( scissorTest ) {\r\n\r\n\t\t\tthis.enable( gl.SCISSOR_TEST );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.SCISSOR_TEST );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// texture\r\n\r\n\tthis.activeTexture = function ( webglSlot ) {\r\n\r\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\r\n\r\n\t\tif ( currentTextureSlot !== webglSlot ) {\r\n\r\n\t\t\tgl.activeTexture( webglSlot );\r\n\t\t\tcurrentTextureSlot = webglSlot;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.bindTexture = function ( webglType, webglTexture ) {\r\n\r\n\t\tif ( currentTextureSlot === null ) {\r\n\r\n\t\t\t_this.activeTexture();\r\n\r\n\t\t}\r\n\r\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\r\n\t\tif ( boundTexture === undefined ) {\r\n\r\n\t\t\tboundTexture = { type: undefined, texture: undefined };\r\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\r\n\r\n\t\t}\r\n\r\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\r\n\r\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\r\n\r\n\t\t\tboundTexture.type = webglType;\r\n\t\t\tboundTexture.texture = webglTexture;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.compressedTexImage2D = function () {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( error );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.texImage2D = function () {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( error );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// TODO Deprecate\r\n\r\n\tthis.clearColor = function ( r, g, b, a ) {\r\n\r\n\t\tthis.buffers.color.setClear( r, g, b, a );\r\n\r\n\t};\r\n\r\n\tthis.clearDepth = function ( depth ) {\r\n\r\n\t\tthis.buffers.depth.setClear( depth );\r\n\r\n\t};\r\n\r\n\tthis.clearStencil = function ( stencil ) {\r\n\r\n\t\tthis.buffers.stencil.setClear( stencil );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tthis.scissor = function ( scissor ) {\r\n\r\n\t\tif ( currentScissor.equals( scissor ) === false ) {\r\n\r\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\r\n\t\t\tcurrentScissor.copy( scissor );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.viewport = function ( viewport ) {\r\n\r\n\t\tif ( currentViewport.equals( viewport ) === false ) {\r\n\r\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\r\n\t\t\tcurrentViewport.copy( viewport );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tthis.reset = function () {\r\n\r\n\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\r\n\r\n\t\t\tif ( enabledAttributes[ i ] === 1 ) {\r\n\r\n\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tcapabilities = {};\r\n\r\n\t\tcompressedTextureFormats = null;\r\n\r\n\t\tcurrentTextureSlot = null;\r\n\t\tcurrentBoundTextures = {};\r\n\r\n\t\tcurrentBlending = null;\r\n\r\n\t\tcurrentFlipSided = null;\r\n\t\tcurrentCullFace = null;\r\n\r\n\t\tthis.buffers.color.reset();\r\n\t\tthis.buffers.depth.reset();\r\n\t\tthis.buffers.stencil.reset();\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.WebGLColorBuffer = function ( gl, state ) {\r\n\r\n\tvar locked = false;\r\n\r\n\tvar color = new THREE.Vector4();\r\n\tvar currentColorMask = null;\r\n\tvar currentColorClear = new THREE.Vector4();\r\n\r\n\tthis.setMask = function ( colorMask ) {\r\n\r\n\t\tif ( currentColorMask !== colorMask && ! locked ) {\r\n\r\n\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\r\n\t\t\tcurrentColorMask = colorMask;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setLocked = function ( lock ) {\r\n\r\n\t\tlocked = lock;\r\n\r\n\t};\r\n\r\n\tthis.setClear = function ( r, g, b, a ) {\r\n\r\n\t\tcolor.set( r, g, b, a );\r\n\r\n\t\tif ( currentColorClear.equals( color ) === false ) {\r\n\r\n\t\t\tgl.clearColor( r, g, b, a );\r\n\t\t\tcurrentColorClear.copy( color );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.reset = function () {\r\n\r\n\t\tlocked = false;\r\n\r\n\t\tcurrentColorMask = null;\r\n\t\tcurrentColorClear = new THREE.Vector4();\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.WebGLDepthBuffer = function( gl, state ) {\r\n\r\n\tvar locked = false;\r\n\r\n\tvar currentDepthMask = null;\r\n\tvar currentDepthFunc = null;\r\n\tvar currentDepthClear = null;\r\n\r\n\tthis.setTest = function ( depthTest ) {\r\n\r\n\t\tif ( depthTest ) {\r\n\r\n\t\t\tstate.enable( gl.DEPTH_TEST );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tstate.disable( gl.DEPTH_TEST );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setMask = function( depthMask ){\r\n\r\n\t\tif ( currentDepthMask !== depthMask && ! locked ) {\r\n\r\n\t\t\tgl.depthMask( depthMask );\r\n\t\t\tcurrentDepthMask = depthMask;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setFunc = function ( depthFunc ) {\r\n\r\n\t\tif ( currentDepthFunc !== depthFunc ) {\r\n\r\n\t\t\tif ( depthFunc ) {\r\n\r\n\t\t\t\tswitch ( depthFunc ) {\r\n\r\n\t\t\t\t\tcase THREE.NeverDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.AlwaysDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.LessDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.LESS );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.LessEqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.EqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.GreaterEqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.GreaterDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.NotEqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentDepthFunc = depthFunc;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setLocked = function ( lock ) {\r\n\r\n\t\tlocked = lock;\r\n\r\n\t};\r\n\r\n\tthis.setClear = function ( depth ) {\r\n\r\n\t\tif ( currentDepthClear !== depth ) {\r\n\r\n\t\t\tgl.clearDepth( depth );\r\n\t\t\tcurrentDepthClear = depth;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.reset = function () {\r\n\r\n\t\tlocked = false;\r\n\r\n\t\tcurrentDepthMask = null;\r\n\t\tcurrentDepthFunc = null;\r\n\t\tcurrentDepthClear = null;\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.WebGLStencilBuffer = function ( gl, state ) {\r\n\r\n\tvar locked = false;\r\n\r\n\tvar currentStencilMask = null;\r\n\tvar currentStencilFunc = null;\r\n\tvar currentStencilRef = null;\r\n\tvar currentStencilFuncMask = null;\r\n\tvar currentStencilFail  = null;\r\n\tvar currentStencilZFail = null;\r\n\tvar currentStencilZPass = null;\r\n\tvar currentStencilClear = null;\r\n\r\n\tthis.setTest = function ( stencilTest ) {\r\n\r\n\t\tif ( stencilTest ) {\r\n\r\n\t\t\tstate.enable( gl.STENCIL_TEST );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tstate.disable( gl.STENCIL_TEST );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setMask = function ( stencilMask ) {\r\n\r\n\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\r\n\r\n\t\t\tgl.stencilMask( stencilMask );\r\n\t\t\tcurrentStencilMask = stencilMask;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setFunc = function ( stencilFunc, stencilRef, stencilMask ) {\r\n\r\n\t\tif ( currentStencilFunc !== stencilFunc ||\r\n\t\t     currentStencilRef \t!== stencilRef \t||\r\n\t\t     currentStencilFuncMask !== stencilMask ) {\r\n\r\n\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\r\n\r\n\t\t\tcurrentStencilFunc = stencilFunc;\r\n\t\t\tcurrentStencilRef  = stencilRef;\r\n\t\t\tcurrentStencilFuncMask = stencilMask;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setOp\t = function ( stencilFail, stencilZFail, stencilZPass ) {\r\n\r\n\t\tif ( currentStencilFail\t !== stencilFail \t||\r\n\t\t     currentStencilZFail !== stencilZFail ||\r\n\t\t     currentStencilZPass !== stencilZPass ) {\r\n\r\n\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\r\n\r\n\t\t\tcurrentStencilFail  = stencilFail;\r\n\t\t\tcurrentStencilZFail = stencilZFail;\r\n\t\t\tcurrentStencilZPass = stencilZPass;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setLocked = function ( lock ) {\r\n\r\n\t\tlocked = lock;\r\n\r\n\t};\r\n\r\n\tthis.setClear = function ( stencil ) {\r\n\r\n\t\tif ( currentStencilClear !== stencil ) {\r\n\r\n\t\t\tgl.clearStencil( stencil );\r\n\t\t\tcurrentStencilClear = stencil;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.reset = function () {\r\n\r\n\t\tlocked = false;\r\n\r\n\t\tcurrentStencilMask = null;\r\n\t\tcurrentStencilFunc = null;\r\n\t\tcurrentStencilRef = null;\r\n\t\tcurrentStencilFuncMask = null;\r\n\t\tcurrentStencilFail = null;\r\n\t\tcurrentStencilZFail = null;\r\n\t\tcurrentStencilZPass = null;\r\n\t\tcurrentStencilClear = null;\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLUniforms.js\r\n\r\n/**\r\n *\r\n * Uniforms of a program.\r\n * Those form a tree structure with a special top-level container for the root,\r\n * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\r\n *\r\n *\r\n * Properties of inner nodes including the top-level container:\r\n *\r\n * .seq - array of nested uniforms\r\n * .map - nested uniforms by name\r\n *\r\n *\r\n * Methods of all nodes except the top-level container:\r\n *\r\n * .setValue( gl, value, [renderer] )\r\n *\r\n * \t\tuploads a uniform value(s)\r\n *  \tthe 'renderer' parameter is needed for sampler uniforms\r\n *\r\n *\r\n * Static methods of the top-level container (renderer factorizations):\r\n *\r\n * .upload( gl, seq, values, renderer )\r\n *\r\n * \t\tsets uniforms in 'seq' to 'values[id].value'\r\n *\r\n * .seqWithValue( seq, values ) : filteredSeq\r\n *\r\n * \t\tfilters 'seq' entries with corresponding entry in values\r\n *\r\n * .splitDynamic( seq, values ) : filteredSeq\r\n *\r\n * \t\tfilters 'seq' entries with dynamic entry and removes them from 'seq'\r\n *\r\n *\r\n * Methods of the top-level container (renderer factorizations):\r\n *\r\n * .setValue( gl, name, value )\r\n *\r\n * \t\tsets uniform with  name 'name' to 'value'\r\n *\r\n * .set( gl, obj, prop )\r\n *\r\n * \t\tsets uniform from object and property with same name than uniform\r\n *\r\n * .setOptional( gl, obj, prop )\r\n *\r\n * \t\tlike .set for an optional property of the object\r\n *\r\n *\r\n * @author tschw\r\n *\r\n */\r\n\r\nTHREE.WebGLUniforms = ( function() { // scope\r\n\r\n\t// --- Base for inner nodes (including the root) ---\r\n\r\n\tvar UniformContainer = function() {\r\n\r\n\t\t\tthis.seq = [];\r\n\t\t\tthis.map = {};\r\n\r\n\t\t},\r\n\r\n\t// --- Utilities ---\r\n\r\n\t// Array Caches (provide typed arrays for temporary by size)\r\n\r\n\t\tarrayCacheF32 = [],\r\n\t\tarrayCacheI32 = [],\r\n\r\n\t\tuncacheTemporaryArrays = function() {\r\n\r\n\t\t\tarrayCacheF32.length = 0;\r\n\t\t\tarrayCacheI32.length = 0;\r\n\r\n\t\t},\r\n\r\n\t// Flattening for arrays of vectors and matrices\r\n\r\n\t\tflatten = function( array, nBlocks, blockSize ) {\r\n\r\n\t\t\tvar firstElem = array[ 0 ];\r\n\r\n\t\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\r\n\t\t\t// unoptimized: ! isNaN( firstElem )\r\n\t\t\t// see http://jacksondunstan.com/articles/983\r\n\r\n\t\t\tvar n = nBlocks * blockSize,\r\n\t\t\t\tr = arrayCacheF32[ n ];\r\n\r\n\t\t\tif ( r === undefined ) {\r\n\r\n\t\t\t\tr = new Float32Array( n );\r\n\t\t\t\tarrayCacheF32[ n ] = r;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( nBlocks !== 0 ) {\r\n\r\n\t\t\t\tfirstElem.toArray( r, 0 );\r\n\r\n\t\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\r\n\r\n\t\t\t\t\toffset += blockSize;\r\n\t\t\t\t\tarray[ i ].toArray( r, offset );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn r;\r\n\r\n\t\t},\r\n\r\n\t// Texture unit allocation\r\n\r\n\t\tallocTexUnits = function( renderer, n ) {\r\n\r\n\t\t\tvar r = arrayCacheI32[ n ];\r\n\r\n\t\t\tif ( r === undefined ) {\r\n\r\n\t\t\t\tr = new Int32Array( n );\r\n\t\t\t\tarrayCacheI32[ n ] = r;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i !== n; ++ i )\r\n\t\t\t\tr[ i ] = renderer.allocTextureUnit();\r\n\r\n\t\t\treturn r;\r\n\r\n\t\t},\r\n\r\n\t// --- Setters ---\r\n\r\n\t// Note: Defining these methods externally, because they come in a bunch\r\n\t// and this way their names minify.\r\n\r\n\t\t// Single scalar\r\n\r\n\t\tsetValue1f = function( gl, v ) { gl.uniform1f( this.addr, v ); },\r\n\t\tsetValue1i = function( gl, v ) { gl.uniform1i( this.addr, v ); },\r\n\r\n\t\t// Single float vector (from flat array or THREE.VectorN)\r\n\r\n\t\tsetValue2fv = function( gl, v ) {\r\n\r\n\t\t\tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\r\n\t\t\telse gl.uniform2f( this.addr, v.x, v.y );\r\n\r\n\t\t},\r\n\r\n\t\tsetValue3fv = function( gl, v ) {\r\n\r\n\t\t\tif ( v.x !== undefined )\r\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\r\n\t\t\telse if ( v.r !== undefined )\r\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\r\n\t\t\telse\r\n\t\t\t\tgl.uniform3fv( this.addr, v );\r\n\r\n\t\t},\r\n\r\n\t\tsetValue4fv = function( gl, v ) {\r\n\r\n\t\t\tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\r\n\t\t\telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\r\n\r\n\t\t},\r\n\r\n\t\t// Single matrix (from flat array or MatrixN)\r\n\r\n\t\tsetValue2fm = function( gl, v ) {\r\n\r\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\r\n\r\n\t\t},\r\n\r\n\t\tsetValue3fm = function( gl, v ) {\r\n\r\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\r\n\r\n\t\t},\r\n\r\n\t\tsetValue4fm = function( gl, v ) {\r\n\r\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\r\n\r\n\t\t},\r\n\r\n\t\t// Single texture (2D / Cube)\r\n\r\n\t\tsetValueT1 = function( gl, v, renderer ) {\r\n\r\n\t\t\tvar unit = renderer.allocTextureUnit();\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tif ( v ) renderer.setTexture2D( v, unit );\r\n\r\n\t\t},\r\n\r\n\t\tsetValueT6 = function( gl, v, renderer ) {\r\n\r\n\t\t\tvar unit = renderer.allocTextureUnit();\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tif ( v ) renderer.setTextureCube( v, unit );\r\n\r\n\t\t},\r\n\r\n\t\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\r\n\r\n\t\tsetValue2iv = function( gl, v ) { gl.uniform2iv( this.addr, v ); },\r\n\t\tsetValue3iv = function( gl, v ) { gl.uniform3iv( this.addr, v ); },\r\n\t\tsetValue4iv = function( gl, v ) { gl.uniform4iv( this.addr, v ); },\r\n\r\n\t\t// Helper to pick the right setter for the singular case\r\n\r\n\t\tgetSingularSetter = function( type ) {\r\n\r\n\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\tcase 0x1406: return setValue1f; // FLOAT\r\n\t\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\r\n\t\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\r\n\t\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\r\n\r\n\t\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\r\n\t\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\r\n\t\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\r\n\r\n\t\t\t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\r\n\t\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\r\n\r\n\t\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\r\n\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\r\n\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\r\n\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// Array of scalars\r\n\r\n\t\tsetValue1fv = function( gl, v ) { gl.uniform1fv( this.addr, v ); },\r\n\t\tsetValue1iv = function( gl, v ) { gl.uniform1iv( this.addr, v ); },\r\n\r\n\t\t// Array of vectors (flat or from THREE classes)\r\n\r\n\t\tsetValueV2a = function( gl, v ) {\r\n\r\n\t\t\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\r\n\r\n\t\t},\r\n\r\n\t\tsetValueV3a = function( gl, v ) {\r\n\r\n\t\t\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\r\n\r\n\t\t},\r\n\r\n\t\tsetValueV4a = function( gl, v ) {\r\n\r\n\t\t\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\r\n\r\n\t\t},\r\n\r\n\t\t// Array of matrices (flat or from THREE clases)\r\n\r\n\t\tsetValueM2a = function( gl, v ) {\r\n\r\n\t\t\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\r\n\r\n\t\t},\r\n\r\n\t\tsetValueM3a = function( gl, v ) {\r\n\r\n\t\t\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\r\n\r\n\t\t},\r\n\r\n\t\tsetValueM4a = function( gl, v ) {\r\n\r\n\t\t\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\r\n\r\n\t\t},\r\n\r\n\t\t// Array of textures (2D / Cube)\r\n\r\n\t\tsetValueT1a = function( gl, v, renderer ) {\r\n\r\n\t\t\tvar n = v.length,\r\n\t\t\t\tunits = allocTexUnits( renderer, n );\r\n\r\n\t\t\tgl.uniform1iv( this.addr, units );\r\n\r\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar tex = v[ i ];\r\n\t\t\t\tif ( tex ) renderer.setTexture2D( tex, units[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tsetValueT6a = function( gl, v, renderer ) {\r\n\r\n\t\t\tvar n = v.length,\r\n\t\t\t\tunits = allocTexUnits( renderer, n );\r\n\r\n\t\t\tgl.uniform1iv( this.addr, units );\r\n\r\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar tex = v[ i ];\r\n\t\t\t\tif ( tex ) renderer.setTextureCube( tex, units[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\r\n\t\t// Helper to pick the right setter for a pure (bottom-level) array\r\n\r\n\t\tgetPureArraySetter = function( type ) {\r\n\r\n\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\tcase 0x1406: return setValue1fv; // FLOAT\r\n\t\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\r\n\t\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\r\n\t\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\r\n\r\n\t\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\r\n\t\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\r\n\t\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\r\n\r\n\t\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\r\n\t\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\r\n\r\n\t\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\r\n\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\r\n\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\r\n\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t// --- Uniform Classes ---\r\n\r\n\t\tSingleUniform = function SingleUniform( id, activeInfo, addr ) {\r\n\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.addr = addr;\r\n\t\t\tthis.setValue = getSingularSetter( activeInfo.type );\r\n\r\n\t\t\t// this.path = activeInfo.name; // DEBUG\r\n\r\n\t\t},\r\n\r\n\t\tPureArrayUniform = function( id, activeInfo, addr ) {\r\n\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.addr = addr;\r\n\t\t\tthis.size = activeInfo.size;\r\n\t\t\tthis.setValue = getPureArraySetter( activeInfo.type );\r\n\r\n\t\t\t// this.path = activeInfo.name; // DEBUG\r\n\r\n\t\t},\r\n\r\n\t\tStructuredUniform = function( id ) {\r\n\r\n\t\t\tthis.id = id;\r\n\r\n\t\t\tUniformContainer.call( this ); // mix-in\r\n\r\n\t\t};\r\n\r\n\tStructuredUniform.prototype.setValue = function( gl, value ) {\r\n\r\n\t\t// Note: Don't need an extra 'renderer' parameter, since samplers\r\n\t\t// are not allowed in structured uniforms.\r\n\r\n\t\tvar seq = this.seq;\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ];\r\n\t\t\tu.setValue( gl, value[ u.id ] );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// --- Top-level ---\r\n\r\n\t// Parser - builds up the property tree from the path strings\r\n\r\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g,\r\n\t\t// extracts\r\n\t\t// \t- the identifier (member name or array index)\r\n\t\t//  - followed by an optional right bracket (found when array index)\r\n\t\t//  - followed by an optional left bracket or dot (type of subscript)\r\n\t\t//\r\n\t\t// Note: These portions can be read in a non-overlapping fashion and\r\n\t\t// allow straightforward parsing of the hierarchy that WebGL encodes\r\n\t\t// in the uniform names.\r\n\r\n\t\taddUniform = function( container, uniformObject ) {\r\n\r\n\t\t\tcontainer.seq.push( uniformObject );\r\n\t\t\tcontainer.map[ uniformObject.id ] = uniformObject;\r\n\r\n\t\t},\r\n\r\n\t\tparseUniform = function( activeInfo, addr, container ) {\r\n\r\n\t\t\tvar path = activeInfo.name,\r\n\t\t\t\tpathLength = path.length;\r\n\r\n\t\t\t// reset RegExp object, because of the early exit of a previous run\r\n\t\t\tRePathPart.lastIndex = 0;\r\n\r\n\t\t\tfor (; ;) {\r\n\r\n\t\t\t\tvar match = RePathPart.exec( path ),\r\n\t\t\t\t\tmatchEnd = RePathPart.lastIndex,\r\n\r\n\t\t\t\t\tid = match[ 1 ],\r\n\t\t\t\t\tidIsIndex = match[ 2 ] === ']',\r\n\t\t\t\t\tsubscript = match[ 3 ];\r\n\r\n\t\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\r\n\r\n\t\t\t\tif ( subscript === undefined ||\r\n\t\t\t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\r\n\t\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\r\n\r\n\t\t\t\t\taddUniform( container, subscript === undefined ?\r\n\t\t\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\r\n\t\t\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// step into inner node / create it in case it doesn't exist\r\n\r\n\t\t\t\t\tvar map = container.map,\r\n\t\t\t\t\t\tnext = map[ id ];\r\n\r\n\t\t\t\t\tif ( next === undefined ) {\r\n\r\n\t\t\t\t\t\tnext = new StructuredUniform( id );\r\n\t\t\t\t\t\taddUniform( container, next );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcontainer = next;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t// Root Container\r\n\r\n\t\tWebGLUniforms = function WebGLUniforms( gl, program, renderer ) {\r\n\r\n\t\t\tUniformContainer.call( this );\r\n\r\n\t\t\tthis.renderer = renderer;\r\n\r\n\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\r\n\r\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar info = gl.getActiveUniform( program, i ),\r\n\t\t\t\t\tpath = info.name,\r\n\t\t\t\t\taddr = gl.getUniformLocation( program, path );\r\n\r\n\t\t\t\tparseUniform( info, addr, this );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\r\n\tWebGLUniforms.prototype.setValue = function( gl, name, value ) {\r\n\r\n\t\tvar u = this.map[ name ];\r\n\r\n\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.prototype.set = function( gl, object, name ) {\r\n\r\n\t\tvar u = this.map[ name ];\r\n\r\n\t\tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.prototype.setOptional = function( gl, object, name ) {\r\n\r\n\t\tvar v = object[ name ];\r\n\r\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\r\n\r\n\t};\r\n\r\n\r\n\t// Static interface\r\n\r\n\tWebGLUniforms.upload = function( gl, seq, values, renderer ) {\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ],\r\n\t\t\t\tv = values[ u.id ];\r\n\r\n\t\t\tif ( v.needsUpdate !== false ) {\r\n\t\t\t\t// note: always updating when .needsUpdate is undefined\r\n\r\n\t\t\t\tu.setValue( gl, v.value, renderer );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.seqWithValue = function( seq, values ) {\r\n\r\n\t\tvar r = [];\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ];\r\n\t\t\tif ( u.id in values ) r.push( u );\r\n\r\n\t\t}\r\n\r\n\t\treturn r;\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.splitDynamic = function( seq, values ) {\r\n\r\n\t\tvar r = null,\r\n\t\t\tn = seq.length,\r\n\t\t\tw = 0;\r\n\r\n\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ],\r\n\t\t\t\tv = values[ u.id ];\r\n\r\n\t\t\tif ( v && v.dynamic === true ) {\r\n\r\n\t\t\t\tif ( r === null ) r = [];\r\n\t\t\t\tr.push( u );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// in-place compact 'seq', removing the matches\r\n\t\t\t\tif ( w < i ) seq[ w ] = u;\r\n\t\t\t\t++ w;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( w < n ) seq.length = w;\r\n\r\n\t\treturn r;\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.evalDynamic = function( seq, values, object, camera ) {\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar v = values[ seq[ i ].id ],\r\n\t\t\t\tf = v.onUpdateCallback;\r\n\r\n\t\t\tif ( f !== undefined ) f.call( v, object, camera );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\treturn WebGLUniforms;\r\n\r\n} )();\r\n\r\n\r\n// File:src/renderers/webgl/plugins/LensFlarePlugin.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.LensFlarePlugin = function ( renderer, flares ) {\r\n\r\n\tvar gl = renderer.context;\r\n\tvar state = renderer.state;\r\n\r\n\tvar vertexBuffer, elementBuffer;\r\n\tvar shader, program, attributes, uniforms;\r\n\r\n\tvar tempTexture, occlusionTexture;\r\n\r\n\tfunction init() {\r\n\r\n\t\tvar vertices = new Float32Array( [\r\n\t\t\t- 1, - 1,  0, 0,\r\n\t\t\t 1, - 1,  1, 0,\r\n\t\t\t 1,  1,  1, 1,\r\n\t\t\t- 1,  1,  0, 1\r\n\t\t] );\r\n\r\n\t\tvar faces = new Uint16Array( [\r\n\t\t\t0, 1, 2,\r\n\t\t\t0, 2, 3\r\n\t\t] );\r\n\r\n\t\t// buffers\r\n\r\n\t\tvertexBuffer     = gl.createBuffer();\r\n\t\telementBuffer    = gl.createBuffer();\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\r\n\r\n\t\t// textures\r\n\r\n\t\ttempTexture      = gl.createTexture();\r\n\t\tocclusionTexture = gl.createTexture();\r\n\r\n\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\r\n\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\r\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\r\n\t\tshader = {\r\n\r\n\t\t\tvertexShader: [\r\n\r\n\t\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\t\"uniform float rotation;\",\r\n\r\n\t\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\r\n\t\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\t\"varying float vVisibility;\",\r\n\r\n\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\t\"vUV = uv;\",\r\n\r\n\t\t\t\t\t\"vec2 pos = position;\",\r\n\r\n\t\t\t\t\t\"if ( renderType == 2 ) {\",\r\n\r\n\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\r\n\r\n\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\r\n\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\r\n\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\r\n\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\r\n\r\n\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\t\"}\"\r\n\r\n\t\t\t].join( \"\\n\" ),\r\n\r\n\t\t\tfragmentShader: [\r\n\r\n\t\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\t\"uniform float opacity;\",\r\n\t\t\t\t\"uniform vec3 color;\",\r\n\r\n\t\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\t\"varying float vVisibility;\",\r\n\r\n\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\t// pink square\r\n\r\n\t\t\t\t\t\"if ( renderType == 0 ) {\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\r\n\r\n\t\t\t\t\t// restore\r\n\r\n\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t\t// flare\r\n\r\n\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\r\n\t\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"}\"\r\n\r\n\t\t\t].join( \"\\n\" )\r\n\r\n\t\t};\r\n\r\n\t\tprogram = createProgram( shader );\r\n\r\n\t\tattributes = {\r\n\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\r\n\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\r\n\t\t};\r\n\r\n\t\tuniforms = {\r\n\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\r\n\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\r\n\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\r\n\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\r\n\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\r\n\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\r\n\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\r\n\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Render lens flares\r\n\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\r\n\t *         reads these back and calculates occlusion.\r\n\t */\r\n\r\n\tthis.render = function ( scene, camera, viewport ) {\r\n\r\n\t\tif ( flares.length === 0 ) return;\r\n\r\n\t\tvar tempPosition = new THREE.Vector3();\r\n\r\n\t\tvar invAspect = viewport.w / viewport.z,\r\n\t\t\thalfViewportWidth = viewport.z * 0.5,\r\n\t\t\thalfViewportHeight = viewport.w * 0.5;\r\n\r\n\t\tvar size = 16 / viewport.w,\r\n\t\t\tscale = new THREE.Vector2( size * invAspect, size );\r\n\r\n\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\r\n\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\r\n\r\n\t\tvar validArea = new THREE.Box2();\r\n\r\n\t\tvalidArea.min.set( 0, 0 );\r\n\t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\tinit();\r\n\r\n\t\t}\r\n\r\n\t\tgl.useProgram( program );\r\n\r\n\t\tstate.initAttributes();\r\n\t\tstate.enableAttribute( attributes.vertex );\r\n\t\tstate.enableAttribute( attributes.uv );\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t// loop through all lens flares to update their occlusion and positions\r\n\t\t// setup gl and common used attribs/uniforms\r\n\r\n\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\r\n\t\tgl.uniform1i( uniforms.map, 1 );\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\r\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\r\n\t\tstate.disable( gl.CULL_FACE );\r\n\t\tstate.setDepthWrite( false );\r\n\r\n\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\r\n\r\n\t\t\tsize = 16 / viewport.w;\r\n\t\t\tscale.set( size * invAspect, size );\r\n\r\n\t\t\t// calc object screen position\r\n\r\n\t\t\tvar flare = flares[ i ];\r\n\r\n\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\r\n\r\n\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\r\n\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\r\n\r\n\t\t\t// setup arrays for gl programs\r\n\r\n\t\t\tscreenPosition.copy( tempPosition );\r\n\r\n\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\r\n\r\n\t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\r\n\t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\r\n\r\n\t\t\t// screen cull\r\n\r\n\t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\r\n\r\n\t\t\t\t// save current RGB to temp texture\r\n\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\r\n\r\n\r\n\t\t\t\t// render pink quad\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\r\n\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\r\n\t\t\t\tstate.disable( gl.BLEND );\r\n\t\t\t\tstate.enable( gl.DEPTH_TEST );\r\n\r\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\r\n\t\t\t\t// copy result to occlusionMap\r\n\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\r\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\r\n\r\n\r\n\t\t\t\t// restore graphics\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\r\n\t\t\t\tstate.disable( gl.DEPTH_TEST );\r\n\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\r\n\t\t\t\t// update object positions\r\n\r\n\t\t\t\tflare.positionScreen.copy( screenPosition );\r\n\r\n\t\t\t\tif ( flare.customUpdateCallback ) {\r\n\r\n\t\t\t\t\tflare.customUpdateCallback( flare );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tflare.updateLensFlares();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render flares\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\r\n\t\t\t\tstate.enable( gl.BLEND );\r\n\r\n\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\r\n\r\n\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\r\n\r\n\t\t\t\t\t\tscreenPosition.x = sprite.x;\r\n\t\t\t\t\t\tscreenPosition.y = sprite.y;\r\n\t\t\t\t\t\tscreenPosition.z = sprite.z;\r\n\r\n\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\r\n\r\n\t\t\t\t\t\tscale.x = size * invAspect;\r\n\t\t\t\t\t\tscale.y = size;\r\n\r\n\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\r\n\r\n\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\r\n\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\r\n\r\n\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\r\n\t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\r\n\r\n\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore gl\r\n\r\n\t\tstate.enable( gl.CULL_FACE );\r\n\t\tstate.enable( gl.DEPTH_TEST );\r\n\t\tstate.setDepthWrite( true );\r\n\r\n\t\trenderer.resetGLState();\r\n\r\n\t};\r\n\r\n\tfunction createProgram ( shader ) {\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\r\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\r\n\r\n\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\r\n\r\n\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\r\n\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\r\n\r\n\t\tgl.compileShader( fragmentShader );\r\n\t\tgl.compileShader( vertexShader );\r\n\r\n\t\tgl.attachShader( program, fragmentShader );\r\n\t\tgl.attachShader( program, vertexShader );\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\treturn program;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/plugins/SpritePlugin.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SpritePlugin = function ( renderer, sprites ) {\r\n\r\n\tvar gl = renderer.context;\r\n\tvar state = renderer.state;\r\n\r\n\tvar vertexBuffer, elementBuffer;\r\n\tvar program, attributes, uniforms;\r\n\r\n\tvar texture;\r\n\r\n\t// decompose matrixWorld\r\n\r\n\tvar spritePosition = new THREE.Vector3();\r\n\tvar spriteRotation = new THREE.Quaternion();\r\n\tvar spriteScale = new THREE.Vector3();\r\n\r\n\tfunction init() {\r\n\r\n\t\tvar vertices = new Float32Array( [\r\n\t\t\t- 0.5, - 0.5,  0, 0,\r\n\t\t\t  0.5, - 0.5,  1, 0,\r\n\t\t\t  0.5,   0.5,  1, 1,\r\n\t\t\t- 0.5,   0.5,  0, 1\r\n\t\t] );\r\n\r\n\t\tvar faces = new Uint16Array( [\r\n\t\t\t0, 1, 2,\r\n\t\t\t0, 2, 3\r\n\t\t] );\r\n\r\n\t\tvertexBuffer  = gl.createBuffer();\r\n\t\telementBuffer = gl.createBuffer();\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\r\n\r\n\t\tprogram = createProgram();\r\n\r\n\t\tattributes = {\r\n\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\r\n\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\r\n\t\t};\r\n\r\n\t\tuniforms = {\r\n\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\r\n\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\r\n\r\n\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\r\n\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\r\n\r\n\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\r\n\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\r\n\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\r\n\r\n\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\r\n\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\r\n\r\n\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\r\n\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\r\n\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\r\n\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\r\n\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\r\n\r\n\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\r\n\t\t};\r\n\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\tcanvas.width = 8;\r\n\t\tcanvas.height = 8;\r\n\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\t\tcontext.fillStyle = 'white';\r\n\t\tcontext.fillRect( 0, 0, 8, 8 );\r\n\r\n\t\ttexture = new THREE.Texture( canvas );\r\n\t\ttexture.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( sprites.length === 0 ) return;\r\n\r\n\t\t// setup gl\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\tinit();\r\n\r\n\t\t}\r\n\r\n\t\tgl.useProgram( program );\r\n\r\n\t\tstate.initAttributes();\r\n\t\tstate.enableAttribute( attributes.position );\r\n\t\tstate.enableAttribute( attributes.uv );\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t\tstate.disable( gl.CULL_FACE );\r\n\t\tstate.enable( gl.BLEND );\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\r\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\r\n\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\r\n\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\tgl.uniform1i( uniforms.map, 0 );\r\n\r\n\t\tvar oldFogType = 0;\r\n\t\tvar sceneFogType = 0;\r\n\t\tvar fog = scene.fog;\r\n\r\n\t\tif ( fog ) {\r\n\r\n\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\r\n\r\n\t\t\tif ( fog instanceof THREE.Fog ) {\r\n\r\n\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\r\n\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\r\n\t\t\t\toldFogType = 1;\r\n\t\t\t\tsceneFogType = 1;\r\n\r\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\r\n\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\r\n\t\t\t\toldFogType = 2;\r\n\t\t\t\tsceneFogType = 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgl.uniform1i( uniforms.fogType, 0 );\r\n\t\t\toldFogType = 0;\r\n\t\t\tsceneFogType = 0;\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// update positions and sort\r\n\r\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar sprite = sprites[ i ];\r\n\r\n\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\r\n\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\r\n\r\n\t\t}\r\n\r\n\t\tsprites.sort( painterSortStable );\r\n\r\n\t\t// render all sprites\r\n\r\n\t\tvar scale = [];\r\n\r\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar sprite = sprites[ i ];\r\n\t\t\tvar material = sprite.material;\r\n\r\n\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\r\n\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\r\n\r\n\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\r\n\r\n\t\t\tscale[ 0 ] = spriteScale.x;\r\n\t\t\tscale[ 1 ] = spriteScale.y;\r\n\r\n\t\t\tvar fogType = 0;\r\n\r\n\t\t\tif ( scene.fog && material.fog ) {\r\n\r\n\t\t\t\tfogType = sceneFogType;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( oldFogType !== fogType ) {\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\r\n\t\t\t\toldFogType = fogType;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.map !== null ) {\r\n\r\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\r\n\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\r\n\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\r\n\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\r\n\r\n\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\r\n\t\t\tgl.uniform2fv( uniforms.scale, scale );\r\n\r\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\t\t\tstate.setDepthTest( material.depthTest );\r\n\t\t\tstate.setDepthWrite( material.depthWrite );\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\trenderer.setTexture2D( material.map, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.setTexture2D( texture, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t// restore gl\r\n\r\n\t\tstate.enable( gl.CULL_FACE );\r\n\r\n\t\trenderer.resetGLState();\r\n\r\n\t};\r\n\r\n\tfunction createProgram () {\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\r\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\r\n\r\n\t\tgl.shaderSource( vertexShader, [\r\n\r\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\r\n\r\n\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t'uniform float rotation;',\r\n\t\t\t'uniform vec2 scale;',\r\n\t\t\t'uniform vec2 uvOffset;',\r\n\t\t\t'uniform vec2 uvScale;',\r\n\r\n\t\t\t'attribute vec2 position;',\r\n\t\t\t'attribute vec2 uv;',\r\n\r\n\t\t\t'varying vec2 vUV;',\r\n\r\n\t\t\t'void main() {',\r\n\r\n\t\t\t\t'vUV = uvOffset + uv * uvScale;',\r\n\r\n\t\t\t\t'vec2 alignedPosition = position * scale;',\r\n\r\n\t\t\t\t'vec2 rotatedPosition;',\r\n\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\r\n\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\r\n\r\n\t\t\t\t'vec4 finalPosition;',\r\n\r\n\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\r\n\t\t\t\t'finalPosition.xy += rotatedPosition;',\r\n\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\r\n\r\n\t\t\t\t'gl_Position = finalPosition;',\r\n\r\n\t\t\t'}'\r\n\r\n\t\t].join( '\\n' ) );\r\n\r\n\t\tgl.shaderSource( fragmentShader, [\r\n\r\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\r\n\r\n\t\t\t'uniform vec3 color;',\r\n\t\t\t'uniform sampler2D map;',\r\n\t\t\t'uniform float opacity;',\r\n\r\n\t\t\t'uniform int fogType;',\r\n\t\t\t'uniform vec3 fogColor;',\r\n\t\t\t'uniform float fogDensity;',\r\n\t\t\t'uniform float fogNear;',\r\n\t\t\t'uniform float fogFar;',\r\n\t\t\t'uniform float alphaTest;',\r\n\r\n\t\t\t'varying vec2 vUV;',\r\n\r\n\t\t\t'void main() {',\r\n\r\n\t\t\t\t'vec4 texture = texture2D( map, vUV );',\r\n\r\n\t\t\t\t'if ( texture.a < alphaTest ) discard;',\r\n\r\n\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\r\n\r\n\t\t\t\t'if ( fogType > 0 ) {',\r\n\r\n\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\r\n\t\t\t\t\t'float fogFactor = 0.0;',\r\n\r\n\t\t\t\t\t'if ( fogType == 1 ) {',\r\n\r\n\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\r\n\r\n\t\t\t\t\t'} else {',\r\n\r\n\t\t\t\t\t\t'const float LOG2 = 1.442695;',\r\n\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\r\n\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\r\n\r\n\t\t\t\t\t'}',\r\n\r\n\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\r\n\r\n\t\t\t\t'}',\r\n\r\n\t\t\t'}'\r\n\r\n\t\t].join( '\\n' ) );\r\n\r\n\t\tgl.compileShader( vertexShader );\r\n\t\tgl.compileShader( fragmentShader );\r\n\r\n\t\tgl.attachShader( program, vertexShader );\r\n\t\tgl.attachShader( program, fragmentShader );\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\treturn program;\r\n\r\n\t}\r\n\r\n\tfunction painterSortStable ( a, b ) {\r\n\t\t\r\n\t\tif ( a.renderOrder !== b.renderOrder ) {\r\n\r\n\t\t\treturn a.renderOrder - b.renderOrder;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn b.id - a.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/Three.Legacy.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nObject.assign( THREE, {\r\n\tFace4: function ( a, b, c, d, normal, color, materialIndex ) {\r\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\r\n\t\treturn new THREE.Face3( a, b, c, normal, color, materialIndex );\r\n\t},\r\n\tLineStrip: 0,\r\n\tLinePieces: 1,\r\n\tMeshFaceMaterial: THREE.MultiMaterial,\r\n\tPointCloud: function ( geometry, material ) {\r\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\r\n\t\treturn new THREE.Points( geometry, material );\r\n\t},\r\n\tParticle: THREE.Sprite,\r\n\tParticleSystem: function ( geometry, material ) {\r\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\r\n\t\treturn new THREE.Points( geometry, material );\r\n\t},\r\n\tPointCloudMaterial: function ( parameters ) {\r\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new THREE.PointsMaterial( parameters );\r\n\t},\r\n\tParticleBasicMaterial: function ( parameters ) {\r\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new THREE.PointsMaterial( parameters );\r\n\t},\r\n\tParticleSystemMaterial: function ( parameters ) {\r\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new THREE.PointsMaterial( parameters );\r\n\t},\r\n\tVertex: function ( x, y, z ) {\r\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\r\n\t\treturn new THREE.Vector3( x, y, z );\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.assign( THREE.Box2.prototype, {\r\n\tempty: function () {\r\n\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\r\n\t\treturn this.isEmpty();\r\n\t},\r\n\tisIntersectionBox: function ( box ) {\r\n\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\treturn this.intersectsBox( box );\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.Box3.prototype, {\r\n\tempty: function () {\r\n\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\r\n\t\treturn this.isEmpty();\r\n\t},\r\n\tisIntersectionBox: function ( box ) {\r\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\treturn this.intersectsBox( box );\r\n\t},\r\n\tisIntersectionSphere: function ( sphere ) {\r\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\treturn this.intersectsSphere( sphere );\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.Matrix3.prototype, {\r\n\tmultiplyVector3: function ( vector ) {\r\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix3( this );\r\n\t},\r\n\tmultiplyVector3Array: function ( a ) {\r\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\r\n\t\treturn this.applyToVector3Array( a );\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.Matrix4.prototype, {\r\n\textractPosition: function ( m ) {\r\n\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\r\n\t\treturn this.copyPosition( m );\r\n\t},\r\n\tsetRotationFromQuaternion: function ( q ) {\r\n\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\r\n\t\treturn this.makeRotationFromQuaternion( q );\r\n\t},\r\n\tmultiplyVector3: function ( vector ) {\r\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\r\n\t\treturn vector.applyProjection( this );\r\n\t},\r\n\tmultiplyVector4: function ( vector ) {\r\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix4( this );\r\n\t},\r\n\tmultiplyVector3Array: function ( a ) {\r\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\r\n\t\treturn this.applyToVector3Array( a );\r\n\t},\r\n\trotateAxis: function ( v ) {\r\n\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\r\n\t\tv.transformDirection( this );\r\n\t},\r\n\tcrossVector: function ( vector ) {\r\n\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix4( this );\r\n\t},\r\n\ttranslate: function ( v ) {\r\n\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\r\n\t},\r\n\trotateX: function ( angle ) {\r\n\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\r\n\t},\r\n\trotateY: function ( angle ) {\r\n\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\r\n\t},\r\n\trotateZ: function ( angle ) {\r\n\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\r\n\t},\r\n\trotateByAxis: function ( axis, angle ) {\r\n\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.Plane.prototype, {\r\n\tisIntersectionLine: function ( line ) {\r\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\r\n\t\treturn this.intersectsLine( line );\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.Quaternion.prototype, {\r\n\tmultiplyVector3: function ( vector ) {\r\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\r\n\t\treturn vector.applyQuaternion( this );\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.Ray.prototype, {\r\n\tisIntersectionBox: function ( box ) {\r\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\treturn this.intersectsBox( box );\r\n\t},\r\n\tisIntersectionPlane: function ( plane ) {\r\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\r\n\t\treturn this.intersectsPlane( plane );\r\n\t},\r\n\tisIntersectionSphere: function ( sphere ) {\r\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\treturn this.intersectsSphere( sphere );\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.Vector3.prototype, {\r\n\tsetEulerFromRotationMatrix: function () {\r\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\r\n\t},\r\n\tsetEulerFromQuaternion: function () {\r\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\r\n\t},\r\n\tgetPositionFromMatrix: function ( m ) {\r\n\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\r\n\t\treturn this.setFromMatrixPosition( m );\r\n\t},\r\n\tgetScaleFromMatrix: function ( m ) {\r\n\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\r\n\t\treturn this.setFromMatrixScale( m );\r\n\t},\r\n\tgetColumnFromMatrix: function ( index, matrix ) {\r\n\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\r\n\t\treturn this.setFromMatrixColumn( matrix, index );\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.assign( THREE.Object3D.prototype, {\r\n\tgetChildByName: function ( name ) {\r\n\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\r\n\t\treturn this.getObjectByName( name );\r\n\t},\r\n\trenderDepth: function ( value ) {\r\n\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\r\n\t},\r\n\ttranslate: function ( distance, axis ) {\r\n\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\r\n\t\treturn this.translateOnAxis( axis, distance );\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.Object3D.prototype, {\r\n\teulerOrder: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\treturn this.rotation.order;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\tthis.rotation.order = value;\r\n\t\t}\r\n\t},\r\n\tuseQuaternion: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.LOD.prototype, {\r\n\tobjects: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\r\n\t\t\treturn this.levels;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\r\n\r\n\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\r\n\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\r\n\r\n\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\r\n\tthis.setFocalLength( focalLength );\r\n\r\n};\r\n\r\n//\r\n\r\nObject.defineProperties( THREE.Light.prototype, {\r\n\tonlyShadow: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\r\n\t\t}\r\n\t},\r\n\tshadowCameraFov: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\r\n\t\t\tthis.shadow.camera.fov = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraLeft: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\r\n\t\t\tthis.shadow.camera.left = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraRight: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\r\n\t\t\tthis.shadow.camera.right = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraTop: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\r\n\t\t\tthis.shadow.camera.top = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraBottom: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\r\n\t\t\tthis.shadow.camera.bottom = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraNear: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\r\n\t\t\tthis.shadow.camera.near = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraFar: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\r\n\t\t\tthis.shadow.camera.far = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraVisible: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\r\n\t\t}\r\n\t},\r\n\tshadowBias: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\r\n\t\t\tthis.shadow.bias = value;\r\n\t\t}\r\n\t},\r\n\tshadowDarkness: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\r\n\t\t}\r\n\t},\r\n\tshadowMapWidth: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\r\n\t\t\tthis.shadow.mapSize.width = value;\r\n\t\t}\r\n\t},\r\n\tshadowMapHeight: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\r\n\t\t\tthis.shadow.mapSize.height = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.defineProperties( THREE.BufferAttribute.prototype, {\r\n\tlength: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\r\n\t\t\treturn this.array.length;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.BufferGeometry.prototype, {\r\n\taddIndex: function ( index ) {\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\r\n\t\tthis.setIndex( index );\r\n\t},\r\n\taddDrawCall: function ( start, count, indexOffset ) {\r\n\t\tif ( indexOffset !== undefined ) {\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\r\n\t\t}\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\r\n\t\tthis.addGroup( start, count );\r\n\t},\r\n\tclearDrawCalls: function () {\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\r\n\t\tthis.clearGroups();\r\n\t},\r\n\tcomputeTangents: function () {\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\r\n\t},\r\n\tcomputeOffsets: function () {\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.BufferGeometry.prototype, {\r\n\tdrawcalls: {\r\n\t\tget: function () {\r\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\r\n\t\t\treturn this.groups;\r\n\t\t}\r\n\t},\r\n\toffsets: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\r\n\t\t\treturn this.groups;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.defineProperties( THREE.Material.prototype, {\r\n\twrapAround: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\r\n\t\t}\r\n\t},\r\n\twrapRGB: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\r\n\t\t\treturn new THREE.Color();\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.MeshPhongMaterial.prototype, {\r\n\tmetal: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.ShaderMaterial.prototype, {\r\n\tderivatives: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\treturn this.extensions.derivatives;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\tthis.extensions.derivatives = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nTHREE.EventDispatcher.prototype = Object.assign( Object.create( {\r\n\r\n\t// Note: Extra base ensures these properties are not 'assign'ed.\r\n\r\n\tconstructor: THREE.EventDispatcher,\r\n\r\n\tapply: function ( target ) {\r\n\r\n\t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\r\n\t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\r\n\r\n\t\tObject.assign( target, this );\r\n\r\n\t}\r\n\r\n} ), THREE.EventDispatcher.prototype );\r\n\r\n//\r\n\r\nObject.assign( THREE.WebGLRenderer.prototype, {\r\n\tsupportsFloatTextures: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\r\n\t\treturn this.extensions.get( 'OES_texture_float' );\r\n\t},\r\n\tsupportsHalfFloatTextures: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\r\n\t\treturn this.extensions.get( 'OES_texture_half_float' );\r\n\t},\r\n\tsupportsStandardDerivatives: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\r\n\t\treturn this.extensions.get( 'OES_standard_derivatives' );\r\n\t},\r\n\tsupportsCompressedTextureS3TC: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\r\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\t},\r\n\tsupportsCompressedTexturePVRTC: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\r\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\t},\r\n\tsupportsBlendMinMax: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\r\n\t\treturn this.extensions.get( 'EXT_blend_minmax' );\r\n\t},\r\n\tsupportsVertexTextures: function () {\r\n\t\treturn this.capabilities.vertexTextures;\r\n\t},\r\n\tsupportsInstancedArrays: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\r\n\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\r\n\t},\r\n\tenableScissorTest: function ( boolean ) {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\r\n\t\tthis.setScissorTest( boolean );\r\n\t},\r\n\tinitMaterial: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\r\n\t},\r\n\taddPrePlugin: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\r\n\t},\r\n\taddPostPlugin: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\r\n\t},\r\n\tupdateShadowMap: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.WebGLRenderer.prototype, {\r\n\tshadowMapEnabled: {\r\n\t\tget: function () {\r\n\t\t\treturn this.shadowMap.enabled;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\r\n\t\t\tthis.shadowMap.enabled = value;\r\n\t\t}\r\n\t},\r\n\tshadowMapType: {\r\n\t\tget: function () {\r\n\t\t\treturn this.shadowMap.type;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\r\n\t\t\tthis.shadowMap.type = value;\r\n\t\t}\r\n\t},\r\n\tshadowMapCullFace: {\r\n\t\tget: function () {\r\n\t\t\treturn this.shadowMap.cullFace;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\r\n\t\t\tthis.shadowMap.cullFace = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.WebGLShadowMap.prototype, {\r\n\tcullFace: {\r\n\t\tget: function () {\r\n\t\t\treturn this.renderReverseSided ? THREE.CullFaceFront : THREE.CullFaceBack;\r\n\t\t},\r\n\t\tset: function ( cullFace ) {\r\n\t\t\tvar value = ( cullFace !== THREE.CullFaceBack );\r\n\t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\r\n\t\t\tthis.renderReverseSided = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.defineProperties( THREE.WebGLRenderTarget.prototype, {\r\n\twrapS: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\treturn this.texture.wrapS;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\tthis.texture.wrapS = value;\r\n\t\t}\r\n\t},\r\n\twrapT: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\treturn this.texture.wrapT;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\tthis.texture.wrapT = value;\r\n\t\t}\r\n\t},\r\n\tmagFilter: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\treturn this.texture.magFilter;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\tthis.texture.magFilter = value;\r\n\t\t}\r\n\t},\r\n\tminFilter: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\treturn this.texture.minFilter;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\tthis.texture.minFilter = value;\r\n\t\t}\r\n\t},\r\n\tanisotropy: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\treturn this.texture.anisotropy;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\tthis.texture.anisotropy = value;\r\n\t\t}\r\n\t},\r\n\toffset: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\treturn this.texture.offset;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\tthis.texture.offset = value;\r\n\t\t}\r\n\t},\r\n\trepeat: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\treturn this.texture.repeat;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\tthis.texture.repeat = value;\r\n\t\t}\r\n\t},\r\n\tformat: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\treturn this.texture.format;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\tthis.texture.format = value;\r\n\t\t}\r\n\t},\r\n\ttype: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\treturn this.texture.type;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\tthis.texture.type = value;\r\n\t\t}\r\n\t},\r\n\tgenerateMipmaps: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\treturn this.texture.generateMipmaps;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\tthis.texture.generateMipmaps = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.assign( THREE.Audio.prototype, {\r\n\tload: function ( file ) {\r\n\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\r\n\t\tvar scope = this;\r\n\t\tvar audioLoader = new THREE.AudioLoader();\r\n\t\taudioLoader.load( file, function ( buffer ) {\r\n\t\t\tscope.setBuffer( buffer );\r\n\t\t} );\r\n\t\treturn this;\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.AudioAnalyser.prototype, {\r\n\tgetData: function ( file ) {\r\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\r\n\t\treturn this.getFrequencyData();\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nTHREE.GeometryUtils = {\r\n\r\n\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\r\n\r\n\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\r\n\r\n\t\tvar matrix;\r\n\r\n\t\tif ( geometry2 instanceof THREE.Mesh ) {\r\n\r\n\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\r\n\r\n\t\t\tmatrix = geometry2.matrix;\r\n\t\t\tgeometry2 = geometry2.geometry;\r\n\r\n\t\t}\r\n\r\n\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\r\n\r\n\t},\r\n\r\n\tcenter: function ( geometry ) {\r\n\r\n\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\r\n\t\treturn geometry.center();\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ImageUtils = {\r\n\r\n\tcrossOrigin: undefined,\r\n\r\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\r\n\r\n\t\tvar loader = new THREE.TextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\r\n\r\n\t\tvar loader = new THREE.CubeTextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadCompressedTexture: function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\r\n\r\n\t},\r\n\r\n\tloadCompressedTextureCube: function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\r\n\r\n\t}\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.Projector = function () {\r\n\r\n\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\r\n\r\n\tthis.projectVector = function ( vector, camera ) {\r\n\r\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\r\n\t\tvector.project( camera );\r\n\r\n\t};\r\n\r\n\tthis.unprojectVector = function ( vector, camera ) {\r\n\r\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\r\n\t\tvector.unproject( camera );\r\n\r\n\t};\r\n\r\n\tthis.pickingRay = function ( vector, camera ) {\r\n\r\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\r\n\r\n\t};\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.CanvasRenderer = function () {\r\n\r\n\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\r\n\r\n\tthis.domElement = document.createElement( 'canvas' );\r\n\tthis.clear = function () {};\r\n\tthis.render = function () {};\r\n\tthis.setClearColor = function () {};\r\n\tthis.setSize = function () {};\r\n\r\n};\r\n\r\n// File:src/extras/CurveUtils.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.CurveUtils = {\r\n\r\n\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\r\n\r\n\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\r\n\r\n\t},\r\n\r\n\t// Puay Bing, thanks for helping with this derivative!\r\n\r\n\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\r\n\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\r\n\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\r\n\t\t\t3 * t * t * p3;\r\n\r\n\t},\r\n\r\n\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\t// To check if my formulas are correct\r\n\r\n\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\r\n\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\r\n\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\r\n\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\r\n\r\n\t\treturn h00 + h10 + h01 + h11;\r\n\r\n\t},\r\n\r\n\t// Catmull-Rom\r\n\r\n\tinterpolate: function( p0, p1, p2, p3, t ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\r\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t * t2;\r\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/SceneUtils.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SceneUtils = {\r\n\r\n\tcreateMultiMaterialObject: function ( geometry, materials ) {\r\n\r\n\t\tvar group = new THREE.Group();\r\n\r\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\r\n\r\n\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn group;\r\n\r\n\t},\r\n\r\n\tdetach: function ( child, parent, scene ) {\r\n\r\n\t\tchild.applyMatrix( parent.matrixWorld );\r\n\t\tparent.remove( child );\r\n\t\tscene.add( child );\r\n\r\n\t},\r\n\r\n\tattach: function ( child, scene, parent ) {\r\n\r\n\t\tvar matrixWorldInverse = new THREE.Matrix4();\r\n\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\r\n\t\tchild.applyMatrix( matrixWorldInverse );\r\n\r\n\t\tscene.remove( child );\r\n\t\tparent.add( child );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/ShapeUtils.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.ShapeUtils = {\r\n\r\n\t// calculate area of the contour polygon\r\n\r\n\tarea: function ( contour ) {\r\n\r\n\t\tvar n = contour.length;\r\n\t\tvar a = 0.0;\r\n\r\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\r\n\r\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\r\n\t\t}\r\n\r\n\t\treturn a * 0.5;\r\n\r\n\t},\r\n\r\n\ttriangulate: ( function () {\r\n\r\n\t\t/**\r\n\t\t * This code is a quick port of code written in C++ which was submitted to\r\n\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\r\n\t\t * See original code and more information here:\r\n\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\r\n\t\t *\r\n\t\t * ported to actionscript by Zevan Rosser\r\n\t\t * www.actionsnippet.com\r\n\t\t *\r\n\t\t * ported to javascript by Joshua Koo\r\n\t\t * http://www.lab4games.net/zz85/blog\r\n\t\t *\r\n\t\t */\r\n\r\n\t\tfunction snip( contour, u, v, w, n, verts ) {\r\n\r\n\t\t\tvar p;\r\n\t\t\tvar ax, ay, bx, by;\r\n\t\t\tvar cx, cy, px, py;\r\n\r\n\t\t\tax = contour[ verts[ u ] ].x;\r\n\t\t\tay = contour[ verts[ u ] ].y;\r\n\r\n\t\t\tbx = contour[ verts[ v ] ].x;\r\n\t\t\tby = contour[ verts[ v ] ].y;\r\n\r\n\t\t\tcx = contour[ verts[ w ] ].x;\r\n\t\t\tcy = contour[ verts[ w ] ].y;\r\n\r\n\t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\r\n\r\n\t\t\tvar aX, aY, bX, bY, cX, cY;\r\n\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\r\n\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\r\n\r\n\t\t\taX = cx - bx;  aY = cy - by;\r\n\t\t\tbX = ax - cx;  bY = ay - cy;\r\n\t\t\tcX = bx - ax;  cY = by - ay;\r\n\r\n\t\t\tfor ( p = 0; p < n; p ++ ) {\r\n\r\n\t\t\t\tpx = contour[ verts[ p ] ].x;\r\n\t\t\t\tpy = contour[ verts[ p ] ].y;\r\n\r\n\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\r\n\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\r\n\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\r\n\r\n\t\t\t\tapx = px - ax;  apy = py - ay;\r\n\t\t\t\tbpx = px - bx;  bpy = py - by;\r\n\t\t\t\tcpx = px - cx;  cpy = py - cy;\r\n\r\n\t\t\t\t// see if p is inside triangle abc\r\n\r\n\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\r\n\t\t\t\tcCROSSap = cX * apy - cY * apx;\r\n\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\r\n\r\n\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// takes in an contour array and returns\r\n\r\n\t\treturn function ( contour, indices ) {\r\n\r\n\t\t\tvar n = contour.length;\r\n\r\n\t\t\tif ( n < 3 ) return null;\r\n\r\n\t\t\tvar result = [],\r\n\t\t\t\tverts = [],\r\n\t\t\t\tvertIndices = [];\r\n\r\n\t\t\t/* we want a counter-clockwise polygon in verts */\r\n\r\n\t\t\tvar u, v, w;\r\n\r\n\t\t\tif ( THREE.ShapeUtils.area( contour ) > 0.0 ) {\r\n\r\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar nv = n;\r\n\r\n\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\r\n\r\n\t\t\tvar count = 2 * nv;   /* error detection */\r\n\r\n\t\t\tfor ( v = nv - 1; nv > 2; ) {\r\n\r\n\t\t\t\t/* if we loop, it is probably a non-simple polygon */\r\n\r\n\t\t\t\tif ( ( count -- ) <= 0 ) {\r\n\r\n\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\r\n\r\n\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\r\n\t\t\t\t\t//return null;\r\n\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\r\n\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\r\n\r\n\t\t\t\t\tif ( indices ) return vertIndices;\r\n\t\t\t\t\treturn result;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\r\n\r\n\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\r\n\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\r\n\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\r\n\r\n\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\r\n\r\n\t\t\t\t\tvar a, b, c, s, t;\r\n\r\n\t\t\t\t\t/* true names of the vertices */\r\n\r\n\t\t\t\t\ta = verts[ u ];\r\n\t\t\t\t\tb = verts[ v ];\r\n\t\t\t\t\tc = verts[ w ];\r\n\r\n\t\t\t\t\t/* output Triangle */\r\n\r\n\t\t\t\t\tresult.push( [ contour[ a ],\r\n\t\t\t\t\t\tcontour[ b ],\r\n\t\t\t\t\t\tcontour[ c ] ] );\r\n\r\n\r\n\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\r\n\r\n\t\t\t\t\t/* remove v from the remaining polygon */\r\n\r\n\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\r\n\r\n\t\t\t\t\t\tverts[ s ] = verts[ t ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnv --;\r\n\r\n\t\t\t\t\t/* reset error detection counter */\r\n\r\n\t\t\t\t\tcount = 2 * nv;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( indices ) return vertIndices;\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} )(),\r\n\r\n\ttriangulateShape: function ( contour, holes ) {\r\n\r\n\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\r\n\r\n\t\t\t// inOtherPt needs to be collinear to the inSegment\r\n\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\r\n\r\n\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\r\n\r\n\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\r\n\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\r\n\r\n\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\r\n\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\r\n\r\n\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\r\n\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\r\n\r\n\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t// not parallel\r\n\r\n\t\t\t\tvar perpSeg2;\r\n\t\t\t\tif ( limit > 0 ) {\r\n\r\n\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\r\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\r\n\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\r\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\r\n\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// i.e. to reduce rounding errors\r\n\t\t\t\t// intersection at endpoint of segment#1?\r\n\t\t\t\tif ( perpSeg2 === 0 ) {\r\n\r\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\r\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\r\n\t\t\t\t\treturn [ inSeg1Pt1 ];\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( perpSeg2 === limit ) {\r\n\r\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\r\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\r\n\t\t\t\t\treturn [ inSeg1Pt2 ];\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// intersection at endpoint of segment#2?\r\n\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\r\n\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\r\n\r\n\t\t\t\t// return real intersection point\r\n\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\r\n\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\r\n\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// parallel or collinear\r\n\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\r\n\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\r\n\r\n\t\t\t\t// they are collinear or degenerate\r\n\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\r\n\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\r\n\t\t\t\t// both segments are points\r\n\t\t\t\tif ( seg1Pt && seg2Pt ) {\r\n\r\n\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\r\n\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\r\n\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// segment#1  is a single point\r\n\t\t\t\tif ( seg1Pt ) {\r\n\r\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\r\n\t\t\t\t\treturn [ inSeg1Pt1 ];\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// segment#2  is a single point\r\n\t\t\t\tif ( seg2Pt ) {\r\n\r\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\r\n\t\t\t\t\treturn [ inSeg2Pt1 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// they are collinear segments, which might overlap\r\n\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\r\n\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\r\n\t\t\t\tif ( seg1dx !== 0 ) {\r\n\r\n\t\t\t\t\t// the segments are NOT on a vertical line\r\n\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// the segments are on a vertical line\r\n\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( seg1minVal <= seg2minVal ) {\r\n\r\n\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\r\n\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\r\n\r\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\r\n\t\t\t\t\t\treturn [ seg2min ];\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\r\n\t\t\t\t\treturn\t[ seg2min, seg2max ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\r\n\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\r\n\r\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\r\n\t\t\t\t\t\treturn [ seg1min ];\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\r\n\t\t\t\t\treturn\t[ seg1min, seg2max ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\r\n\r\n\t\t\t// The order of legs is important\r\n\r\n\t\t\t// translation of all points, so that Vertex is at (0,0)\r\n\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\r\n\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\r\n\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\r\n\r\n\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\r\n\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\r\n\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\r\n\r\n\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t// angle != 180 deg.\r\n\r\n\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\r\n\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\r\n\r\n\t\t\t\tif ( from2toAngle > 0 ) {\r\n\r\n\t\t\t\t\t// main angle < 180 deg.\r\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// main angle > 180 deg.\r\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// angle == 180 deg.\r\n\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\r\n\t\t\t\treturn\t( from2otherAngle > 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction removeHoles( contour, holes ) {\r\n\r\n\t\t\tvar shape = contour.concat(); // work on this shape\r\n\t\t\tvar hole;\r\n\r\n\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\r\n\r\n\t\t\t\t// Check if hole point lies within angle around shape point\r\n\t\t\t\tvar lastShapeIdx = shape.length - 1;\r\n\r\n\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\r\n\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\r\n\r\n\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\r\n\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\r\n\r\n\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\r\n\t\t\t\tif ( ! insideAngle ) {\r\n\r\n\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\r\n\t\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check if shape point lies within angle around hole point\r\n\t\t\t\tvar lastHoleIdx = hole.length - 1;\r\n\r\n\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\r\n\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\r\n\r\n\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\r\n\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\r\n\r\n\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\r\n\t\t\t\tif ( ! insideAngle ) {\r\n\r\n\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\r\n\t\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\ttrue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\r\n\r\n\t\t\t\t// checks for intersections with shape edges\r\n\t\t\t\tvar sIdx, nextIdx, intersection;\r\n\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\r\n\r\n\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\r\n\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\r\n\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar indepHoles = [];\r\n\r\n\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\r\n\r\n\t\t\t\t// checks for intersections with hole edges\r\n\t\t\t\tvar ihIdx, chkHole,\r\n\t\t\t\t\thIdx, nextIdx, intersection;\r\n\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\r\n\r\n\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\r\n\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\r\n\r\n\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\r\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\r\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar holeIndex, shapeIndex,\r\n\t\t\t\tshapePt, holePt,\r\n\t\t\t\tholeIdx, cutKey, failedCuts = [],\r\n\t\t\t\ttmpShape1, tmpShape2,\r\n\t\t\t\ttmpHole1, tmpHole2;\r\n\r\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tindepHoles.push( h );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar minShapeIndex = 0;\r\n\t\t\tvar counter = indepHoles.length * 2;\r\n\t\t\twhile ( indepHoles.length > 0 ) {\r\n\r\n\t\t\t\tcounter --;\r\n\t\t\t\tif ( counter < 0 ) {\r\n\r\n\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// search for shape-vertex and hole-vertex,\r\n\t\t\t\t// which can be connected without intersections\r\n\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\r\n\r\n\t\t\t\t\tshapePt = shape[ shapeIndex ];\r\n\t\t\t\t\tholeIndex\t= - 1;\r\n\r\n\t\t\t\t\t// search for hole which can be reached without intersections\r\n\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\r\n\r\n\t\t\t\t\t\tholeIdx = indepHoles[ h ];\r\n\r\n\t\t\t\t\t\t// prevent multiple checks\r\n\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\r\n\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\thole = holes[ holeIdx ];\r\n\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\r\n\r\n\t\t\t\t\t\t\tholePt = hole[ h2 ];\r\n\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\r\n\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\r\n\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\tholeIndex = h2;\r\n\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\r\n\r\n\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\r\n\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\r\n\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\r\n\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\r\n\r\n\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\r\n\r\n\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\r\n\r\n\t\t\t\t\t\t\t// Debug only, to show the selected cuts\r\n\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\r\n\r\n\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn shape; \t\t\t/* shape with no holes */\r\n\r\n\t\t}\r\n\r\n\r\n\t\tvar i, il, f, face,\r\n\t\t\tkey, index,\r\n\t\t\tallPointsMap = {};\r\n\r\n\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\r\n\r\n\t\tvar allpoints = contour.concat();\r\n\r\n\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\r\n\r\n\t\t}\r\n\r\n\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\r\n\r\n\t\t// prepare all points map\r\n\r\n\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\r\n\r\n\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\r\n\r\n\t\t\tif ( allPointsMap[ key ] !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.Shape: Duplicate point\", key );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tallPointsMap[ key ] = i;\r\n\r\n\t\t}\r\n\r\n\t\t// remove holes by cutting paths to holes and adding them to the shape\r\n\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\r\n\r\n\t\tvar triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\r\n\t\t//console.log( \"triangles\",triangles, triangles.length );\r\n\r\n\t\t// check all face vertices against all points map\r\n\r\n\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = triangles[ i ];\r\n\r\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\r\n\r\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\r\n\r\n\t\t\t\tindex = allPointsMap[ key ];\r\n\r\n\t\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\t\tface[ f ] = index;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn triangles.concat();\r\n\r\n\t},\r\n\r\n\tisClockWise: function ( pts ) {\r\n\r\n\t\treturn THREE.ShapeUtils.area( pts ) < 0;\r\n\r\n\t},\r\n\r\n\t// Bezier Curves formulas obtained from\r\n\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\r\n\r\n\t// Quad Bezier Functions\r\n\r\n\tb2: ( function () {\r\n\r\n\t\tfunction b2p0( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn k * k * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b2p1( t, p ) {\r\n\r\n\t\t\treturn 2 * ( 1 - t ) * t * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b2p2( t, p ) {\r\n\r\n\t\t\treturn t * t * p;\r\n\r\n\t\t}\r\n\r\n\t\treturn function ( t, p0, p1, p2 ) {\r\n\r\n\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\t// Cubic Bezier Functions\r\n\r\n\tb3: ( function () {\r\n\r\n\t\tfunction b3p0( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn k * k * k * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b3p1( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn 3 * k * k * t * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b3p2( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn 3 * k * t * t * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b3p3( t, p ) {\r\n\r\n\t\t\treturn t * t * t * p;\r\n\r\n\t\t}\r\n\r\n\t\treturn function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n};\r\n\r\n// File:src/extras/core/Curve.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Extensible curve object\r\n *\r\n * Some common of Curve methods\r\n * .getPoint(t), getTangent(t)\r\n * .getPointAt(u), getTagentAt(u)\r\n * .getPoints(), .getSpacedPoints()\r\n * .getLength()\r\n * .updateArcLengths()\r\n *\r\n * This following classes subclasses THREE.Curve:\r\n *\r\n * -- 2d classes --\r\n * THREE.LineCurve\r\n * THREE.QuadraticBezierCurve\r\n * THREE.CubicBezierCurve\r\n * THREE.SplineCurve\r\n * THREE.ArcCurve\r\n * THREE.EllipseCurve\r\n *\r\n * -- 3d classes --\r\n * THREE.LineCurve3\r\n * THREE.QuadraticBezierCurve3\r\n * THREE.CubicBezierCurve3\r\n * THREE.SplineCurve3\r\n *\r\n * A series of curves can be represented as a THREE.CurvePath\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tAbstract Curve base class\r\n **************************************************************/\r\n\r\nTHREE.Curve = function () {\r\n\r\n};\r\n\r\nTHREE.Curve.prototype = {\r\n\r\n\tconstructor: THREE.Curve,\r\n\r\n\t// Virtual base class method to overwrite and implement in subclasses\r\n\t//\t- t [0 .. 1]\r\n\r\n\tgetPoint: function ( t ) {\r\n\r\n\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\r\n\t\treturn null;\r\n\r\n\t},\r\n\r\n\t// Get point at relative position in curve according to arc length\r\n\t// - u [0 .. 1]\r\n\r\n\tgetPointAt: function ( u ) {\r\n\r\n\t\tvar t = this.getUtoTmapping( u );\r\n\t\treturn this.getPoint( t );\r\n\r\n\t},\r\n\r\n\t// Get sequence of points using getPoint( t )\r\n\r\n\tgetPoints: function ( divisions ) {\r\n\r\n\t\tif ( ! divisions ) divisions = 5;\r\n\r\n\t\tvar d, pts = [];\r\n\r\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\tpts.push( this.getPoint( d / divisions ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn pts;\r\n\r\n\t},\r\n\r\n\t// Get sequence of points using getPointAt( u )\r\n\r\n\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\tif ( ! divisions ) divisions = 5;\r\n\r\n\t\tvar d, pts = [];\r\n\r\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\tpts.push( this.getPointAt( d / divisions ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn pts;\r\n\r\n\t},\r\n\r\n\t// Get total curve arc length\r\n\r\n\tgetLength: function () {\r\n\r\n\t\tvar lengths = this.getLengths();\r\n\t\treturn lengths[ lengths.length - 1 ];\r\n\r\n\t},\r\n\r\n\t// Get list of cumulative segment lengths\r\n\r\n\tgetLengths: function ( divisions ) {\r\n\r\n\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\r\n\r\n\t\tif ( this.cacheArcLengths\r\n\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\r\n\t\t\t&& ! this.needsUpdate ) {\r\n\r\n\t\t\t//console.log( \"cached\", this.cacheArcLengths );\r\n\t\t\treturn this.cacheArcLengths;\r\n\r\n\t\t}\r\n\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t\tvar cache = [];\r\n\t\tvar current, last = this.getPoint( 0 );\r\n\t\tvar p, sum = 0;\r\n\r\n\t\tcache.push( 0 );\r\n\r\n\t\tfor ( p = 1; p <= divisions; p ++ ) {\r\n\r\n\t\t\tcurrent = this.getPoint ( p / divisions );\r\n\t\t\tsum += current.distanceTo( last );\r\n\t\t\tcache.push( sum );\r\n\t\t\tlast = current;\r\n\r\n\t\t}\r\n\r\n\t\tthis.cacheArcLengths = cache;\r\n\r\n\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\r\n\r\n\t},\r\n\r\n\tupdateArcLengths: function() {\r\n\r\n\t\tthis.needsUpdate = true;\r\n\t\tthis.getLengths();\r\n\r\n\t},\r\n\r\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\r\n\r\n\tgetUtoTmapping: function ( u, distance ) {\r\n\r\n\t\tvar arcLengths = this.getLengths();\r\n\r\n\t\tvar i = 0, il = arcLengths.length;\r\n\r\n\t\tvar targetArcLength; // The targeted u distance value to get\r\n\r\n\t\tif ( distance ) {\r\n\r\n\t\t\ttargetArcLength = distance;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\r\n\t\t}\r\n\r\n\t\t//var time = Date.now();\r\n\r\n\t\t// binary search for the index with largest value smaller than target u distance\r\n\r\n\t\tvar low = 0, high = il - 1, comparison;\r\n\r\n\t\twhile ( low <= high ) {\r\n\r\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\r\n\t\t\tif ( comparison < 0 ) {\r\n\r\n\t\t\t\tlow = i + 1;\r\n\r\n\t\t\t} else if ( comparison > 0 ) {\r\n\r\n\t\t\t\thigh = i - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\thigh = i;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t// DONE\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\ti = high;\r\n\r\n\t\t//console.log('b' , i, low, high, Date.now()- time);\r\n\r\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\r\n\r\n\t\t\tvar t = i / ( il - 1 );\r\n\t\t\treturn t;\r\n\r\n\t\t}\r\n\r\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\r\n\r\n\t\tvar lengthBefore = arcLengths[ i ];\r\n\t\tvar lengthAfter = arcLengths[ i + 1 ];\r\n\r\n\t\tvar segmentLength = lengthAfter - lengthBefore;\r\n\r\n\t\t// determine where we are between the 'before' and 'after' points\r\n\r\n\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\r\n\t\t// add that fractional amount to t\r\n\r\n\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\r\n\r\n\t\treturn t;\r\n\r\n\t},\r\n\r\n\t// Returns a unit vector tangent at t\r\n\t// In case any sub curve does not implement its tangent derivation,\r\n\t// 2 points a small delta apart will be used to find its gradient\r\n\t// which seems to give a reasonable approximation\r\n\r\n\tgetTangent: function( t ) {\r\n\r\n\t\tvar delta = 0.0001;\r\n\t\tvar t1 = t - delta;\r\n\t\tvar t2 = t + delta;\r\n\r\n\t\t// Capping in case of danger\r\n\r\n\t\tif ( t1 < 0 ) t1 = 0;\r\n\t\tif ( t2 > 1 ) t2 = 1;\r\n\r\n\t\tvar pt1 = this.getPoint( t1 );\r\n\t\tvar pt2 = this.getPoint( t2 );\r\n\r\n\t\tvar vec = pt2.clone().sub( pt1 );\r\n\t\treturn vec.normalize();\r\n\r\n\t},\r\n\r\n\tgetTangentAt: function ( u ) {\r\n\r\n\t\tvar t = this.getUtoTmapping( u );\r\n\t\treturn this.getTangent( t );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// TODO: Transformation for Curves?\r\n\r\n/**************************************************************\r\n *\t3D Curves\r\n **************************************************************/\r\n\r\n// A Factory method for creating new curve subclasses\r\n\r\nTHREE.Curve.create = function ( constructor, getPointFunc ) {\r\n\r\n\tconstructor.prototype = Object.create( THREE.Curve.prototype );\r\n\tconstructor.prototype.constructor = constructor;\r\n\tconstructor.prototype.getPoint = getPointFunc;\r\n\r\n\treturn constructor;\r\n\r\n};\r\n\r\n// File:src/extras/core/CurvePath.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tCurved Path - a curve path is simply a array of connected\r\n *  curves, but retains the api of a curve\r\n **************************************************************/\r\n\r\nTHREE.CurvePath = function () {\r\n\r\n\tthis.curves = [];\r\n\r\n\tthis.autoClose = false; // Automatically closes the path\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype = Object.assign( Object.create( THREE.Curve.prototype ), {\r\n\r\n\tconstructor: THREE.CurvePath,\r\n\r\n\tadd: function ( curve ) {\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t},\r\n\r\n\tclosePath: function () {\r\n\r\n\t\t// TODO Test\r\n\t\t// and verify for vector3 (needs to implement equals)\r\n\t\t// Add a line curve if start and end of lines are not connected\r\n\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\r\n\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\r\n\r\n\t\tif ( ! startPoint.equals( endPoint ) ) {\r\n\r\n\t\t\tthis.curves.push( new THREE.LineCurve( endPoint, startPoint ) );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// To get accurate point with reference to\r\n\t// entire path distance at time t,\r\n\t// following has to be done:\r\n\r\n\t// 1. Length of each sub path have to be known\r\n\t// 2. Locate and identify type of curve\r\n\t// 3. Get t for the curve\r\n\t// 4. Return curve.getPointAt(t')\r\n\r\n\tgetPoint: function ( t ) {\r\n\r\n\t\tvar d = t * this.getLength();\r\n\t\tvar curveLengths = this.getCurveLengths();\r\n\t\tvar i = 0;\r\n\r\n\t\t// To think about boundaries points.\r\n\r\n\t\twhile ( i < curveLengths.length ) {\r\n\r\n\t\t\tif ( curveLengths[ i ] >= d ) {\r\n\r\n\t\t\t\tvar diff = curveLengths[ i ] - d;\r\n\t\t\t\tvar curve = this.curves[ i ];\r\n\r\n\t\t\t\tvar u = 1 - diff / curve.getLength();\r\n\r\n\t\t\t\treturn curve.getPointAt( u );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ti ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t\t// loop where sum != 0, sum > d , sum+1 <d\r\n\r\n\t},\r\n\r\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n\t// getPoint() depends on getLength\r\n\r\n\tgetLength: function () {\r\n\r\n\t\tvar lens = this.getCurveLengths();\r\n\t\treturn lens[ lens.length - 1 ];\r\n\r\n\t},\r\n\r\n\t// Compute lengths and cache them\r\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\r\n\tgetCurveLengths: function () {\r\n\r\n\t\t// We use cache values if curves and cache array are same length\r\n\r\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\r\n\r\n\t\t\treturn this.cacheLengths;\r\n\r\n\t\t}\r\n\r\n\t\t// Get length of sub-curve\r\n\t\t// Push sums into cached array\r\n\r\n\t\tvar lengths = [], sums = 0;\r\n\r\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\tsums += this.curves[ i ].getLength();\r\n\t\t\tlengths.push( sums );\r\n\r\n\t\t}\r\n\r\n\t\tthis.cacheLengths = lengths;\r\n\r\n\t\treturn lengths;\r\n\r\n\t},\r\n\r\n\t/**************************************************************\r\n\t *\tCreate Geometries Helpers\r\n\t **************************************************************/\r\n\r\n\t/// Generate geometry from path points (for Line or Points objects)\r\n\r\n\tcreatePointsGeometry: function ( divisions ) {\r\n\r\n\t\tvar pts = this.getPoints( divisions );\r\n\t\treturn this.createGeometry( pts );\r\n\r\n\t},\r\n\r\n\t// Generate geometry from equidistant sampling along the path\r\n\r\n\tcreateSpacedPointsGeometry: function ( divisions ) {\r\n\r\n\t\tvar pts = this.getSpacedPoints( divisions );\r\n\t\treturn this.createGeometry( pts );\r\n\r\n\t},\r\n\r\n\tcreateGeometry: function ( points ) {\r\n\r\n\t\tvar geometry = new THREE.Geometry();\r\n\r\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = points[ i ];\r\n\t\t\tgeometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/extras/core/Font.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Font = function ( data ) {\r\n\r\n\tthis.data = data;\r\n\r\n};\r\n\r\nObject.assign( THREE.Font.prototype, {\r\n\r\n\tgenerateShapes: function ( text, size, divisions ) {\r\n\r\n\t\tfunction createPaths( text ) {\r\n\r\n\t\t\tvar chars = String( text ).split( '' );\r\n\t\t\tvar scale = size / data.resolution;\r\n\t\t\tvar offset = 0;\r\n\r\n\t\t\tvar paths = [];\r\n\r\n\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\r\n\r\n\t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\r\n\t\t\t\toffset += ret.offset;\r\n\r\n\t\t\t\tpaths.push( ret.path );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn paths;\r\n\r\n\t\t}\r\n\r\n\t\tfunction createPath( c, scale, offset ) {\r\n\r\n\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\r\n\r\n\t\t\tif ( ! glyph ) return;\r\n\r\n\t\t\tvar path = new THREE.Path();\r\n\r\n\t\t\tvar pts = [], b2 = THREE.ShapeUtils.b2, b3 = THREE.ShapeUtils.b3;\r\n\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\r\n\r\n\t\t\tif ( glyph.o ) {\r\n\r\n\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\r\n\r\n\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\r\n\r\n\t\t\t\t\tvar action = outline[ i ++ ];\r\n\r\n\t\t\t\t\tswitch ( action ) {\r\n\r\n\t\t\t\t\t\tcase 'm': // moveTo\r\n\r\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\r\n\r\n\t\t\t\t\t\t\tpath.moveTo( x, y );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'l': // lineTo\r\n\r\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\r\n\r\n\t\t\t\t\t\t\tpath.lineTo( x, y );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'q': // quadraticCurveTo\r\n\r\n\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\r\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\r\n\r\n\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\r\n\r\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( laste ) {\r\n\r\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\r\n\t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\r\n\t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'b': // bezierCurveTo\r\n\r\n\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\r\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\r\n\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\r\n\r\n\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\r\n\r\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( laste ) {\r\n\r\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\r\n\t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn { offset: glyph.ha * scale, path: path };\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( size === undefined ) size = 100;\r\n\t\tif ( divisions === undefined ) divisions = 4;\r\n\r\n\t\tvar data = this.data;\r\n\r\n\t\tvar paths = createPaths( text );\r\n\t\tvar shapes = [];\r\n\r\n\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\r\n\r\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\r\n\r\n\t\t}\r\n\r\n\t\treturn shapes;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/extras/core/Path.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Creates free form 2d path using series of points, lines or curves.\r\n *\r\n **/\r\n\r\nTHREE.Path = function ( points ) {\r\n\r\n\tTHREE.CurvePath.call( this );\r\n\r\n\tthis.actions = [];\r\n\r\n\tif ( points ) {\r\n\r\n\t\tthis.fromPoints( points );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Path.prototype = Object.assign( Object.create( THREE.CurvePath.prototype ), {\r\n\r\n\tconstructor: THREE.Path,\r\n\r\n\t// TODO Clean up PATH API\r\n\r\n\t// Create path using straight lines to connect all points\r\n\t// - vectors: array of Vector2\r\n\r\n\tfromPoints: function ( vectors ) {\r\n\r\n\t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\r\n\r\n\t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tmoveTo: function ( x, y ) {\r\n\r\n\t\tthis.actions.push( { action: 'moveTo', args: [ x, y ] } );\r\n\r\n\t},\r\n\r\n\tlineTo: function ( x, y ) {\r\n\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\t\tvar curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.actions.push( { action: 'lineTo', args: [ x, y ] } );\r\n\r\n\t},\r\n\r\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\r\n\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\t\tvar curve = new THREE.QuadraticBezierCurve(\r\n\t\t\tnew THREE.Vector2( x0, y0 ),\r\n\t\t\tnew THREE.Vector2( aCPx, aCPy ),\r\n\t\t\tnew THREE.Vector2( aX, aY )\r\n\t\t);\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.actions.push( { action: 'quadraticCurveTo', args: [ aCPx, aCPy, aX, aY ] } );\r\n\r\n\t},\r\n\r\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\t\tvar curve = new THREE.CubicBezierCurve(\r\n\t\t\tnew THREE.Vector2( x0, y0 ),\r\n\t\t\tnew THREE.Vector2( aCP1x, aCP1y ),\r\n\t\t\tnew THREE.Vector2( aCP2x, aCP2y ),\r\n\t\t\tnew THREE.Vector2( aX, aY )\r\n\t\t);\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.actions.push( { action: 'bezierCurveTo', args: [ aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ] } );\r\n\r\n\t},\r\n\r\n\tsplineThru: function ( pts /*Array of Vector*/ ) {\r\n\r\n\t\tvar args = Array.prototype.slice.call( arguments );\r\n\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\t\tvar npts = [ new THREE.Vector2( x0, y0 ) ];\r\n\t\tArray.prototype.push.apply( npts, pts );\r\n\r\n\t\tvar curve = new THREE.SplineCurve( npts );\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.actions.push( { action: 'splineThru', args: args } );\r\n\r\n\t},\r\n\r\n\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\r\n\t\t\taStartAngle, aEndAngle, aClockwise );\r\n\r\n\t},\r\n\r\n\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\t},\r\n\r\n\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t},\r\n\r\n\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\tvar args = [\r\n\t\t\taX, aY,\r\n\t\t\txRadius, yRadius,\r\n\t\t\taStartAngle, aEndAngle,\r\n\t\t\taClockwise,\r\n\t\t\taRotation || 0 // aRotation is optional.\r\n\t\t];\r\n\r\n\t\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tvar lastPoint = curve.getPoint( 1 );\r\n\t\targs.push( lastPoint.x );\r\n\t\targs.push( lastPoint.y );\r\n\r\n\t\tthis.actions.push( { action: 'ellipse', args: args } );\r\n\r\n\t},\r\n\r\n\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\tif ( ! divisions ) divisions = 40;\r\n\r\n\t\tvar points = [];\r\n\r\n\t\tfor ( var i = 0; i < divisions; i ++ ) {\r\n\r\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\r\n\t\t\t//if ( !this.getPoint( i / divisions ) ) throw \"DIE\";\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.autoClose ) {\r\n\r\n\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn points;\r\n\r\n\t},\r\n\r\n\tgetPoints: function ( divisions ) {\r\n\r\n\t\tdivisions = divisions || 12;\r\n\r\n\t\tvar b2 = THREE.ShapeUtils.b2;\r\n\t\tvar b3 = THREE.ShapeUtils.b3;\r\n\r\n\t\tvar points = [];\r\n\r\n\t\tvar cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\r\n\t\t\tlaste, tx, ty;\r\n\r\n\t\tfor ( var i = 0, l = this.actions.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar item = this.actions[ i ];\r\n\r\n\t\t\tvar action = item.action;\r\n\t\t\tvar args = item.args;\r\n\r\n\t\t\tswitch ( action ) {\r\n\r\n\t\t\tcase 'moveTo':\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'lineTo':\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'quadraticCurveTo':\r\n\r\n\t\t\t\tcpx  = args[ 2 ];\r\n\t\t\t\tcpy  = args[ 3 ];\r\n\r\n\t\t\t\tcpx1 = args[ 0 ];\r\n\t\t\t\tcpy1 = args[ 1 ];\r\n\r\n\t\t\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\t\t\tlaste = points[ points.length - 1 ];\r\n\r\n\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\r\n\r\n\t\t\t\t\tvar t = j / divisions;\r\n\r\n\t\t\t\t\ttx = b2( t, cpx0, cpx1, cpx );\r\n\t\t\t\t\tty = b2( t, cpy0, cpy1, cpy );\r\n\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'bezierCurveTo':\r\n\r\n\t\t\t\tcpx  = args[ 4 ];\r\n\t\t\t\tcpy  = args[ 5 ];\r\n\r\n\t\t\t\tcpx1 = args[ 0 ];\r\n\t\t\t\tcpy1 = args[ 1 ];\r\n\r\n\t\t\t\tcpx2 = args[ 2 ];\r\n\t\t\t\tcpy2 = args[ 3 ];\r\n\r\n\t\t\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\t\t\tlaste = points[ points.length - 1 ];\r\n\r\n\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\r\n\r\n\t\t\t\t\tvar t = j / divisions;\r\n\r\n\t\t\t\t\ttx = b3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\t\tty = b3( t, cpy0, cpy1, cpy2, cpy );\r\n\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'splineThru':\r\n\r\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\tvar last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\r\n\t\t\t\tvar spts = [ last ];\r\n\r\n\t\t\t\tvar n = divisions * args[ 0 ].length;\r\n\r\n\t\t\t\tspts = spts.concat( args[ 0 ] );\r\n\r\n\t\t\t\tvar spline = new THREE.SplineCurve( spts );\r\n\r\n\t\t\t\tfor ( var j = 1; j <= n; j ++ ) {\r\n\r\n\t\t\t\t\tpoints.push( spline.getPointAt( j / n ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'arc':\r\n\r\n\t\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\t\taRadius = args[ 2 ],\r\n\t\t\t\t\taStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\r\n\t\t\t\t\taClockwise = !! args[ 5 ];\r\n\r\n\t\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\t\tvar angle;\r\n\t\t\t\tvar tdivisions = divisions * 2;\r\n\r\n\t\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\r\n\r\n\t\t\t\t\tvar t = j / tdivisions;\r\n\r\n\t\t\t\t\tif ( ! aClockwise ) {\r\n\r\n\t\t\t\t\t\tt = 1 - t;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\r\n\t\t\t\t\ttx = aX + aRadius * Math.cos( angle );\r\n\t\t\t\t\tty = aY + aRadius * Math.sin( angle );\r\n\r\n\t\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//console.log(points);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ellipse':\r\n\r\n\t\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\t\txRadius = args[ 2 ],\r\n\t\t\t\t\tyRadius = args[ 3 ],\r\n\t\t\t\t\taStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\r\n\t\t\t\t\taClockwise = !! args[ 6 ],\r\n\t\t\t\t\taRotation = args[ 7 ];\r\n\r\n\r\n\t\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\t\tvar angle;\r\n\t\t\t\tvar tdivisions = divisions * 2;\r\n\r\n\t\t\t\tvar cos, sin;\r\n\t\t\t\tif ( aRotation !== 0 ) {\r\n\r\n\t\t\t\t\tcos = Math.cos( aRotation );\r\n\t\t\t\t\tsin = Math.sin( aRotation );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\r\n\r\n\t\t\t\t\tvar t = j / tdivisions;\r\n\r\n\t\t\t\t\tif ( ! aClockwise ) {\r\n\r\n\t\t\t\t\t\tt = 1 - t;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\r\n\t\t\t\t\ttx = aX + xRadius * Math.cos( angle );\r\n\t\t\t\t\tty = aY + yRadius * Math.sin( angle );\r\n\r\n\t\t\t\t\tif ( aRotation !== 0 ) {\r\n\r\n\t\t\t\t\t\tvar x = tx, y = ty;\r\n\r\n\t\t\t\t\t\t// Rotate the point about the center of the ellipse.\r\n\t\t\t\t\t\ttx = ( x - aX ) * cos - ( y - aY ) * sin + aX;\r\n\t\t\t\t\t\tty = ( x - aX ) * sin + ( y - aY ) * cos + aY;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//console.log(points);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t} // end switch\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\t// Normalize to remove the closing point by default.\r\n\t\tvar lastPoint = points[ points.length - 1 ];\r\n\t\tif ( Math.abs( lastPoint.x - points[ 0 ].x ) < Number.EPSILON &&\r\n\t\t\t\t Math.abs( lastPoint.y - points[ 0 ].y ) < Number.EPSILON )\r\n\t\t\tpoints.splice( points.length - 1, 1 );\r\n\r\n\t\tif ( this.autoClose ) {\r\n\r\n\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn points;\r\n\r\n\t},\r\n\r\n\ttoShapes: function ( isCCW, noHoles ) {\r\n\r\n\t\tfunction extractSubpaths( inActions ) {\r\n\r\n\t\t\tvar subPaths = [], lastPath = new THREE.Path();\r\n\r\n\t\t\tfor ( var i = 0, l = inActions.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar item = inActions[ i ];\r\n\r\n\t\t\t\tvar args = item.args;\r\n\t\t\t\tvar action = item.action;\r\n\r\n\t\t\t\tif ( action === 'moveTo' ) {\r\n\r\n\t\t\t\t\tif ( lastPath.actions.length !== 0 ) {\r\n\r\n\t\t\t\t\t\tsubPaths.push( lastPath );\r\n\t\t\t\t\t\tlastPath = new THREE.Path();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlastPath[ action ].apply( lastPath, args );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( lastPath.actions.length !== 0 ) {\r\n\r\n\t\t\t\tsubPaths.push( lastPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// console.log(subPaths);\r\n\r\n\t\t\treturn\tsubPaths;\r\n\r\n\t\t}\r\n\r\n\t\tfunction toShapesNoHoles( inSubpaths ) {\r\n\r\n\t\t\tvar shapes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar tmpPath = inSubpaths[ i ];\r\n\r\n\t\t\t\tvar tmpShape = new THREE.Shape();\r\n\t\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\t\tshapes.push( tmpShape );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(\"shape\", shapes);\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t}\r\n\r\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\r\n\r\n\t\t\tvar polyLen = inPolygon.length;\r\n\r\n\t\t\t// inPt on polygon contour => immediate success    or\r\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\r\n\t\t\t//  with the horizontal line through inPt, left of inPt\r\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\r\n\t\t\tvar inside = false;\r\n\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\r\n\r\n\t\t\t\tvar edgeLowPt  = inPolygon[ p ];\r\n\t\t\t\tvar edgeHighPt = inPolygon[ q ];\r\n\r\n\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\r\n\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\r\n\r\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t// not parallel\r\n\t\t\t\t\tif ( edgeDy < 0 ) {\r\n\r\n\t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\r\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\r\n\r\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\r\n\r\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\r\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\r\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// parallel or collinear\r\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\r\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\r\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\r\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\r\n\t\t\t\t\t// continue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn\tinside;\r\n\r\n\t\t}\r\n\r\n\t\tvar isClockWise = THREE.ShapeUtils.isClockWise;\r\n\r\n\t\tvar subPaths = extractSubpaths( this.actions );\r\n\t\tif ( subPaths.length === 0 ) return [];\r\n\r\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\r\n\r\n\r\n\t\tvar solid, tmpPath, tmpShape, shapes = [];\r\n\r\n\t\tif ( subPaths.length === 1 ) {\r\n\r\n\t\t\ttmpPath = subPaths[ 0 ];\r\n\t\t\ttmpShape = new THREE.Shape();\r\n\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\ttmpShape.curves = tmpPath.curves;\r\n\t\t\tshapes.push( tmpShape );\r\n\t\t\treturn shapes;\r\n\r\n\t\t}\r\n\r\n\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\r\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\r\n\r\n\t\t// console.log(\"Holes first\", holesFirst);\r\n\r\n\t\tvar betterShapeHoles = [];\r\n\t\tvar newShapes = [];\r\n\t\tvar newShapeHoles = [];\r\n\t\tvar mainIdx = 0;\r\n\t\tvar tmpPoints;\r\n\r\n\t\tnewShapes[ mainIdx ] = undefined;\r\n\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\r\n\r\n\t\t\ttmpPath = subPaths[ i ];\r\n\t\t\ttmpPoints = tmpPath.getPoints();\r\n\t\t\tsolid = isClockWise( tmpPoints );\r\n\t\t\tsolid = isCCW ? ! solid : solid;\r\n\r\n\t\t\tif ( solid ) {\r\n\r\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\r\n\r\n\t\t\t\tnewShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };\r\n\t\t\t\tnewShapes[ mainIdx ].s.actions = tmpPath.actions;\r\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\r\n\r\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\r\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\t\t\t//console.log('cw', i);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\r\n\r\n\t\t\t\t//console.log('ccw', i);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// only Holes? -> probably all Shapes with wrong orientation\r\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\r\n\r\n\r\n\t\tif ( newShapes.length > 1 ) {\r\n\r\n\t\t\tvar ambiguous = false;\r\n\t\t\tvar toChange = [];\r\n\r\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\t\tvar sho = newShapeHoles[ sIdx ];\r\n\r\n\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\r\n\r\n\t\t\t\t\tvar ho = sho[ hIdx ];\r\n\t\t\t\t\tvar hole_unassigned = true;\r\n\r\n\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\r\n\r\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\r\n\r\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\r\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\t\t\thole_unassigned = false;\r\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tambiguous = true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\t// console.log(\"ambiguous: \", ambiguous);\r\n\t\t\tif ( toChange.length > 0 ) {\r\n\r\n\t\t\t\t// console.log(\"to change: \", toChange);\r\n\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar tmpHoles;\r\n\r\n\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\r\n\r\n\t\t\ttmpShape = newShapes[ i ].s;\r\n\t\t\tshapes.push( tmpShape );\r\n\t\t\ttmpHoles = newShapeHoles[ i ];\r\n\r\n\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//console.log(\"shape\", shapes);\r\n\r\n\t\treturn shapes;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/extras/core/Shape.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Defines a 2d shape plane using paths.\r\n **/\r\n\r\n// STEP 1 Create a path.\r\n// STEP 2 Turn path into shape.\r\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\r\n// STEP 3a - Extract points from each shape, turn to vertices\r\n// STEP 3b - Triangulate each shape, add faces.\r\n\r\nTHREE.Shape = function () {\r\n\r\n\tTHREE.Path.apply( this, arguments );\r\n\r\n\tthis.holes = [];\r\n\r\n};\r\n\r\nTHREE.Shape.prototype = Object.assign( Object.create( THREE.Path.prototype ), {\r\n\r\n\tconstructor: THREE.Shape,\r\n\r\n\t// Convenience method to return ExtrudeGeometry\r\n\r\n\textrude: function ( options ) {\r\n\r\n\t\treturn new THREE.ExtrudeGeometry( this, options );\r\n\r\n\t},\r\n\r\n\t// Convenience method to return ShapeGeometry\r\n\r\n\tmakeGeometry: function ( options ) {\r\n\r\n\t\treturn new THREE.ShapeGeometry( this, options );\r\n\r\n\t},\r\n\r\n\tgetPointsHoles: function ( divisions ) {\r\n\r\n\t\tvar holesPts = [];\r\n\r\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\r\n\r\n\t\t}\r\n\r\n\t\treturn holesPts;\r\n\r\n\t},\r\n\r\n\t// Get points of shape and holes (keypoints based on segments parameter)\r\n\r\n\textractAllPoints: function ( divisions ) {\r\n\r\n\t\treturn {\r\n\r\n\t\t\tshape: this.getPoints( divisions ),\r\n\t\t\tholes: this.getPointsHoles( divisions )\r\n\r\n\t\t};\r\n\r\n\t},\r\n\r\n\textractPoints: function ( divisions ) {\r\n\r\n\t\treturn this.extractAllPoints( divisions );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/extras/curves/LineCurve.js\r\n\r\n/**************************************************************\r\n *\tLine\r\n **************************************************************/\r\n\r\nTHREE.LineCurve = function ( v1, v2 ) {\r\n\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\r\n};\r\n\r\nTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.LineCurve.prototype.constructor = THREE.LineCurve;\r\n\r\nTHREE.LineCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar point = this.v2.clone().sub( this.v1 );\r\n\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\n// Line curve is linear, so we can overwrite default getPointAt\r\n\r\nTHREE.LineCurve.prototype.getPointAt = function ( u ) {\r\n\r\n\treturn this.getPoint( u );\r\n\r\n};\r\n\r\nTHREE.LineCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangent = this.v2.clone().sub( this.v1 );\r\n\r\n\treturn tangent.normalize();\r\n\r\n};\r\n\r\n// File:src/extras/curves/QuadraticBezierCurve.js\r\n\r\n/**************************************************************\r\n *\tQuadratic Bezier curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\r\n\r\n\tthis.v0 = v0;\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\r\n};\r\n\r\nTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\r\n\r\n\r\nTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar b2 = THREE.ShapeUtils.b2;\r\n\r\n\treturn new THREE.Vector2(\r\n\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\r\n\t);\r\n\r\n};\r\n\r\n\r\nTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\r\n\r\n\treturn new THREE.Vector2(\r\n\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\r\n\t).normalize();\r\n\r\n};\r\n\r\n// File:src/extras/curves/CubicBezierCurve.js\r\n\r\n/**************************************************************\r\n *\tCubic Bezier curve\r\n **************************************************************/\r\n\r\nTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\r\n\r\n\tthis.v0 = v0;\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\tthis.v3 = v3;\r\n\r\n};\r\n\r\nTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\r\n\r\nTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar b3 = THREE.ShapeUtils.b3;\r\n\r\n\treturn new THREE.Vector2( \r\n\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\r\n\t);\r\n\r\n};\r\n\r\nTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\r\n\r\n\treturn new THREE.Vector2( \r\n\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\r\n\t).normalize();\r\n\r\n};\r\n\r\n// File:src/extras/curves/SplineCurve.js\r\n\r\n/**************************************************************\r\n *\tSpline curve\r\n **************************************************************/\r\n\r\nTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\r\n\r\n\tthis.points = ( points == undefined ) ? [] : points;\r\n\r\n};\r\n\r\nTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\r\n\r\nTHREE.SplineCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar points = this.points;\r\n\tvar point = ( points.length - 1 ) * t;\r\n\r\n\tvar intPoint = Math.floor( point );\r\n\tvar weight = point - intPoint;\r\n\r\n\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\r\n\tvar point1 = points[ intPoint ];\r\n\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\tvar interpolate = THREE.CurveUtils.interpolate;\r\n\r\n\treturn new THREE.Vector2(\r\n\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\r\n\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/curves/EllipseCurve.js\r\n\r\n/**************************************************************\r\n *\tEllipse curve\r\n **************************************************************/\r\n\r\nTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\tthis.aX = aX;\r\n\tthis.aY = aY;\r\n\r\n\tthis.xRadius = xRadius;\r\n\tthis.yRadius = yRadius;\r\n\r\n\tthis.aStartAngle = aStartAngle;\r\n\tthis.aEndAngle = aEndAngle;\r\n\r\n\tthis.aClockwise = aClockwise;\r\n\t\r\n\tthis.aRotation = aRotation || 0;\r\n\r\n};\r\n\r\nTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\r\n\r\nTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\r\n\tif ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;\r\n\tif ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;\r\n\r\n\tvar angle;\r\n\r\n\tif ( this.aClockwise === true ) {\r\n\r\n\t\tangle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );\r\n\r\n\t} else {\r\n\r\n\t\tangle = this.aStartAngle + t * deltaAngle;\r\n\r\n\t}\r\n\t\r\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\r\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\r\n\r\n\tif ( this.aRotation !== 0 ) {\r\n\r\n\t\tvar cos = Math.cos( this.aRotation );\r\n\t\tvar sin = Math.sin( this.aRotation );\r\n\r\n\t\tvar tx = x, ty = y;\r\n\r\n\t\t// Rotate the point about the center of the ellipse.\r\n\t\tx = ( tx - this.aX ) * cos - ( ty - this.aY ) * sin + this.aX;\r\n\t\ty = ( tx - this.aX ) * sin + ( ty - this.aY ) * cos + this.aY;\r\n\r\n\t}\r\n\r\n\treturn new THREE.Vector2( x, y );\r\n\r\n};\r\n\r\n// File:src/extras/curves/ArcCurve.js\r\n\r\n/**************************************************************\r\n *\tArc curve\r\n **************************************************************/\r\n\r\nTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n};\r\n\r\nTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\r\nTHREE.ArcCurve.prototype.constructor = THREE.ArcCurve;\r\n\r\n// File:src/extras/curves/LineCurve3.js\r\n\r\n/**************************************************************\r\n *\tLine3D\r\n **************************************************************/\r\n\r\nTHREE.LineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v1, v2 ) {\r\n\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar vector = new THREE.Vector3();\r\n\r\n\t\tvector.subVectors( this.v2, this.v1 ); // diff\r\n\t\tvector.multiplyScalar( t );\r\n\t\tvector.add( this.v1 );\r\n\r\n\t\treturn vector;\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/QuadraticBezierCurve3.js\r\n\r\n/**************************************************************\r\n *\tQuadratic Bezier 3D curve\r\n **************************************************************/\r\n\r\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v0, v1, v2 ) {\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar b2 = THREE.ShapeUtils.b2;\t\t\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\r\n\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\r\n\t\t);\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/CubicBezierCurve3.js\r\n\r\n/**************************************************************\r\n *\tCubic Bezier 3D curve\r\n **************************************************************/\r\n\r\nTHREE.CubicBezierCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v0, v1, v2, v3 ) {\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\tthis.v3 = v3;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar b3 = THREE.ShapeUtils.b3;\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\r\n\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\r\n\t\t);\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/SplineCurve3.js\r\n\r\n/**************************************************************\r\n *\tSpline 3D curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.SplineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( points /* array of Vector3 */ ) {\r\n\r\n\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\r\n\t\tthis.points = ( points == undefined ) ? [] : points;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar points = this.points;\r\n\t\tvar point = ( points.length - 1 ) * t;\r\n\r\n\t\tvar intPoint = Math.floor( point );\r\n\t\tvar weight = point - intPoint;\r\n\r\n\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\r\n\t\tvar point1 = points[ intPoint ];\r\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\r\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\r\n\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\r\n\t\t);\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/CatmullRomCurve3.js\r\n\r\n/**\r\n * @author zz85 https://github.com/zz85\r\n *\r\n * Centripetal CatmullRom Curve - which is useful for avoiding\r\n * cusps and self-intersections in non-uniform catmull rom curves.\r\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n *\r\n * curve.type accepts centripetal(default), chordal and catmullrom\r\n * curve.tension is used for catmullrom which defaults to 0.5\r\n */\r\n\r\nTHREE.CatmullRomCurve3 = ( function() {\r\n\r\n\tvar\r\n\t\ttmp = new THREE.Vector3(),\r\n\t\tpx = new CubicPoly(),\r\n\t\tpy = new CubicPoly(),\r\n\t\tpz = new CubicPoly();\r\n\r\n\t/*\r\n\tBased on an optimized c++ solution in\r\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n\t - http://ideone.com/NoEbVM\r\n\r\n\tThis CubicPoly class could be used for reusing some variables and calculations,\r\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\n\twhich can be placed in CurveUtils.\r\n\t*/\r\n\r\n\tfunction CubicPoly() {\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Compute coefficients for a cubic polynomial\r\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n\t * such that\r\n\t *   p(0) = x0, p(1) = x1\r\n\t *  and\r\n\t *   p'(0) = t0, p'(1) = t1.\r\n\t */\r\n\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\r\n\r\n\t\tthis.c0 = x0;\r\n\t\tthis.c1 = t0;\r\n\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n\r\n\t};\r\n\r\n\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\r\n\r\n\t\t// compute tangents when parameterized in [t1,t2]\r\n\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\r\n\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\r\n\r\n\t\t// rescale tangents for parametrization in [0,1]\r\n\t\tt1 *= dt1;\r\n\t\tt2 *= dt1;\r\n\r\n\t\t// initCubicPoly\r\n\t\tthis.init( x1, x2, t1, t2 );\r\n\r\n\t};\r\n\r\n\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\r\n\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\r\n\r\n\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\r\n\r\n\t};\r\n\r\n\tCubicPoly.prototype.calc = function( t ) {\r\n\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t2 * t;\r\n\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\r\n\r\n\t};\r\n\r\n\t// Subclass Three.js curve\r\n\treturn THREE.Curve.create(\r\n\r\n\t\tfunction ( p /* array of Vector3 */ ) {\r\n\r\n\t\t\tthis.points = p || [];\r\n\t\t\tthis.closed = false;\r\n\r\n\t\t},\r\n\r\n\t\tfunction ( t ) {\r\n\r\n\t\t\tvar points = this.points,\r\n\t\t\t\tpoint, intPoint, weight, l;\r\n\r\n\t\t\tl = points.length;\r\n\r\n\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\r\n\r\n\t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\r\n\t\t\tintPoint = Math.floor( point );\r\n\t\t\tweight = point - intPoint;\r\n\r\n\t\t\tif ( this.closed ) {\r\n\r\n\t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\r\n\r\n\t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\r\n\r\n\t\t\t\tintPoint = l - 2;\r\n\t\t\t\tweight = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar p0, p1, p2, p3; // 4 points\r\n\r\n\t\t\tif ( this.closed || intPoint > 0 ) {\r\n\r\n\t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// extrapolate first point\r\n\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\r\n\t\t\t\tp0 = tmp;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp1 = points[ intPoint % l ];\r\n\t\t\tp2 = points[ ( intPoint + 1 ) % l ];\r\n\r\n\t\t\tif ( this.closed || intPoint + 2 < l ) {\r\n\r\n\t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// extrapolate last point\r\n\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\r\n\t\t\t\tp3 = tmp;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\r\n\r\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\r\n\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\r\n\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\r\n\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\r\n\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\r\n\r\n\t\t\t\t// safety check for repeated points\r\n\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\r\n\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\r\n\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\r\n\r\n\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\r\n\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\r\n\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\r\n\r\n\t\t\t} else if ( this.type === 'catmullrom' ) {\r\n\r\n\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\r\n\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\r\n\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\r\n\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar v = new THREE.Vector3(\r\n\t\t\t\tpx.calc( weight ),\r\n\t\t\t\tpy.calc( weight ),\r\n\t\t\t\tpz.calc( weight )\r\n\t\t\t);\r\n\r\n\t\t\treturn v;\r\n\r\n\t\t}\r\n\r\n\t);\r\n\r\n} )();\r\n\r\n// File:src/extras/curves/ClosedSplineCurve3.js\r\n\r\n/**************************************************************\r\n *\tClosed Spline 3D curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.ClosedSplineCurve3 = function ( points ) {\r\n\r\n\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\r\n\r\n\tTHREE.CatmullRomCurve3.call( this, points );\r\n\tthis.type = 'catmullrom';\r\n\tthis.closed = true;\r\n\r\n};\r\n\r\nTHREE.ClosedSplineCurve3.prototype = Object.create( THREE.CatmullRomCurve3.prototype );\r\n\r\n// File:src/extras/geometries/BoxGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\r\n */\r\n\r\nTHREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'BoxGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\tdepth: depth,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tdepthSegments: depthSegments\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\r\n\r\nTHREE.CubeGeometry = THREE.BoxGeometry;\r\n\r\n// File:src/extras/geometries/BoxBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\nTHREE.BoxBufferGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'BoxBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\tdepth: depth,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tdepthSegments: depthSegments\r\n\t};\r\n\r\n\tvar scope = this;\r\n\r\n\t// segments\r\n\twidthSegments = Math.floor( widthSegments ) || 1;\r\n\theightSegments = Math.floor( heightSegments ) || 1;\r\n\tdepthSegments = Math.floor( depthSegments ) || 1;\r\n\r\n\t// these are used to calculate buffer length\r\n\tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\r\n\tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\r\n\r\n\t// buffers\r\n\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\r\n\tvar vertices = new Float32Array( vertexCount * 3 );\r\n\tvar normals = new Float32Array( vertexCount * 3 );\r\n\tvar uvs = new Float32Array( vertexCount * 2 );\r\n\r\n\t// offset variables\r\n\tvar vertexBufferOffset = 0;\r\n\tvar uvBufferOffset = 0;\r\n\tvar indexBufferOffset = 0;\r\n\tvar numberOfVertices = 0;\r\n\r\n\t// group variables\r\n\tvar groupStart = 0;\r\n\r\n\t// build each side of the box geometry\r\n\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\r\n\tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\r\n\tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\r\n\tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\r\n\tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\r\n\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\r\n\r\n\t// build geometry\r\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n\t// helper functions\r\n\r\n\tfunction calculateVertexCount ( w, h, d ) {\r\n\r\n\t\tvar vertices = 0;\r\n\r\n\t\t// calculate the amount of vertices for each side (plane)\r\n\t\tvertices += (w + 1) * (h + 1) * 2; // xy\r\n\t\tvertices += (w + 1) * (d + 1) * 2; // xz\r\n\t\tvertices += (d + 1) * (h + 1) * 2; // zy\r\n\r\n\t\treturn vertices;\r\n\r\n\t}\r\n\r\n\tfunction calculateIndexCount ( w, h, d ) {\r\n\r\n\t\tvar index = 0;\r\n\r\n\t\t// calculate the amount of squares for each side\r\n\t\tindex += w * h * 2; // xy\r\n\t\tindex += w * d * 2; // xz\r\n\t\tindex += d * h * 2; // zy\r\n\r\n\t\treturn index * 6; // two triangles per square => six vertices per square\r\n\r\n\t}\r\n\r\n\tfunction buildPlane ( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\r\n\r\n\t\tvar segmentWidth\t= width / gridX;\r\n\t\tvar segmentHeight = height / gridY;\r\n\r\n\t\tvar widthHalf = width / 2;\r\n\t\tvar heightHalf = height / 2;\r\n\t\tvar depthHalf = depth / 2;\r\n\r\n\t\tvar gridX1 = gridX + 1;\r\n\t\tvar gridY1 = gridY + 1;\r\n\r\n\t\tvar vertexCounter = 0;\r\n\t\tvar groupCount = 0;\r\n\r\n\t\tvar vector = new THREE.Vector3();\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\tvar y = iy * segmentHeight - heightHalf;\r\n\r\n\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\tvar x = ix * segmentWidth - widthHalf;\r\n\r\n\t\t\t\t// set values to correct vector component\r\n\t\t\t\tvector[ u ] = x * udir;\r\n\t\t\t\tvector[ v ] = y * vdir;\r\n\t\t\t\tvector[ w ] = depthHalf;\r\n\r\n\t\t\t\t// now apply vector to vertex buffer\r\n\t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\r\n\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\r\n\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\r\n\r\n\t\t\t\t// set values to correct vector component\r\n\t\t\t\tvector[ u ] = 0;\r\n\t\t\t\tvector[ v ] = 0;\r\n\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\r\n\r\n\t\t\t\t// now apply vector to normal buffer\r\n\t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\r\n\t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\r\n\t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\r\n\r\n\t\t\t\t// uvs\r\n\t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\r\n\t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\r\n\r\n\t\t\t\t// update offsets and counters\r\n\t\t\t\tvertexBufferOffset += 3;\r\n\t\t\t\tuvBufferOffset += 2;\r\n\t\t\t\tvertexCounter += 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// 1. you need three indices to draw a single face\r\n\t\t// 2. a single segment consists of two faces\r\n\t\t// 3. so we need to generate six (2*3) indices per segment\r\n\r\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\t// indices\r\n\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\r\n\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\t// face one\r\n\t\t\t\tindices[ indexBufferOffset ] = a;\r\n\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\r\n\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\r\n\r\n\t\t\t\t// face two\r\n\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\r\n\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\r\n\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\r\n\r\n\t\t\t\t// update offsets and counters\r\n\t\t\t\tindexBufferOffset += 6;\r\n\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// add a group to the geometry. this will ensure multi material support\r\n\t\tscope.addGroup( groupStart, groupCount, materialIndex );\r\n\r\n\t\t// calculate new start value for groups\r\n\t\tgroupStart += groupCount;\r\n\r\n\t\t// update total number of vertices\r\n\t\tnumberOfVertices += vertexCounter;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.BoxBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.BoxBufferGeometry.prototype.constructor = THREE.BoxBufferGeometry;\r\n\r\n// File:src/extras/geometries/CircleGeometry.js\r\n\r\n/**\r\n * @author hughes\r\n */\r\n\r\nTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'CircleGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tsegments: segments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\r\n\r\n};\r\n\r\nTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;\r\n\r\n// File:src/extras/geometries/CircleBufferGeometry.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'CircleBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tsegments: segments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tradius = radius || 50;\r\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\tvar vertices = segments + 2;\r\n\r\n\tvar positions = new Float32Array( vertices * 3 );\r\n\tvar normals = new Float32Array( vertices * 3 );\r\n\tvar uvs = new Float32Array( vertices * 2 );\r\n\r\n\t// center data is already zero, but need to set a few extras\r\n\tnormals[ 2 ] = 1.0;\r\n\tuvs[ 0 ] = 0.5;\r\n\tuvs[ 1 ] = 0.5;\r\n\r\n\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\r\n\r\n\t\tvar segment = thetaStart + s / segments * thetaLength;\r\n\r\n\t\tpositions[ i ] = radius * Math.cos( segment );\r\n\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\r\n\r\n\t\tnormals[ i + 2 ] = 1; // normal z\r\n\r\n\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\r\n\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\r\n\r\n\t}\r\n\r\n\tvar indices = [];\r\n\r\n\tfor ( var i = 1; i <= segments; i ++ ) {\r\n\r\n\t\tindices.push( i, i + 1, 0 );\r\n\r\n\t}\r\n\r\n\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\r\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;\r\n\r\n// File:src/extras/geometries/CylinderBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\nTHREE.CylinderBufferGeometry = function( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'CylinderBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradiusTop: radiusTop,\r\n\t\tradiusBottom: radiusBottom,\r\n\t\theight: height,\r\n\t\tradialSegments: radialSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\topenEnded: openEnded,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tvar scope = this;\r\n\r\n\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\r\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\r\n\theight = height !== undefined ? height : 100;\r\n\r\n\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\theightSegments = Math.floor( heightSegments ) || 1;\r\n\r\n\topenEnded = openEnded !== undefined ? openEnded : false;\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\r\n\r\n\t// used to calculate buffer length\r\n\r\n\tvar nbCap = 0;\r\n\r\n\tif ( openEnded === false ) {\r\n\r\n\t\tif ( radiusTop > 0 ) nbCap ++;\r\n\t\tif ( radiusBottom > 0 ) nbCap ++;\r\n\r\n\t}\r\n\r\n\tvar vertexCount = calculateVertexCount();\r\n\tvar indexCount = calculateIndexCount();\r\n\r\n\t// buffers\r\n\r\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\r\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\t// helper variables\r\n\r\n\tvar index = 0,\r\n\t    indexOffset = 0,\r\n\t    indexArray = [],\r\n\t    halfHeight = height / 2;\r\n\r\n\t// group variables\r\n\tvar groupStart = 0;\r\n\r\n\t// generate geometry\r\n\r\n\tgenerateTorso();\r\n\r\n\tif ( openEnded === false ) {\r\n\r\n\t\tif ( radiusTop > 0 ) generateCap( true );\r\n\t\tif ( radiusBottom > 0 ) generateCap( false );\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\r\n\tthis.setIndex( indices );\r\n\tthis.addAttribute( 'position', vertices );\r\n\tthis.addAttribute( 'normal', normals );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n\t// helper functions\r\n\r\n\tfunction calculateVertexCount() {\r\n\r\n\t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\r\n\r\n\t\tif ( openEnded === false ) {\r\n\r\n\t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\r\n\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\r\n\t}\r\n\r\n\tfunction calculateIndexCount() {\r\n\r\n\t\tvar count = radialSegments * heightSegments * 2 * 3;\r\n\r\n\t\tif ( openEnded === false ) {\r\n\r\n\t\t\tcount += radialSegments * nbCap * 3;\r\n\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\r\n\t}\r\n\r\n\tfunction generateTorso() {\r\n\r\n\t\tvar x, y;\r\n\t\tvar normal = new THREE.Vector3();\r\n\t\tvar vertex = new THREE.Vector3();\r\n\r\n\t\tvar groupCount = 0;\r\n\r\n\t\t// this will be used to calculate the normal\r\n\t\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\r\n\r\n\t\t\tvar indexRow = [];\r\n\r\n\t\t\tvar v = y / heightSegments;\r\n\r\n\t\t\t// calculate the radius of the current row\r\n\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\r\n\r\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\tvar u = x / radialSegments;\r\n\r\n\t\t\t\t// vertex\r\n\t\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\r\n\t\t\t\tvertex.y = - v * height + halfHeight;\r\n\t\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\r\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\t\t\t\tnormal.copy( vertex );\r\n\r\n\t\t\t\t// handle special case if radiusTop/radiusBottom is zero\r\n\r\n\t\t\t\tif ( ( radiusTop === 0 && y === 0 ) || ( radiusBottom === 0 && y === heightSegments ) ) {\r\n\r\n\t\t\t\t\tnormal.x = Math.sin( u * thetaLength + thetaStart );\r\n\t\t\t\t\tnormal.z = Math.cos( u * thetaLength + thetaStart );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnormal.setY( Math.sqrt( normal.x * normal.x + normal.z * normal.z ) * tanTheta ).normalize();\r\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\t\t\t\tuvs.setXY( index, u, 1 - v );\r\n\r\n\t\t\t\t// save index of vertex in respective row\r\n\t\t\t\tindexRow.push( index );\r\n\r\n\t\t\t\t// increase index\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// now save vertices of the row in our index array\r\n\t\t\tindexArray.push( indexRow );\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\r\n\r\n\t\t\t\t// we use the index array to access the correct indices\r\n\t\t\t\tvar i1 = indexArray[ y ][ x ];\r\n\t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\r\n\t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\r\n\t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\r\n\r\n\t\t\t\t// face one\r\n\t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\r\n\r\n\t\t\t\t// face two\r\n\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\r\n\r\n\t\t\t\t// update counters\r\n\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// add a group to the geometry. this will ensure multi material support\r\n\t\tscope.addGroup( groupStart, groupCount, 0 );\r\n\r\n\t\t// calculate new start value for groups\r\n\t\tgroupStart += groupCount;\r\n\r\n\t}\r\n\r\n\tfunction generateCap( top ) {\r\n\r\n\t\tvar x, centerIndexStart, centerIndexEnd;\r\n\r\n\t\tvar uv = new THREE.Vector2();\r\n\t\tvar vertex = new THREE.Vector3();\r\n\r\n\t\tvar groupCount = 0;\r\n\r\n\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\r\n\t\tvar sign = ( top === true ) ? 1 : - 1;\r\n\r\n\t\t// save the index of the first center vertex\r\n\t\tcenterIndexStart = index;\r\n\r\n\t\t// first we generate the center vertex data of the cap.\r\n\t\t// because the geometry needs one set of uvs per face,\r\n\t\t// we must generate a center vertex per face/segment\r\n\r\n\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\r\n\r\n\t\t\t// normal\r\n\t\t\tnormals.setXYZ( index, 0, sign, 0 );\r\n\r\n\t\t\t// uv\r\n\t\t\tuv.x = 0.5;\r\n\t\t\tuv.y = 0.5;\r\n\r\n\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t\t// save the index of the last center vertex\r\n\t\tcenterIndexEnd = index;\r\n\r\n\t\t// now we generate the surrounding vertices, normals and uvs\r\n\r\n\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\tvar u = x / radialSegments;\r\n\t\t\tvar theta = u * thetaLength + thetaStart;\r\n\r\n\t\t\tvar cosTheta = Math.cos( theta );\r\n\t\t\tvar sinTheta = Math.sin( theta );\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertex.x = radius * sinTheta;\r\n\t\t\tvertex.y = halfHeight * sign;\r\n\t\t\tvertex.z = radius * cosTheta;\r\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// normal\r\n\t\t\tnormals.setXYZ( index, 0, sign, 0 );\r\n\r\n\t\t\t// uv\r\n\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\r\n\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\r\n\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\tvar c = centerIndexStart + x;\r\n\t\t\tvar i = centerIndexEnd + x;\r\n\r\n\t\t\tif ( top === true ) {\r\n\r\n\t\t\t\t// face top\r\n\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// face bottom\r\n\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update counters\r\n\t\t\tgroupCount += 3;\r\n\r\n\t\t}\r\n\r\n\t\t// add a group to the geometry. this will ensure multi material support\r\n\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\r\n\r\n\t\t// calculate new start value for groups\r\n\t\tgroupStart += groupCount;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.CylinderBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.CylinderBufferGeometry.prototype.constructor = THREE.CylinderBufferGeometry;\r\n\r\n// File:src/extras/geometries/CylinderGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'CylinderGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradiusTop: radiusTop,\r\n\t\tradiusBottom: radiusBottom,\r\n\t\theight: height,\r\n\t\tradialSegments: radialSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\topenEnded: openEnded,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;\r\n\r\n// File:src/extras/geometries/ConeBufferGeometry.js\r\n\r\n/*\r\n * @author: abelnation / http://github.com/abelnation\r\n */\r\n\r\nTHREE.ConeBufferGeometry = function (\r\n\tradius, height,\r\n\tradialSegments, heightSegments,\r\n\topenEnded, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.CylinderBufferGeometry.call( this,\r\n\t\t0, radius, height,\r\n\t\tradialSegments, heightSegments,\r\n\t\topenEnded, thetaStart, thetaLength );\r\n\r\n\tthis.type = 'ConeBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\theight: height,\r\n\t\tradialSegments: radialSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n};\r\n\r\nTHREE.ConeBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.ConeBufferGeometry.prototype.constructor = THREE.ConeBufferGeometry;\r\n\r\n// File:src/extras/geometries/ConeGeometry.js\r\n\r\n/**\r\n * @author abelnation / http://github.com/abelnation\r\n */\r\n\r\nTHREE.ConeGeometry = function (\r\n\tradius, height,\r\n\tradialSegments, heightSegments,\r\n\topenEnded, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.CylinderGeometry.call( this,\r\n\t\t0, radius, height,\r\n\t\tradialSegments, heightSegments,\r\n\t\topenEnded, thetaStart, thetaLength );\r\n\r\n\tthis.type = 'ConeGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\theight: height,\r\n\t\tradialSegments: radialSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\topenEnded: openEnded,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n};\r\n\r\nTHREE.ConeGeometry.prototype = Object.create( THREE.CylinderGeometry.prototype );\r\nTHREE.ConeGeometry.prototype.constructor = THREE.ConeGeometry;\r\n\r\n// File:src/extras/geometries/EdgesGeometry.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.EdgesGeometry = function ( geometry, thresholdAngle ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\r\n\r\n\tvar thresholdDot = Math.cos( THREE.Math.DEG2RAD * thresholdAngle );\r\n\r\n\tvar edge = [ 0, 0 ], hash = {};\r\n\r\n\tfunction sortFunction( a, b ) {\r\n\r\n\t\treturn a - b;\r\n\r\n\t}\r\n\r\n\tvar keys = [ 'a', 'b', 'c' ];\r\n\r\n\tvar geometry2;\r\n\r\n\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\tgeometry2 = new THREE.Geometry();\r\n\t\tgeometry2.fromBufferGeometry( geometry );\r\n\r\n\t} else {\r\n\r\n\t\tgeometry2 = geometry.clone();\r\n\r\n\t}\r\n\r\n\tgeometry2.mergeVertices();\r\n\tgeometry2.computeFaceNormals();\r\n\r\n\tvar vertices = geometry2.vertices;\r\n\tvar faces = geometry2.faces;\r\n\r\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\tvar face = faces[ i ];\r\n\r\n\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\tedge[ 0 ] = face[ keys[ j ] ];\r\n\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\tedge.sort( sortFunction );\r\n\r\n\t\t\tvar key = edge.toString();\r\n\r\n\t\t\tif ( hash[ key ] === undefined ) {\r\n\r\n\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\thash[ key ].face2 = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar coords = [];\r\n\r\n\tfor ( var key in hash ) {\r\n\r\n\t\tvar h = hash[ key ];\r\n\r\n\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\r\n\r\n\t\t\tvar vertex = vertices[ h.vert1 ];\r\n\t\t\tcoords.push( vertex.x );\r\n\t\t\tcoords.push( vertex.y );\r\n\t\t\tcoords.push( vertex.z );\r\n\r\n\t\t\tvertex = vertices[ h.vert2 ];\r\n\t\t\tcoords.push( vertex.x );\r\n\t\t\tcoords.push( vertex.y );\r\n\t\t\tcoords.push( vertex.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );\r\n\r\n};\r\n\r\nTHREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;\r\n\r\n// File:src/extras/geometries/ExtrudeGeometry.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n * Creates extruded geometry from a path shape.\r\n *\r\n * parameters = {\r\n *\r\n *  curveSegments: <int>, // number of points on the curves\r\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\r\n *  amount: <int>, // Depth to extrude the shape\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\r\n *  bevelSize: <float>, // how far from shape outline is bevel\r\n *  bevelSegments: <int>, // number of bevel layers\r\n *\r\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\r\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\r\n *\r\n *  uvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\r\n\r\nTHREE.ExtrudeGeometry = function ( shapes, options ) {\r\n\r\n\tif ( typeof( shapes ) === \"undefined\" ) {\r\n\r\n\t\tshapes = [];\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'ExtrudeGeometry';\r\n\r\n\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\r\n\r\n\tthis.addShapeList( shapes, options );\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n\t// can't really use automatic vertex normals\r\n\t// as then front and back sides get smoothed too\r\n\t// should do separate smoothing just for sides\r\n\r\n\t//this.computeVertexNormals();\r\n\r\n\t//console.log( \"took\", ( Date.now() - startTime ) );\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\r\n\r\nTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\r\n\tvar sl = shapes.length;\r\n\r\n\tfor ( var s = 0; s < sl; s ++ ) {\r\n\r\n\t\tvar shape = shapes[ s ];\r\n\t\tthis.addShape( shape, options );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\r\n\r\n\tvar amount = options.amount !== undefined ? options.amount : 100;\r\n\r\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\r\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\r\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\r\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\r\n\r\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\r\n\tvar steps = options.steps !== undefined ? options.steps : 1;\r\n\r\n\tvar extrudePath = options.extrudePath;\r\n\tvar extrudePts, extrudeByPath = false;\r\n\r\n\t// Use default WorldUVGenerator if no UV generators are specified.\r\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\r\n\r\n\tvar splineTube, binormal, normal, position2;\r\n\tif ( extrudePath ) {\r\n\r\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\r\n\t\textrudeByPath = true;\r\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\r\n\t\t// SETUP TNB variables\r\n\r\n\t\t// Reuse TNB from TubeGeomtry for now.\r\n\t\t// TODO1 - have a .isClosed in spline?\r\n\r\n\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );\r\n\r\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\r\n\t\tbinormal = new THREE.Vector3();\r\n\t\tnormal = new THREE.Vector3();\r\n\t\tposition2 = new THREE.Vector3();\r\n\r\n\t}\r\n\r\n\t// Safeguards if bevels are not enabled\r\n\r\n\tif ( ! bevelEnabled ) {\r\n\r\n\t\tbevelSegments = 0;\r\n\t\tbevelThickness = 0;\r\n\t\tbevelSize = 0;\r\n\r\n\t}\r\n\r\n\t// Variables initialization\r\n\r\n\tvar ahole, h, hl; // looping of holes\r\n\tvar scope = this;\r\n\r\n\tvar shapesOffset = this.vertices.length;\r\n\r\n\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\tvar vertices = shapePoints.shape;\r\n\tvar holes = shapePoints.holes;\r\n\r\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\r\n\r\n\tif ( reverse ) {\r\n\r\n\t\tvertices = vertices.reverse();\r\n\r\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\r\n\t\t\tif ( THREE.ShapeUtils.isClockWise( ahole ) ) {\r\n\r\n\t\t\t\tholes[ h ] = ahole.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\r\n\r\n\t}\r\n\r\n\r\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\r\n\r\n\t/* Vertices */\r\n\r\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\r\n\r\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\tahole = holes[ h ];\r\n\r\n\t\tvertices = vertices.concat( ahole );\r\n\r\n\t}\r\n\r\n\r\n\tfunction scalePt2 ( pt, vec, size ) {\r\n\r\n\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\r\n\r\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\r\n\r\n\t}\r\n\r\n\tvar b, bs, t, z,\r\n\t\tvert, vlen = vertices.length,\r\n\t\tface, flen = faces.length;\r\n\r\n\r\n\t// Find directions for point movement\r\n\r\n\r\n\tfunction getBevelVec( inPt, inPrev, inNext ) {\r\n\r\n\t\t// computes for inPt the corresponding point inPt' on a new contour\r\n\t\t//   shifted by 1 unit (length of normalized vector) to the left\r\n\t\t// if we walk along contour clockwise, this new contour is outside the old one\r\n\t\t//\r\n\t\t// inPt' is the intersection of the two lines parallel to the two\r\n\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\r\n\r\n\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\r\n\r\n\t\t// good reading for geometry algorithms (here: line-line intersection)\r\n\t\t// http://geomalgorithms.com/a05-_intersect-1.html\r\n\r\n\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\r\n\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\r\n\r\n\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\r\n\r\n\t\t// check for collinear edges\r\n\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\r\n\r\n\t\t\t// not collinear\r\n\r\n\t\t\t// length of vectors for normalizing\r\n\r\n\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\r\n\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\r\n\r\n\t\t\t// shift adjacent points by unit vectors to the left\r\n\r\n\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\r\n\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\r\n\r\n\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\r\n\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\r\n\r\n\t\t\t// scaling factor for v_prev to intersection point\r\n\r\n\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\r\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\r\n\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t// vector from inPt to intersection point\r\n\r\n\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\r\n\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\r\n\r\n\t\t\t// Don't normalize!, otherwise sharp corners become ugly\r\n\t\t\t//  but prevent crazy spikes\r\n\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\r\n\t\t\tif ( v_trans_lensq <= 2 ) {\r\n\r\n\t\t\t\treturn\tnew THREE.Vector2( v_trans_x, v_trans_y );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// handle special case of collinear edges\r\n\r\n\t\t\tvar direction_eq = false;\t\t// assumes: opposite\r\n\t\t\tif ( v_prev_x > Number.EPSILON ) {\r\n\r\n\t\t\t\tif ( v_next_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\r\n\r\n\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( direction_eq ) {\r\n\r\n\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\r\n\t\t\t\tv_trans_x = - v_prev_y;\r\n\t\t\t\tv_trans_y =  v_prev_x;\r\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\r\n\t\t\t\tv_trans_x = v_prev_x;\r\n\t\t\t\tv_trans_y = v_prev_y;\r\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn\tnew THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\r\n\r\n\t}\r\n\r\n\r\n\tvar contourMovements = [];\r\n\r\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\tif ( j === il ) j = 0;\r\n\t\tif ( k === il ) k = 0;\r\n\r\n\t\t//  (j)---(i)---(k)\r\n\t\t// console.log('i,j,k', i, j , k)\r\n\r\n\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\r\n\t}\r\n\r\n\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\r\n\r\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\tahole = holes[ h ];\r\n\r\n\t\toneHoleMovements = [];\r\n\r\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\tif ( j === il ) j = 0;\r\n\t\t\tif ( k === il ) k = 0;\r\n\r\n\t\t\t//  (j)---(i)---(k)\r\n\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\r\n\t\t}\r\n\r\n\t\tholesMovements.push( oneHoleMovements );\r\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\r\n\t}\r\n\r\n\r\n\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\r\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\r\n\r\n\t\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\r\n\t\tt = b / bevelSegments;\r\n\t\tz = bevelThickness * ( 1 - t );\r\n\r\n\t\t//z = bevelThickness * t;\r\n\t\tbs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved\r\n\t\t//bs = bevelSize * t; // linear\r\n\r\n\t\t// contract shape\r\n\r\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\r\n\t\t\tv( vert.x, vert.y,  - z );\r\n\r\n\t\t}\r\n\r\n\t\t// expand holes\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\tv( vert.x, vert.y,  - z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tbs = bevelSize;\r\n\r\n\t// Back facing vertices\r\n\r\n\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\tv( vert.x, vert.y, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\r\n\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\r\n\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\r\n\r\n\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Add stepped vertices...\r\n\t// Including front facing vertices\r\n\r\n\tvar s;\r\n\r\n\tfor ( s = 1; s <= steps; s ++ ) {\r\n\r\n\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\r\n\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\r\n\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Add bevel segments planes\r\n\r\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\r\n\r\n\t\tt = b / bevelSegments;\r\n\t\tz = bevelThickness * ( 1 - t );\r\n\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\r\n\t\tbs = bevelSize * Math.sin ( t * Math.PI / 2 );\r\n\r\n\t\t// contract shape\r\n\r\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\tv( vert.x, vert.y,  amount + z );\r\n\r\n\t\t}\r\n\r\n\t\t// expand holes\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y,  amount + z );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* Faces */\r\n\r\n\t// Top and bottom faces\r\n\r\n\tbuildLidFaces();\r\n\r\n\t// Sides faces\r\n\r\n\tbuildSideFaces();\r\n\r\n\r\n\t/////  Internal functions\r\n\r\n\tfunction buildLidFaces() {\r\n\r\n\t\tif ( bevelEnabled ) {\r\n\r\n\t\t\tvar layer = 0; // steps + 1\r\n\t\t\tvar offset = vlen * layer;\r\n\r\n\t\t\t// Bottom faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\toffset = vlen * layer;\r\n\r\n\t\t\t// Top faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Bottom faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Top faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Create faces for the z-sides of the shape\r\n\r\n\tfunction buildSideFaces() {\r\n\r\n\t\tvar layeroffset = 0;\r\n\t\tsidewalls( contour, layeroffset );\r\n\t\tlayeroffset += contour.length;\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\tsidewalls( ahole, layeroffset );\r\n\r\n\t\t\t//, true\r\n\t\t\tlayeroffset += ahole.length;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction sidewalls( contour, layeroffset ) {\r\n\r\n\t\tvar j, k;\r\n\t\ti = contour.length;\r\n\r\n\t\twhile ( -- i >= 0 ) {\r\n\r\n\t\t\tj = i;\r\n\t\t\tk = i - 1;\r\n\t\t\tif ( k < 0 ) k = contour.length - 1;\r\n\r\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\r\n\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\r\n\r\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\r\n\r\n\t\t\t\tvar slen1 = vlen * s;\r\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\r\n\r\n\t\t\t\tvar a = layeroffset + j + slen1,\r\n\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\td = layeroffset + j + slen2;\r\n\r\n\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tfunction v( x, y, z ) {\r\n\r\n\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\r\n\r\n\t}\r\n\r\n\tfunction f3( a, b, c ) {\r\n\r\n\t\ta += shapesOffset;\r\n\t\tb += shapesOffset;\r\n\t\tc += shapesOffset;\r\n\r\n\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );\r\n\r\n\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\r\n\r\n\t\tscope.faceVertexUvs[ 0 ].push( uvs );\r\n\r\n\t}\r\n\r\n\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\r\n\r\n\t\ta += shapesOffset;\r\n\t\tb += shapesOffset;\r\n\t\tc += shapesOffset;\r\n\t\td += shapesOffset;\r\n\r\n\t\tscope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );\r\n\t\tscope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );\r\n\r\n\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\r\n\r\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\r\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\r\n\r\n\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\r\n\r\n\t\tvar vertices = geometry.vertices;\r\n\r\n\t\tvar a = vertices[ indexA ];\r\n\t\tvar b = vertices[ indexB ];\r\n\t\tvar c = vertices[ indexC ];\r\n\r\n\t\treturn [\r\n\t\t\tnew THREE.Vector2( a.x, a.y ),\r\n\t\t\tnew THREE.Vector2( b.x, b.y ),\r\n\t\t\tnew THREE.Vector2( c.x, c.y )\r\n\t\t];\r\n\r\n\t},\r\n\r\n\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\r\n\r\n\t\tvar vertices = geometry.vertices;\r\n\r\n\t\tvar a = vertices[ indexA ];\r\n\t\tvar b = vertices[ indexB ];\r\n\t\tvar c = vertices[ indexC ];\r\n\t\tvar d = vertices[ indexD ];\r\n\r\n\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( a.x, 1 - a.z ),\r\n\t\t\t\tnew THREE.Vector2( b.x, 1 - b.z ),\r\n\t\t\t\tnew THREE.Vector2( c.x, 1 - c.z ),\r\n\t\t\t\tnew THREE.Vector2( d.x, 1 - d.z )\r\n\t\t\t];\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( a.y, 1 - a.z ),\r\n\t\t\t\tnew THREE.Vector2( b.y, 1 - b.z ),\r\n\t\t\t\tnew THREE.Vector2( c.y, 1 - c.z ),\r\n\t\t\t\tnew THREE.Vector2( d.y, 1 - d.z )\r\n\t\t\t];\r\n\r\n\t\t}\r\n\r\n\t}\r\n};\r\n\r\n// File:src/extras/geometries/ShapeGeometry.js\r\n\r\n/**\r\n * @author jonobr1 / http://jonobr1.com\r\n *\r\n * Creates a one-sided polygonal geometry from a path shape. Similar to\r\n * ExtrudeGeometry.\r\n *\r\n * parameters = {\r\n *\r\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\r\n *\r\n *\tmaterial: <int> // material index for front and back faces\r\n *\tuvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\r\n\r\nTHREE.ShapeGeometry = function ( shapes, options ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'ShapeGeometry';\r\n\r\n\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\r\n\r\n\tthis.addShapeList( shapes, options );\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n};\r\n\r\nTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\r\n\r\n/**\r\n * Add an array of shapes to THREE.ShapeGeometry.\r\n */\r\nTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\r\n\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\tthis.addShape( shapes[ i ], options );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n/**\r\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\r\n */\r\nTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\r\n\r\n\tif ( options === undefined ) options = {};\r\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\r\n\tvar material = options.material;\r\n\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\r\n\r\n\t//\r\n\r\n\tvar i, l, hole;\r\n\r\n\tvar shapesOffset = this.vertices.length;\r\n\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\tvar vertices = shapePoints.shape;\r\n\tvar holes = shapePoints.holes;\r\n\r\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\r\n\r\n\tif ( reverse ) {\r\n\r\n\t\tvertices = vertices.reverse();\r\n\r\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\r\n\r\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\r\n\r\n\t\t\thole = holes[ i ];\r\n\r\n\t\t\tif ( THREE.ShapeUtils.isClockWise( hole ) ) {\r\n\r\n\t\t\t\tholes[ i ] = hole.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treverse = false;\r\n\r\n\t}\r\n\r\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\r\n\r\n\t// Vertices\r\n\r\n\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\r\n\r\n\t\thole = holes[ i ];\r\n\t\tvertices = vertices.concat( hole );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar vert, vlen = vertices.length;\r\n\tvar face, flen = faces.length;\r\n\r\n\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\tvert = vertices[ i ];\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\r\n\r\n\t}\r\n\r\n\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\tface = faces[ i ];\r\n\r\n\t\tvar a = face[ 0 ] + shapesOffset;\r\n\t\tvar b = face[ 1 ] + shapesOffset;\r\n\t\tvar c = face[ 2 ] + shapesOffset;\r\n\r\n\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\r\n\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/geometries/LatheBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\n // points - to create a closed torus, one must use a set of points\r\n //    like so: [ a, b, c, d, a ], see first is the same as last.\r\n // segments - the number of circumference segments to create\r\n // phiStart - the starting radian\r\n // phiLength - the radian (0 to 2PI) range of the lathed section\r\n //    2PI is a closed lathe, less than 2PI is a portion.\r\n\r\nTHREE.LatheBufferGeometry = function ( points, segments, phiStart, phiLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'LatheBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tpoints: points,\r\n\t\tsegments: segments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength\r\n\t};\r\n\r\n\tsegments = Math.floor( segments ) || 12;\r\n\tphiStart = phiStart || 0;\r\n\tphiLength = phiLength || Math.PI * 2;\r\n\r\n\t// clamp phiLength so it's in range of [ 0, 2PI ]\r\n\tphiLength = THREE.Math.clamp( phiLength, 0, Math.PI * 2 );\r\n\r\n\t// these are used to calculate buffer length\r\n\tvar vertexCount = ( segments + 1 ) * points.length;\r\n\tvar indexCount = segments * points.length * 2 * 3;\r\n\r\n\t// buffers\r\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\r\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\t// helper variables\r\n\tvar index = 0, indexOffset = 0, base;\r\n\tvar inversePointLength = 1.0 / ( points.length - 1 );\r\n\tvar inverseSegments = 1.0 / segments;\r\n\tvar vertex = new THREE.Vector3();\r\n\tvar uv = new THREE.Vector2();\r\n\tvar i, j;\r\n\r\n\t// generate vertices and uvs\r\n\r\n\tfor ( i = 0; i <= segments; i ++ ) {\r\n\r\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\r\n\r\n\t\tvar sin = Math.sin( phi );\r\n\t\tvar cos = Math.cos( phi );\r\n\r\n\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertex.x = points[ j ].x * sin;\r\n\t\t\tvertex.y = points[ j ].y;\r\n\t\t\tvertex.z = points[ j ].x * cos;\r\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// uv\r\n\t\t\tuv.x = i / segments;\r\n\t\t\tuv.y = j / ( points.length - 1 );\r\n\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// generate indices\r\n\r\n\tfor ( i = 0; i < segments; i ++ ) {\r\n\r\n\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\tbase = j + i * points.length;\r\n\r\n\t\t\t// indices\r\n\t\t\tvar a = base;\r\n\t\t\tvar b = base + points.length;\r\n\t\t\tvar c = base + points.length + 1;\r\n\t\t\tvar d = base + 1;\r\n\r\n\t\t\t// face one\r\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t\t// face two\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\r\n\tthis.setIndex( indices );\r\n\tthis.addAttribute( 'position', vertices );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n\t// generate normals\r\n\r\n\tthis.computeVertexNormals();\r\n\r\n\t// if the geometry is closed, we need to average the normals along the seam.\r\n\t// because the corresponding vertices are identical (but still have different UVs).\r\n\r\n\tif( phiLength === Math.PI * 2 ) {\r\n\r\n\t\tvar normals = this.attributes.normal.array;\r\n\t\tvar n1 = new THREE.Vector3();\r\n\t\tvar n2 = new THREE.Vector3();\r\n\t\tvar n = new THREE.Vector3();\r\n\r\n\t\t// this is the buffer offset for the last line of vertices\r\n\t\tbase = segments * points.length * 3;\r\n\r\n\t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\r\n\r\n\t\t\t// select the normal of the vertex in the first line\r\n\t\t\tn1.x = normals[ j + 0 ];\r\n\t\t\tn1.y = normals[ j + 1 ];\r\n\t\t\tn1.z = normals[ j + 2 ];\r\n\r\n\t\t\t// select the normal of the vertex in the last line\r\n\t\t\tn2.x = normals[ base + j + 0 ];\r\n\t\t\tn2.y = normals[ base + j + 1 ];\r\n\t\t\tn2.z = normals[ base + j + 2 ];\r\n\r\n\t\t\t// average normals\r\n\t\t\tn.addVectors( n1, n2 ).normalize();\r\n\r\n\t\t\t// assign the new values to both normals\r\n\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\r\n\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\r\n\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\r\n\r\n\t\t} // next row\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LatheBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.LatheBufferGeometry.prototype.constructor = THREE.LatheBufferGeometry;\r\n\r\n// File:src/extras/geometries/LatheGeometry.js\r\n\r\n/**\r\n * @author astrodud / http://astrodud.isgreat.org/\r\n * @author zz85 / https://github.com/zz85\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\n// points - to create a closed torus, one must use a set of points\r\n//    like so: [ a, b, c, d, a ], see first is the same as last.\r\n// segments - the number of circumference segments to create\r\n// phiStart - the starting radian\r\n// phiLength - the radian (0 to 2PI) range of the lathed section\r\n//    2PI is a closed lathe, less than 2PI is a portion.\r\n\r\nTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'LatheGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tpoints: points,\r\n\t\tsegments: segments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.LatheBufferGeometry( points, segments, phiStart, phiLength ) );\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;\r\n\r\n// File:src/extras/geometries/PlaneGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n */\r\n\r\nTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'PlaneGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\r\n\r\n};\r\n\r\nTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;\r\n\r\n// File:src/extras/geometries/PlaneBufferGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n */\r\n\r\nTHREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'PlaneBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments\r\n\t};\r\n\r\n\tvar width_half = width / 2;\r\n\tvar height_half = height / 2;\r\n\r\n\tvar gridX = Math.floor( widthSegments ) || 1;\r\n\tvar gridY = Math.floor( heightSegments ) || 1;\r\n\r\n\tvar gridX1 = gridX + 1;\r\n\tvar gridY1 = gridY + 1;\r\n\r\n\tvar segment_width = width / gridX;\r\n\tvar segment_height = height / gridY;\r\n\r\n\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\r\n\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\r\n\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\r\n\r\n\tvar offset = 0;\r\n\tvar offset2 = 0;\r\n\r\n\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\tvar y = iy * segment_height - height_half;\r\n\r\n\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\tvar x = ix * segment_width - width_half;\r\n\r\n\t\t\tvertices[ offset ] = x;\r\n\t\t\tvertices[ offset + 1 ] = - y;\r\n\r\n\t\t\tnormals[ offset + 2 ] = 1;\r\n\r\n\t\t\tuvs[ offset2 ] = ix / gridX;\r\n\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\r\n\r\n\t\t\toffset += 3;\r\n\t\t\toffset2 += 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\toffset = 0;\r\n\r\n\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\r\n\r\n\tfor ( var iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\tindices[ offset ] = a;\r\n\t\t\tindices[ offset + 1 ] = b;\r\n\t\t\tindices[ offset + 2 ] = d;\r\n\r\n\t\t\tindices[ offset + 3 ] = b;\r\n\t\t\tindices[ offset + 4 ] = c;\r\n\t\t\tindices[ offset + 5 ] = d;\r\n\r\n\t\t\toffset += 6;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n};\r\n\r\nTHREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;\r\n\r\n// File:src/extras/geometries/RingBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\nTHREE.RingBufferGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'RingBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tinnerRadius: innerRadius,\r\n\t\touterRadius: outerRadius,\r\n\t\tthetaSegments: thetaSegments,\r\n\t\tphiSegments: phiSegments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tinnerRadius = innerRadius || 20;\r\n\touterRadius = outerRadius || 50;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\r\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\r\n\r\n\t// these are used to calculate buffer length\r\n\tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\r\n\tvar indexCount = thetaSegments * phiSegments * 2 * 3;\r\n\r\n\t// buffers\r\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\r\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\t// some helper variables\r\n\tvar index = 0, indexOffset = 0, segment;\r\n\tvar radius = innerRadius;\r\n\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\r\n\tvar vertex = new THREE.Vector3();\r\n\tvar uv = new THREE.Vector2();\r\n\tvar j, i;\r\n\r\n\t// generate vertices, normals and uvs\r\n\r\n\t// values are generate from the inside of the ring to the outside\r\n\r\n\tfor ( j = 0; j <= phiSegments; j ++ ) {\r\n\r\n\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\r\n\r\n\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\tvertex.y = radius * Math.sin( segment );\r\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// normal\r\n\t\t\tnormals.setXYZ( index, 0, 0, 1 );\r\n\r\n\t\t\t// uv\r\n\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\r\n\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\r\n\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex++;\r\n\r\n\t\t}\r\n\r\n\t\t// increase the radius for next row of vertices\r\n\t\tradius += radiusStep;\r\n\r\n\t}\r\n\r\n\t// generate indices\r\n\r\n\tfor ( j = 0; j < phiSegments; j ++ ) {\r\n\r\n\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\r\n\r\n\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\r\n\r\n\t\t\tsegment = i + thetaSegmentLevel;\r\n\r\n\t\t\t// indices\r\n\t\t\tvar a = segment;\r\n\t\t\tvar b = segment + thetaSegments + 1;\r\n\t\t\tvar c = segment + thetaSegments + 2;\r\n\t\t\tvar d = segment + 1;\r\n\r\n\t\t\t// face one\r\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\r\n\t\t\t// face two\r\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\r\n\tthis.setIndex( indices );\r\n\tthis.addAttribute( 'position', vertices );\r\n\tthis.addAttribute( 'normal', normals );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n};\r\n\r\nTHREE.RingBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.RingBufferGeometry.prototype.constructor = THREE.RingBufferGeometry;\r\n\r\n// File:src/extras/geometries/RingGeometry.js\r\n\r\n/**\r\n * @author Kaleb Murphy\r\n */\r\n\r\nTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'RingGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tinnerRadius: innerRadius,\r\n\t\touterRadius: outerRadius,\r\n\t\tthetaSegments: thetaSegments,\r\n\t\tphiSegments: phiSegments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\r\n\r\n};\r\n\r\nTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.RingGeometry.prototype.constructor = THREE.RingGeometry;\r\n\r\n// File:src/extras/geometries/SphereGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'SphereGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\r\n\r\n};\r\n\r\nTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;\r\n\r\n// File:src/extras/geometries/SphereBufferGeometry.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n * based on THREE.SphereGeometry\r\n */\r\n\r\nTHREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'SphereBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tradius = radius || 50;\r\n\r\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\r\n\tphiStart = phiStart !== undefined ? phiStart : 0;\r\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\r\n\tvar thetaEnd = thetaStart + thetaLength;\r\n\r\n\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\r\n\r\n\tvar positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\tvar index = 0, vertices = [], normal = new THREE.Vector3();\r\n\r\n\tfor ( var y = 0; y <= heightSegments; y ++ ) {\r\n\r\n\t\tvar verticesRow = [];\r\n\r\n\t\tvar v = y / heightSegments;\r\n\r\n\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\r\n\r\n\t\t\tvar u = x / widthSegments;\r\n\r\n\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\r\n\t\t\tnormal.set( px, py, pz ).normalize();\r\n\r\n\t\t\tpositions.setXYZ( index, px, py, pz );\r\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\t\t\tuvs.setXY( index, u, 1 - v );\r\n\r\n\t\t\tverticesRow.push( index );\r\n\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t\tvertices.push( verticesRow );\r\n\r\n\t}\r\n\r\n\tvar indices = [];\r\n\r\n\tfor ( var y = 0; y < heightSegments; y ++ ) {\r\n\r\n\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\r\n\t\t\tvar v2 = vertices[ y ][ x ];\r\n\t\t\tvar v3 = vertices[ y + 1 ][ x ];\r\n\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\r\n\r\n\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\r\n\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );\r\n\tthis.addAttribute( 'position', positions );\r\n\tthis.addAttribute( 'normal', normals );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;\r\n\r\n// File:src/extras/geometries/TextGeometry.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Text = 3D Text\r\n *\r\n * parameters = {\r\n *  font: <THREE.Font>, // font\r\n *\r\n *  size: <float>, // size of the text\r\n *  height: <float>, // thickness to extrude text\r\n *  curveSegments: <int>, // number of points on the curves\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into text bevel goes\r\n *  bevelSize: <float> // how far from text outline is bevel\r\n * }\r\n */\r\n\r\nTHREE.TextGeometry = function ( text, parameters ) {\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar font = parameters.font;\r\n\r\n\tif ( font instanceof THREE.Font === false ) {\r\n\r\n\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\r\n\t\treturn new THREE.Geometry();\r\n\r\n\t}\r\n\r\n\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\r\n\r\n\t// translate parameters to ExtrudeGeometry API\r\n\r\n\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\r\n\r\n\t// defaults\r\n\r\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\r\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\r\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\r\n\r\n\tTHREE.ExtrudeGeometry.call( this, shapes, parameters );\r\n\r\n\tthis.type = 'TextGeometry';\r\n\r\n};\r\n\r\nTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\r\nTHREE.TextGeometry.prototype.constructor = THREE.TextGeometry;\r\n\r\n// File:src/extras/geometries/TorusBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\nTHREE.TorusBufferGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'TorusBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\ttube: tube,\r\n\t\tradialSegments: radialSegments,\r\n\t\ttubularSegments: tubularSegments,\r\n\t\tarc: arc\r\n\t};\r\n\r\n\tradius = radius || 100;\r\n\ttube = tube || 40;\r\n\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\ttubularSegments = Math.floor( tubularSegments ) || 6;\r\n\tarc = arc || Math.PI * 2;\r\n\r\n\t// used to calculate buffer length\r\n\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\r\n\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\r\n\r\n\t// buffers\r\n\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\r\n\tvar vertices = new Float32Array( vertexCount * 3 );\r\n\tvar normals = new Float32Array( vertexCount * 3 );\r\n\tvar uvs = new Float32Array( vertexCount * 2 );\r\n\r\n\t// offset variables\r\n\tvar vertexBufferOffset = 0;\r\n\tvar uvBufferOffset = 0;\r\n\tvar indexBufferOffset = 0;\r\n\r\n\t// helper variables\r\n\tvar center = new THREE.Vector3();\r\n\tvar vertex = new THREE.Vector3();\r\n\tvar normal = new THREE.Vector3();\r\n\r\n\tvar j, i;\r\n\r\n\t// generate vertices, normals and uvs\r\n\r\n\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\tvar u = i / tubularSegments * arc;\r\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\tvertex.z = tube * Math.sin( v );\r\n\r\n\t\t\tvertices[ vertexBufferOffset ] = vertex.x;\r\n\t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\r\n\t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\r\n\r\n\t\t\t// this vector is used to calculate the normal\r\n\t\t\tcenter.x = radius * Math.cos( u );\r\n\t\t\tcenter.y = radius * Math.sin( u );\r\n\r\n\t\t\t// normal\r\n\t\t\tnormal.subVectors( vertex, center ).normalize();\r\n\r\n\t\t\tnormals[ vertexBufferOffset ] = normal.x;\r\n\t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\r\n\t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\r\n\r\n\t\t\t// uv\r\n\t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\r\n\t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\r\n\r\n\t\t\t// update offsets\r\n\t\t\tvertexBufferOffset += 3;\r\n\t\t\tuvBufferOffset += 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// generate indices\r\n\r\n\tfor ( j = 1; j <= radialSegments; j ++ ) {\r\n\r\n\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t// indices\r\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\r\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\r\n\r\n\t\t\t// face one\r\n\t\t\tindices[ indexBufferOffset ] = a;\r\n\t\t\tindices[ indexBufferOffset + 1 ] = b;\r\n\t\t\tindices[ indexBufferOffset + 2 ] = d;\r\n\r\n\t\t\t// face two\r\n\t\t\tindices[ indexBufferOffset + 3 ] = b;\r\n\t\t\tindices[ indexBufferOffset + 4 ] = c;\r\n\t\t\tindices[ indexBufferOffset + 5 ] = d;\r\n\r\n\t\t\t// update offset\r\n\t\t\tindexBufferOffset += 6;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n};\r\n\r\nTHREE.TorusBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.TorusBufferGeometry.prototype.constructor = THREE.TorusBufferGeometry;\r\n\r\n// File:src/extras/geometries/TorusGeometry.js\r\n\r\n/**\r\n * @author oosmoxiecode\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\r\n */\r\n\r\nTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'TorusGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\ttube: tube,\r\n\t\tradialSegments: radialSegments,\r\n\t\ttubularSegments: tubularSegments,\r\n\t\tarc: arc\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\r\n\r\n};\r\n\r\nTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;\r\n\r\n// File:src/extras/geometries/TorusKnotBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * see: http://www.blackpawn.com/texts/pqtorus/\r\n */\r\nTHREE.TorusKnotBufferGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'TorusKnotBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\ttube: tube,\r\n\t\ttubularSegments: tubularSegments,\r\n\t\tradialSegments: radialSegments,\r\n\t\tp: p,\r\n\t\tq: q\r\n\t};\r\n\r\n\tradius = radius || 100;\r\n\ttube = tube || 40;\r\n\ttubularSegments = Math.floor( tubularSegments ) || 64;\r\n\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\tp = p || 2;\r\n\tq = q || 3;\r\n\r\n\t// used to calculate buffer length\r\n\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\r\n\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\r\n\r\n\t// buffers\r\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\r\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\t// helper variables\r\n\tvar i, j, index = 0, indexOffset = 0;\r\n\r\n\tvar vertex = new THREE.Vector3();\r\n\tvar normal = new THREE.Vector3();\r\n\tvar uv = new THREE.Vector2();\r\n\r\n\tvar P1 = new THREE.Vector3();\r\n\tvar P2 = new THREE.Vector3();\r\n\r\n\tvar B = new THREE.Vector3();\r\n\tvar T = new THREE.Vector3();\r\n\tvar N = new THREE.Vector3();\r\n\r\n\t// generate vertices, normals and uvs\r\n\r\n\tfor ( i = 0; i <= tubularSegments; ++ i ) {\r\n\r\n\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\r\n\r\n\t\tvar u = i / tubularSegments * p * Math.PI * 2;\r\n\r\n\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\r\n\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\r\n\r\n\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\r\n\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\r\n\r\n\t\t// calculate orthonormal basis\r\n\r\n\t\tT.subVectors( P2, P1 );\r\n\t\tN.addVectors( P2, P1 );\r\n\t\tB.crossVectors( T, N );\r\n\t\tN.crossVectors( B, T );\r\n\r\n\t\t// normalize B, N. T can be ignored, we don't use it\r\n\r\n\t\tB.normalize();\r\n\t\tN.normalize();\r\n\r\n\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\r\n\r\n\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\r\n\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\r\n\r\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\t\t\tvar cx = - tube * Math.cos( v );\r\n\t\t\tvar cy = tube * Math.sin( v );\r\n\r\n\t\t\t// now calculate the final vertex position.\r\n\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\r\n\r\n\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\r\n\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\r\n\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\r\n\t\t\tnormal.subVectors( vertex, P1 ).normalize();\r\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\r\n\t\t\t// uv\r\n\t\t\tuv.x = i / tubularSegments;\r\n\t\t\tuv.y = j / radialSegments;\r\n\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// generate indices\r\n\r\n\tfor ( j = 1; j <= tubularSegments; j ++ ) {\r\n\r\n\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\r\n\r\n\t\t\t// indices\r\n\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\r\n\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\r\n\t\t\tvar c = ( radialSegments + 1 ) * j + i;\r\n\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\r\n\r\n\t\t\t// face one\r\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t\t// face two\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\r\n\tthis.setIndex( indices );\r\n\tthis.addAttribute( 'position', vertices );\r\n\tthis.addAttribute( 'normal', normals );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n\t// this function calculates the current position on the torus curve\r\n\r\n\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\r\n\r\n\t\tvar cu = Math.cos( u );\r\n\t\tvar su = Math.sin( u );\r\n\t\tvar quOverP = q / p * u;\r\n\t\tvar cs = Math.cos( quOverP );\r\n\r\n\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\r\n\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\r\n\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.TorusKnotBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.TorusKnotBufferGeometry.prototype.constructor = THREE.TorusKnotBufferGeometry;\r\n\r\n// File:src/extras/geometries/TorusKnotGeometry.js\r\n\r\n/**\r\n * @author oosmoxiecode\r\n */\r\n\r\nTHREE.TorusKnotGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'TorusKnotGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\ttube: tube,\r\n\t\ttubularSegments: tubularSegments,\r\n\t\tradialSegments: radialSegments,\r\n\t\tp: p,\r\n\t\tq: q\r\n\t};\r\n\r\n\tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\r\n\r\n\tthis.fromBufferGeometry( new THREE.TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;\r\n\r\n// File:src/extras/geometries/TubeGeometry.js\r\n\r\n/**\r\n * @author WestLangley / https://github.com/WestLangley\r\n * @author zz85 / https://github.com/zz85\r\n * @author miningold / https://github.com/miningold\r\n * @author jonobr1 / https://github.com/jonobr1\r\n *\r\n * Modified from the TorusKnotGeometry by @oosmoxiecode\r\n *\r\n * Creates a tube which extrudes along a 3d spline\r\n *\r\n * Uses parallel transport frames as described in\r\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n */\r\n\r\nTHREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'TubeGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tpath: path,\r\n\t\tsegments: segments,\r\n\t\tradius: radius,\r\n\t\tradialSegments: radialSegments,\r\n\t\tclosed: closed,\r\n\t\ttaper: taper\r\n\t};\r\n\r\n\tsegments = segments || 64;\r\n\tradius = radius || 1;\r\n\tradialSegments = radialSegments || 8;\r\n\tclosed = closed || false;\r\n\ttaper = taper || THREE.TubeGeometry.NoTaper;\r\n\r\n\tvar grid = [];\r\n\r\n\tvar scope = this,\r\n\r\n\t\ttangent,\r\n\t\tnormal,\r\n\t\tbinormal,\r\n\r\n\t\tnumpoints = segments + 1,\r\n\r\n\t\tu, v, r,\r\n\r\n\t\tcx, cy,\r\n\t\tpos, pos2 = new THREE.Vector3(),\r\n\t\ti, j,\r\n\t\tip, jp,\r\n\t\ta, b, c, d,\r\n\t\tuva, uvb, uvc, uvd;\r\n\r\n\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\r\n\t\ttangents = frames.tangents,\r\n\t\tnormals = frames.normals,\r\n\t\tbinormals = frames.binormals;\r\n\r\n\t// proxy internals\r\n\tthis.tangents = tangents;\r\n\tthis.normals = normals;\r\n\tthis.binormals = binormals;\r\n\r\n\tfunction vert( x, y, z ) {\r\n\r\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\r\n\r\n\t}\r\n\r\n\t// construct the grid\r\n\r\n\tfor ( i = 0; i < numpoints; i ++ ) {\r\n\r\n\t\tgrid[ i ] = [];\r\n\r\n\t\tu = i / ( numpoints - 1 );\r\n\r\n\t\tpos = path.getPointAt( u );\r\n\r\n\t\ttangent = tangents[ i ];\r\n\t\tnormal = normals[ i ];\r\n\t\tbinormal = binormals[ i ];\r\n\r\n\t\tr = radius * taper( u );\r\n\r\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\r\n\r\n\t\t\tv = j / radialSegments * 2 * Math.PI;\r\n\r\n\t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\r\n\t\t\tcy = r * Math.sin( v );\r\n\r\n\t\t\tpos2.copy( pos );\r\n\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\r\n\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\r\n\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\r\n\r\n\t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// construct the mesh\r\n\r\n\tfor ( i = 0; i < segments; i ++ ) {\r\n\r\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\r\n\r\n\t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\r\n\t\t\tjp = ( j + 1 ) % radialSegments;\r\n\r\n\t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\r\n\t\t\tb = grid[ ip ][ j ];\r\n\t\t\tc = grid[ ip ][ jp ];\r\n\t\t\td = grid[ i ][ jp ];\r\n\r\n\t\t\tuva = new THREE.Vector2( i / segments, j / radialSegments );\r\n\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );\r\n\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\r\n\t\t\tuvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\r\n\r\nTHREE.TubeGeometry.NoTaper = function ( u ) {\r\n\r\n\treturn 1;\r\n\r\n};\r\n\r\nTHREE.TubeGeometry.SinusoidalTaper = function ( u ) {\r\n\r\n\treturn Math.sin( Math.PI * u );\r\n\r\n};\r\n\r\n// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\r\nTHREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\r\n\r\n\tvar\tnormal = new THREE.Vector3(),\r\n\r\n\t\ttangents = [],\r\n\t\tnormals = [],\r\n\t\tbinormals = [],\r\n\r\n\t\tvec = new THREE.Vector3(),\r\n\t\tmat = new THREE.Matrix4(),\r\n\r\n\t\tnumpoints = segments + 1,\r\n\t\ttheta,\r\n\t\tsmallest,\r\n\r\n\t\ttx, ty, tz,\r\n\t\ti, u;\r\n\r\n\r\n\t// expose internals\r\n\tthis.tangents = tangents;\r\n\tthis.normals = normals;\r\n\tthis.binormals = binormals;\r\n\r\n\t// compute the tangent vectors for each segment on the path\r\n\r\n\tfor ( i = 0; i < numpoints; i ++ ) {\r\n\r\n\t\tu = i / ( numpoints - 1 );\r\n\r\n\t\ttangents[ i ] = path.getTangentAt( u );\r\n\t\ttangents[ i ].normalize();\r\n\r\n\t}\r\n\r\n\tinitialNormal3();\r\n\r\n\t/*\r\n\tfunction initialNormal1(lastBinormal) {\r\n\t\t// fixed start binormal. Has dangers of 0 vectors\r\n\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\r\n\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\t}\r\n\r\n\tfunction initialNormal2() {\r\n\r\n\t\t// This uses the Frenet-Serret formula for deriving binormal\r\n\t\tvar t2 = path.getTangentAt( epsilon );\r\n\r\n\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\r\n\t}\r\n\t*/\r\n\r\n\tfunction initialNormal3() {\r\n\r\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\r\n\t\t// and in the direction of the smallest tangent xyz component\r\n\r\n\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\tsmallest = Number.MAX_VALUE;\r\n\t\ttx = Math.abs( tangents[ 0 ].x );\r\n\t\tty = Math.abs( tangents[ 0 ].y );\r\n\t\ttz = Math.abs( tangents[ 0 ].z );\r\n\r\n\t\tif ( tx <= smallest ) {\r\n\r\n\t\t\tsmallest = tx;\r\n\t\t\tnormal.set( 1, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ty <= smallest ) {\r\n\r\n\t\t\tsmallest = ty;\r\n\t\t\tnormal.set( 0, 1, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( tz <= smallest ) {\r\n\r\n\t\t\tnormal.set( 0, 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\r\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\t}\r\n\r\n\r\n\t// compute the slowly-varying normal and binormal vectors for each segment on the path\r\n\r\n\tfor ( i = 1; i < numpoints; i ++ ) {\r\n\r\n\t\tnormals[ i ] = normals[ i - 1 ].clone();\r\n\r\n\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\r\n\r\n\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\r\n\r\n\t\tif ( vec.length() > Number.EPSILON ) {\r\n\r\n\t\t\tvec.normalize();\r\n\r\n\t\t\ttheta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\r\n\r\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\r\n\t\t}\r\n\r\n\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t}\r\n\r\n\r\n\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n\tif ( closed ) {\r\n\r\n\t\ttheta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\r\n\t\ttheta /= ( numpoints - 1 );\r\n\r\n\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\r\n\r\n\t\t\ttheta = - theta;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 1; i < numpoints; i ++ ) {\r\n\r\n\t\t\t// twist a little...\r\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/geometries/PolyhedronGeometry.js\r\n\r\n/**\r\n * @author clockworkgeek / https://github.com/clockworkgeek\r\n * @author timothypratley / https://github.com/timothypratley\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'PolyhedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tvertices: vertices,\r\n\t\tindices: indices,\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n\tradius = radius || 1;\r\n\tdetail = detail || 0;\r\n\r\n\tvar that = this;\r\n\r\n\tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\r\n\r\n\t\tprepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\r\n\r\n\t}\r\n\r\n\tvar p = this.vertices;\r\n\r\n\tvar faces = [];\r\n\r\n\tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\r\n\r\n\t\tvar v1 = p[ indices[ i ] ];\r\n\t\tvar v2 = p[ indices[ i + 1 ] ];\r\n\t\tvar v3 = p[ indices[ i + 2 ] ];\r\n\r\n\t\tfaces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, j );\r\n\r\n\t}\r\n\r\n\tvar centroid = new THREE.Vector3();\r\n\r\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\tsubdivide( faces[ i ], detail );\r\n\r\n\t}\r\n\r\n\r\n\t// Handle case when face straddles the seam\r\n\r\n\tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\r\n\r\n\t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\tvar x0 = uvs[ 0 ].x;\r\n\t\tvar x1 = uvs[ 1 ].x;\r\n\t\tvar x2 = uvs[ 2 ].x;\r\n\r\n\t\tvar max = Math.max( x0, x1, x2 );\r\n\t\tvar min = Math.min( x0, x1, x2 );\r\n\r\n\t\tif ( max > 0.9 && min < 0.1 ) {\r\n\r\n\t\t\t// 0.9 is somewhat arbitrary\r\n\r\n\t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\r\n\t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\r\n\t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Apply radius\r\n\r\n\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\r\n\t\tthis.vertices[ i ].multiplyScalar( radius );\r\n\r\n\t}\r\n\r\n\r\n\t// Merge vertices\r\n\r\n\tthis.mergeVertices();\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n\r\n\t// Project vector onto sphere's surface\r\n\r\n\tfunction prepare( vector ) {\r\n\r\n\t\tvar vertex = vector.normalize().clone();\r\n\t\tvertex.index = that.vertices.push( vertex ) - 1;\r\n\r\n\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\r\n\r\n\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\r\n\t\tvar v = inclination( vector ) / Math.PI + 0.5;\r\n\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\r\n\r\n\t\treturn vertex;\r\n\r\n\t}\r\n\r\n\r\n\t// Approximate a curved face with recursively sub-divided triangles.\r\n\r\n\tfunction make( v1, v2, v3, materialIndex ) {\r\n\r\n\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, materialIndex );\r\n\t\tthat.faces.push( face );\r\n\r\n\t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\r\n\r\n\t\tvar azi = azimuth( centroid );\r\n\r\n\t\tthat.faceVertexUvs[ 0 ].push( [\r\n\t\t\tcorrectUV( v1.uv, v1, azi ),\r\n\t\t\tcorrectUV( v2.uv, v2, azi ),\r\n\t\t\tcorrectUV( v3.uv, v3, azi )\r\n\t\t] );\r\n\r\n\t}\r\n\r\n\r\n\t// Analytically subdivide a face to the required detail level.\r\n\r\n\tfunction subdivide( face, detail ) {\r\n\r\n\t\tvar cols = Math.pow( 2, detail );\r\n\t\tvar a = prepare( that.vertices[ face.a ] );\r\n\t\tvar b = prepare( that.vertices[ face.b ] );\r\n\t\tvar c = prepare( that.vertices[ face.c ] );\r\n\t\tvar v = [];\r\n\r\n\t\tvar materialIndex = face.materialIndex;\r\n\r\n\t\t// Construct all of the vertices for this subdivision.\r\n\r\n\t\tfor ( var i = 0 ; i <= cols; i ++ ) {\r\n\r\n\t\t\tv[ i ] = [];\r\n\r\n\t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\r\n\t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\r\n\t\t\tvar rows = cols - i;\r\n\r\n\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\r\n\r\n\t\t\t\tif ( j === 0 && i === cols ) {\r\n\r\n\t\t\t\t\tv[ i ][ j ] = aj;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Construct all of the faces.\r\n\r\n\t\tfor ( var i = 0; i < cols ; i ++ ) {\r\n\r\n\t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\r\n\r\n\t\t\t\tvar k = Math.floor( j / 2 );\r\n\r\n\t\t\t\tif ( j % 2 === 0 ) {\r\n\r\n\t\t\t\t\tmake(\r\n\t\t\t\t\t\tv[ i ][ k + 1 ],\r\n\t\t\t\t\t\tv[ i + 1 ][ k ],\r\n\t\t\t\t\t\tv[ i ][ k ],\r\n\t\t\t\t\t\tmaterialIndex\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmake(\r\n\t\t\t\t\t\tv[ i ][ k + 1 ],\r\n\t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\r\n\t\t\t\t\t\tv[ i + 1 ][ k ],\r\n\t\t\t\t\t\tmaterialIndex\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Angle around the Y axis, counter-clockwise when looking from above.\r\n\r\n\tfunction azimuth( vector ) {\r\n\r\n\t\treturn Math.atan2( vector.z, - vector.x );\r\n\r\n\t}\r\n\r\n\r\n\t// Angle above the XZ plane.\r\n\r\n\tfunction inclination( vector ) {\r\n\r\n\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\r\n\t}\r\n\r\n\r\n\t// Texture fixing helper. Spheres have some odd behaviours.\r\n\r\n\tfunction correctUV( uv, vector, azimuth ) {\r\n\r\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\r\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\r\n\t\treturn uv.clone();\r\n\r\n\t}\r\n\r\n\r\n};\r\n\r\nTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;\r\n\r\n// File:src/extras/geometries/DodecahedronGeometry.js\r\n\r\n/**\r\n * @author Abe Pazos / https://hamoid.com\r\n */\r\n\r\nTHREE.DodecahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\tvar r = 1 / t;\r\n\r\n\tvar vertices = [\r\n\r\n\t\t// (±1, ±1, ±1)\r\n\t\t- 1, - 1, - 1,    - 1, - 1,  1,\r\n\t\t- 1,  1, - 1,    - 1,  1,  1,\r\n\t\t 1, - 1, - 1,     1, - 1,  1,\r\n\t\t 1,  1, - 1,     1,  1,  1,\r\n\r\n\t\t// (0, ±1/φ, ±φ)\r\n\t\t 0, - r, - t,     0, - r,  t,\r\n\t\t 0,  r, - t,     0,  r,  t,\r\n\r\n\t\t// (±1/φ, ±φ, 0)\r\n\t\t- r, - t,  0,    - r,  t,  0,\r\n\t\t r, - t,  0,     r,  t,  0,\r\n\r\n\t\t// (±φ, 0, ±1/φ)\r\n\t\t- t,  0, - r,     t,  0, - r,\r\n\t\t- t,  0,  r,     t,  0,  r\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\r\n\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\r\n\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\r\n\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\r\n\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\r\n\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\r\n\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\r\n\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\r\n\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\r\n\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\r\n\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\r\n\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'DodecahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;\r\n\r\n// File:src/extras/geometries/IcosahedronGeometry.js\r\n\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.IcosahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\r\n\tvar vertices = [\r\n\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\r\n\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\r\n\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\r\n\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\r\n\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\r\n\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'IcosahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;\r\n\r\n// File:src/extras/geometries/OctahedronGeometry.js\r\n\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.OctahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar vertices = [\r\n\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'OctahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;\r\n\r\n// File:src/extras/geometries/TetrahedronGeometry.js\r\n\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.TetrahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar vertices = [\r\n\t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'TetrahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;\r\n\r\n// File:src/extras/geometries/ParametricGeometry.js\r\n\r\n/**\r\n * @author zz85 / https://github.com/zz85\r\n * Parametric Surfaces Geometry\r\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\r\n *\r\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\r\n *\r\n */\r\n\r\nTHREE.ParametricGeometry = function ( func, slices, stacks ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'ParametricGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tfunc: func,\r\n\t\tslices: slices,\r\n\t\tstacks: stacks\r\n\t};\r\n\r\n\tvar verts = this.vertices;\r\n\tvar faces = this.faces;\r\n\tvar uvs = this.faceVertexUvs[ 0 ];\r\n\r\n\tvar i, j, p;\r\n\tvar u, v;\r\n\r\n\tvar sliceCount = slices + 1;\r\n\r\n\tfor ( i = 0; i <= stacks; i ++ ) {\r\n\r\n\t\tv = i / stacks;\r\n\r\n\t\tfor ( j = 0; j <= slices; j ++ ) {\r\n\r\n\t\t\tu = j / slices;\r\n\r\n\t\t\tp = func( u, v );\r\n\t\t\tverts.push( p );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar a, b, c, d;\r\n\tvar uva, uvb, uvc, uvd;\r\n\r\n\tfor ( i = 0; i < stacks; i ++ ) {\r\n\r\n\t\tfor ( j = 0; j < slices; j ++ ) {\r\n\r\n\t\t\ta = i * sliceCount + j;\r\n\t\t\tb = i * sliceCount + j + 1;\r\n\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\r\n\t\t\td = ( i + 1 ) * sliceCount + j;\r\n\r\n\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\r\n\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\r\n\t\t\tuvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\r\n\t\t\tuvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\r\n\r\n\t\t\tfaces.push( new THREE.Face3( a, b, d ) );\r\n\t\t\tuvs.push( [ uva, uvb, uvd ] );\r\n\r\n\t\t\tfaces.push( new THREE.Face3( b, c, d ) );\r\n\t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// console.log(this);\r\n\r\n\t// magic bullet\r\n\t// var diff = this.mergeVertices();\r\n\t// console.log('removed ', diff, ' vertices by merging');\r\n\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;\r\n\r\n// File:src/extras/geometries/WireframeGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.WireframeGeometry = function ( geometry ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tvar edge = [ 0, 0 ], hash = {};\r\n\r\n\tfunction sortFunction( a, b ) {\r\n\r\n\t\treturn a - b;\r\n\r\n\t}\r\n\r\n\tvar keys = [ 'a', 'b', 'c' ];\r\n\r\n\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\tvar vertices = geometry.vertices;\r\n\t\tvar faces = geometry.faces;\r\n\t\tvar numEdges = 0;\r\n\r\n\t\t// allocate maximal size\r\n\t\tvar edges = new Uint32Array( 6 * faces.length );\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\r\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\tedge.sort( sortFunction );\r\n\r\n\t\t\t\tvar key = edge.toString();\r\n\r\n\t\t\t\tif ( hash[ key ] === undefined ) {\r\n\r\n\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\r\n\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\r\n\t\t\t\t\thash[ key ] = true;\r\n\t\t\t\t\tnumEdges ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\r\n\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\r\n\r\n\t\t\tfor ( var j = 0; j < 2; j ++ ) {\r\n\r\n\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\r\n\r\n\t\t\t\tvar index = 6 * i + 3 * j;\r\n\t\t\t\tcoords[ index + 0 ] = vertex.x;\r\n\t\t\t\tcoords[ index + 1 ] = vertex.y;\r\n\t\t\t\tcoords[ index + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\r\n\t} else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\t// Indexed BufferGeometry\r\n\r\n\t\t\tvar indices = geometry.index.array;\r\n\t\t\tvar vertices = geometry.attributes.position;\r\n\t\t\tvar groups = geometry.groups;\r\n\t\t\tvar numEdges = 0;\r\n\r\n\t\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\t\tgeometry.addGroup( 0, indices.length );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// allocate maximal size\r\n\t\t\tvar edges = new Uint32Array( 2 * indices.length );\r\n\r\n\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\r\n\r\n\t\t\t\tvar group = groups[ o ];\r\n\r\n\t\t\t\tvar start = group.start;\r\n\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\r\n\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\r\n\t\t\t\t\t\tedge.sort( sortFunction );\r\n\r\n\t\t\t\t\t\tvar key = edge.toString();\r\n\r\n\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\r\n\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\r\n\t\t\t\t\t\t\thash[ key ] = true;\r\n\t\t\t\t\t\t\tnumEdges ++;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\r\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\r\n\r\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\r\n\r\n\t\t\t\t\tvar index = 6 * i + 3 * j;\r\n\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\r\n\r\n\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\r\n\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\r\n\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// non-indexed BufferGeometry\r\n\r\n\t\t\tvar vertices = geometry.attributes.position.array;\r\n\t\t\tvar numEdges = vertices.length / 3;\r\n\t\t\tvar numTris = numEdges / 3;\r\n\r\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\r\n\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\r\n\r\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\tvar index = 18 * i + 6 * j;\r\n\r\n\t\t\t\t\tvar index1 = 9 * i + 3 * j;\r\n\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\r\n\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\r\n\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\r\n\r\n\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\r\n\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\r\n\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\r\n\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;\r\n\r\n// File:src/extras/helpers/AxisHelper.js\r\n\r\n/**\r\n * @author sroucheray / http://sroucheray.org/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AxisHelper = function ( size ) {\r\n\r\n\tsize = size || 1;\r\n\r\n\tvar vertices = new Float32Array( [\r\n\t\t0, 0, 0,  size, 0, 0,\r\n\t\t0, 0, 0,  0, size, 0,\r\n\t\t0, 0, 0,  0, 0, size\r\n\t] );\r\n\r\n\tvar colors = new Float32Array( [\r\n\t\t1, 0, 0,  1, 0.6, 0,\r\n\t\t0, 1, 0,  0.6, 1, 0,\r\n\t\t0, 0, 1,  0, 0.6, 1\r\n\t] );\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tgeometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n};\r\n\r\nTHREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.AxisHelper.prototype.constructor = THREE.AxisHelper;\r\n\r\n// File:src/extras/helpers/ArrowHelper.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author zz85 / http://github.com/zz85\r\n * @author bhouston / http://clara.io\r\n *\r\n * Creates an arrow for visualizing directions\r\n *\r\n * Parameters:\r\n *  dir - Vector3\r\n *  origin - Vector3\r\n *  length - Number\r\n *  color - color in hex value\r\n *  headLength - Number\r\n *  headWidth - Number\r\n */\r\n\r\nTHREE.ArrowHelper = ( function () {\r\n\r\n\tvar lineGeometry = new THREE.BufferGeometry();\r\n\tlineGeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\r\n\r\n\tvar coneGeometry = new THREE.CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\r\n\tconeGeometry.translate( 0, - 0.5, 0 );\r\n\r\n\treturn function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tTHREE.Object3D.call( this );\r\n\r\n\t\tif ( color === undefined ) color = 0xffff00;\r\n\t\tif ( length === undefined ) length = 1;\r\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\r\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\r\n\r\n\t\tthis.position.copy( origin );\r\n\r\n\t\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );\r\n\t\tthis.line.matrixAutoUpdate = false;\r\n\t\tthis.add( this.line );\r\n\r\n\t\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );\r\n\t\tthis.cone.matrixAutoUpdate = false;\r\n\t\tthis.add( this.cone );\r\n\r\n\t\tthis.setDirection( dir );\r\n\t\tthis.setLength( length, headLength, headWidth );\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\r\n\r\nTHREE.ArrowHelper.prototype.setDirection = ( function () {\r\n\r\n\tvar axis = new THREE.Vector3();\r\n\tvar radians;\r\n\r\n\treturn function setDirection( dir ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tif ( dir.y > 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\r\n\r\n\t\t} else if ( dir.y < - 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\r\n\r\n\t\t\tradians = Math.acos( dir.y );\r\n\r\n\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\r\n\r\n\tif ( headLength === undefined ) headLength = 0.2 * length;\r\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\r\n\r\n\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\r\n\tthis.line.updateMatrix();\r\n\r\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\r\n\tthis.cone.position.y = length;\r\n\tthis.cone.updateMatrix();\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.prototype.setColor = function ( color ) {\r\n\r\n\tthis.line.material.color.copy( color );\r\n\tthis.cone.material.color.copy( color );\r\n\r\n};\r\n\r\n// File:src/extras/helpers/BoxHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BoxHelper = function ( object ) {\r\n\r\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\tvar positions = new Float32Array( 8 * 3 );\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ) );\r\n\r\n\tif ( object !== undefined ) {\r\n\r\n\t\tthis.update( object );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\r\n\r\nTHREE.BoxHelper.prototype.update = ( function () {\r\n\r\n\tvar box = new THREE.Box3();\r\n\r\n\treturn function ( object ) {\r\n\r\n\t\tif ( object instanceof THREE.Box3 ) {\r\n\r\n\t\t\tbox.copy( object );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbox.setFromObject( object );\r\n\r\n\t\t}\r\n\r\n\t\tif ( box.isEmpty() ) return;\r\n\r\n\t\tvar min = box.min;\r\n\t\tvar max = box.max;\r\n\r\n\t\t/*\r\n\t\t  5____4\r\n\t\t1/___0/|\r\n\t\t| 6__|_7\r\n\t\t2/___3/\r\n\r\n\t\t0: max.x, max.y, max.z\r\n\t\t1: min.x, max.y, max.z\r\n\t\t2: min.x, min.y, max.z\r\n\t\t3: max.x, min.y, max.z\r\n\t\t4: max.x, max.y, min.z\r\n\t\t5: min.x, max.y, min.z\r\n\t\t6: min.x, min.y, min.z\r\n\t\t7: max.x, min.y, min.z\r\n\t\t*/\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\t\tvar array = position.array;\r\n\r\n\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\r\n\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\r\n\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\r\n\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\r\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\r\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\r\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\r\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/extras/helpers/BoundingBoxHelper.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\n// a helper to show the world-axis-aligned bounding box for an object\r\n\r\nTHREE.BoundingBoxHelper = function ( object, hex ) {\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0x888888;\r\n\r\n\tthis.object = object;\r\n\r\n\tthis.box = new THREE.Box3();\r\n\r\n\tTHREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\r\n\r\n};\r\n\r\nTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\r\nTHREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\r\n\r\nTHREE.BoundingBoxHelper.prototype.update = function () {\r\n\r\n\tthis.box.setFromObject( this.object );\r\n\r\n\tthis.box.size( this.scale );\r\n\r\n\tthis.box.center( this.position );\r\n\r\n};\r\n\r\n// File:src/extras/helpers/CameraHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows frustum, line of sight and up of the camera\r\n *\t- suitable for fast updates\r\n * \t- based on frustum visualization in lightgl.js shadowmap example\r\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n */\r\n\r\nTHREE.CameraHelper = function ( camera ) {\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\tvar material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\r\n\r\n\tvar pointMap = {};\r\n\r\n\t// colors\r\n\r\n\tvar hexFrustum = 0xffaa00;\r\n\tvar hexCone = 0xff0000;\r\n\tvar hexUp = 0x00aaff;\r\n\tvar hexTarget = 0xffffff;\r\n\tvar hexCross = 0x333333;\r\n\r\n\t// near\r\n\r\n\taddLine( \"n1\", \"n2\", hexFrustum );\r\n\taddLine( \"n2\", \"n4\", hexFrustum );\r\n\taddLine( \"n4\", \"n3\", hexFrustum );\r\n\taddLine( \"n3\", \"n1\", hexFrustum );\r\n\r\n\t// far\r\n\r\n\taddLine( \"f1\", \"f2\", hexFrustum );\r\n\taddLine( \"f2\", \"f4\", hexFrustum );\r\n\taddLine( \"f4\", \"f3\", hexFrustum );\r\n\taddLine( \"f3\", \"f1\", hexFrustum );\r\n\r\n\t// sides\r\n\r\n\taddLine( \"n1\", \"f1\", hexFrustum );\r\n\taddLine( \"n2\", \"f2\", hexFrustum );\r\n\taddLine( \"n3\", \"f3\", hexFrustum );\r\n\taddLine( \"n4\", \"f4\", hexFrustum );\r\n\r\n\t// cone\r\n\r\n\taddLine( \"p\", \"n1\", hexCone );\r\n\taddLine( \"p\", \"n2\", hexCone );\r\n\taddLine( \"p\", \"n3\", hexCone );\r\n\taddLine( \"p\", \"n4\", hexCone );\r\n\r\n\t// up\r\n\r\n\taddLine( \"u1\", \"u2\", hexUp );\r\n\taddLine( \"u2\", \"u3\", hexUp );\r\n\taddLine( \"u3\", \"u1\", hexUp );\r\n\r\n\t// target\r\n\r\n\taddLine( \"c\", \"t\", hexTarget );\r\n\taddLine( \"p\", \"c\", hexCross );\r\n\r\n\t// cross\r\n\r\n\taddLine( \"cn1\", \"cn2\", hexCross );\r\n\taddLine( \"cn3\", \"cn4\", hexCross );\r\n\r\n\taddLine( \"cf1\", \"cf2\", hexCross );\r\n\taddLine( \"cf3\", \"cf4\", hexCross );\r\n\r\n\tfunction addLine( a, b, hex ) {\r\n\r\n\t\taddPoint( a, hex );\r\n\t\taddPoint( b, hex );\r\n\r\n\t}\r\n\r\n\tfunction addPoint( id, hex ) {\r\n\r\n\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\tgeometry.colors.push( new THREE.Color( hex ) );\r\n\r\n\t\tif ( pointMap[ id ] === undefined ) {\r\n\r\n\t\t\tpointMap[ id ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\r\n\r\n\t}\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n\tthis.camera = camera;\r\n\tthis.camera.updateProjectionMatrix();\r\n\r\n\tthis.matrix = camera.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.pointMap = pointMap;\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\r\n\r\nTHREE.CameraHelper.prototype.update = function () {\r\n\r\n\tvar geometry, pointMap;\r\n\r\n\tvar vector = new THREE.Vector3();\r\n\tvar camera = new THREE.Camera();\r\n\r\n\tfunction setPoint( point, x, y, z ) {\r\n\r\n\t\tvector.set( x, y, z ).unproject( camera );\r\n\r\n\t\tvar points = pointMap[ point ];\r\n\r\n\t\tif ( points !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn function () {\r\n\r\n\t\tgeometry = this.geometry;\r\n\t\tpointMap = this.pointMap;\r\n\r\n\t\tvar w = 1, h = 1;\r\n\r\n\t\t// we need just camera projection matrix\r\n\t\t// world matrix must be identity\r\n\r\n\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\r\n\r\n\t\t// center / target\r\n\r\n\t\tsetPoint( \"c\", 0, 0, - 1 );\r\n\t\tsetPoint( \"t\", 0, 0,  1 );\r\n\r\n\t\t// near\r\n\r\n\t\tsetPoint( \"n1\", - w, - h, - 1 );\r\n\t\tsetPoint( \"n2\",   w, - h, - 1 );\r\n\t\tsetPoint( \"n3\", - w,   h, - 1 );\r\n\t\tsetPoint( \"n4\",   w,   h, - 1 );\r\n\r\n\t\t// far\r\n\r\n\t\tsetPoint( \"f1\", - w, - h, 1 );\r\n\t\tsetPoint( \"f2\",   w, - h, 1 );\r\n\t\tsetPoint( \"f3\", - w,   h, 1 );\r\n\t\tsetPoint( \"f4\",   w,   h, 1 );\r\n\r\n\t\t// up\r\n\r\n\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\r\n\r\n\t\t// cross\r\n\r\n\t\tsetPoint( \"cf1\", - w,   0, 1 );\r\n\t\tsetPoint( \"cf2\",   w,   0, 1 );\r\n\t\tsetPoint( \"cf3\",   0, - h, 1 );\r\n\t\tsetPoint( \"cf4\",   0,   h, 1 );\r\n\r\n\t\tsetPoint( \"cn1\", - w,   0, - 1 );\r\n\t\tsetPoint( \"cn2\",   w,   0, - 1 );\r\n\t\tsetPoint( \"cn3\",   0, - h, - 1 );\r\n\t\tsetPoint( \"cn4\",   0,   h, - 1 );\r\n\r\n\t\tgeometry.verticesNeedUpdate = true;\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/DirectionalLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.DirectionalLightHelper = function ( light, size ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tthis.matrix = light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tif ( size === undefined ) size = 1;\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [\r\n\t\t- size,   size, 0,\r\n\t\t  size,   size, 0,\r\n\t\t  size, - size, 0,\r\n\t\t- size, - size, 0,\r\n\t\t- size,   size, 0\r\n\t], 3 ) );\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\r\n\r\n\tthis.add( new THREE.Line( geometry, material ) );\r\n\r\n\tgeometry = new THREE.BufferGeometry();\r\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\r\n\r\n\tthis.add( new THREE.Line( geometry, material ));\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\r\n\r\nTHREE.DirectionalLightHelper.prototype.dispose = function () {\r\n\r\n\tvar lightPlane = this.children[ 0 ];\r\n\tvar targetLine = this.children[ 1 ];\r\n\r\n\tlightPlane.geometry.dispose();\r\n\tlightPlane.material.dispose();\r\n\ttargetLine.geometry.dispose();\r\n\ttargetLine.material.dispose();\r\n\r\n};\r\n\r\nTHREE.DirectionalLightHelper.prototype.update = function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\tvar v3 = new THREE.Vector3();\r\n\r\n\treturn function () {\r\n\r\n\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\t\tv3.subVectors( v2, v1 );\r\n\r\n\t\tvar lightPlane = this.children[ 0 ];\r\n\t\tvar targetLine = this.children[ 1 ];\r\n\r\n\t\tlightPlane.lookAt( v3 );\r\n\t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t\ttargetLine.lookAt( v3 );\r\n\t\ttargetLine.scale.z = v3.length();\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/EdgesHelper.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @param object THREE.Mesh whose geometry will be used\r\n * @param hex line color\r\n * @param thresholdAngle the minimum angle (in degrees),\r\n * between the face normals of adjacent faces,\r\n * that is required to render an edge. A value of 10 means\r\n * an edge is only rendered if the angle is at least 10 degrees.\r\n */\r\n\r\nTHREE.EdgesHelper = function ( object, hex, thresholdAngle ) {\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\r\n\r\n\tTHREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );\r\n\r\n\tthis.matrix = object.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;\r\n\r\n// File:src/extras/helpers/FaceNormalsHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\r\n\r\n\t// FaceNormalsHelper only supports THREE.Geometry\r\n\r\n\tthis.object = object;\r\n\r\n\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\r\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t//\r\n\r\n\tvar nNormals = 0;\r\n\r\n\tvar objGeometry = this.object.geometry;\r\n\r\n\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\r\n\t\tnNormals = objGeometry.faces.length;\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\r\n\r\n\tgeometry.addAttribute( 'position', positions );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t//\r\n\r\n\tthis.matrixAutoUpdate = false;\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\r\n\r\nTHREE.FaceNormalsHelper.prototype.update = ( function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\tvar normalMatrix = new THREE.Matrix3();\r\n\r\n\treturn function update() {\r\n\r\n\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t//\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\tvar faces = objGeometry.faces;\r\n\r\n\t\tvar idx = 0;\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tvar normal = face.normal;\r\n\r\n\t\t\tv1.copy( vertices[ face.a ] )\r\n\t\t\t\t.add( vertices[ face.b ] )\r\n\t\t\t\t.add( vertices[ face.c ] )\r\n\t\t\t\t.divideScalar( 3 )\r\n\t\t\t\t.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\tidx = idx + 1;\r\n\r\n\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\tidx = idx + 1;\r\n\r\n\t\t}\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n}() );\r\n\r\n// File:src/extras/helpers/GridHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.GridHelper = function ( size, step, color1, color2 ) {\r\n\r\n\tcolor1 = new THREE.Color( color1 !== undefined ? color1 : 0x444444 );\r\n\tcolor2 = new THREE.Color( color2 !== undefined ? color2 : 0x888888 );\r\n\r\n\tvar vertices = [];\r\n\tvar colors = [];\r\n\r\n\tfor ( var i = - size, j = 0; i <= size; i += step ) {\r\n\r\n\t\tvertices.push( - size, 0, i, size, 0, i );\r\n\t\tvertices.push( i, 0, - size, i, 0, size );\r\n\r\n\t\tvar color = i === 0 ? color1 : color2;\r\n\r\n\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\tcolor.toArray( colors, j ); j += 3;\r\n\r\n\t}\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( vertices, 3 ) );\r\n\tgeometry.addAttribute( 'color', new THREE.Float32Attribute( colors, 3 ) );\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n};\r\n\r\nTHREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.GridHelper.prototype.constructor = THREE.GridHelper;\r\n\r\nTHREE.GridHelper.prototype.setColors = function () {\r\n\r\n\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\r\n\r\n};\r\n\r\n// File:src/extras/helpers/HemisphereLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.HemisphereLightHelper = function ( light, sphereSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tthis.matrix = light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.colors = [ new THREE.Color(), new THREE.Color() ];\r\n\r\n\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\r\n\tgeometry.rotateX( - Math.PI / 2 );\r\n\r\n\tfor ( var i = 0, il = 8; i < il; i ++ ) {\r\n\r\n\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\r\n\r\n\t}\r\n\r\n\tvar material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( geometry, material );\r\n\tthis.add( this.lightSphere );\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\r\n\r\nTHREE.HemisphereLightHelper.prototype.dispose = function () {\r\n\r\n\tthis.lightSphere.geometry.dispose();\r\n\tthis.lightSphere.material.dispose();\r\n\r\n};\r\n\r\nTHREE.HemisphereLightHelper.prototype.update = function () {\r\n\r\n\tvar vector = new THREE.Vector3();\r\n\r\n\treturn function () {\r\n\r\n\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\r\n\r\n\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\r\n\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/PointLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.PointLightHelper = function ( light, sphereSize ) {\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tvar geometry = new THREE.SphereBufferGeometry( sphereSize, 4, 2 );\r\n\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.matrix = this.light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\t/*\r\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\r\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\r\n\tvar d = light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\r\n\tthis.add( this.lightDistance );\r\n\t*/\r\n\r\n};\r\n\r\nTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\r\nTHREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\r\n\r\nTHREE.PointLightHelper.prototype.dispose = function () {\r\n\r\n\tthis.geometry.dispose();\r\n\tthis.material.dispose();\r\n\r\n};\r\n\r\nTHREE.PointLightHelper.prototype.update = function () {\r\n\r\n\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t/*\r\n\tvar d = this.light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.visible = true;\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\t*/\r\n\r\n};\r\n\r\n// File:src/extras/helpers/SkeletonHelper.js\r\n\r\n/**\r\n * @author Sean Griffin / http://twitter.com/sgrif\r\n * @author Michael Guerrero / http://realitymeltdown.com\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.SkeletonHelper = function ( object ) {\r\n\r\n\tthis.bones = this.getBoneList( object );\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\r\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\r\n\r\n\t\tvar bone = this.bones[ i ];\r\n\r\n\t\tif ( bone.parent instanceof THREE.Bone ) {\r\n\r\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 0, 1 ) );\r\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 1, 0 ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgeometry.dynamic = true;\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n\tthis.root = object;\r\n\r\n\tthis.matrix = object.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\n\r\nTHREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\r\n\r\nTHREE.SkeletonHelper.prototype.getBoneList = function( object ) {\r\n\r\n\tvar boneList = [];\r\n\r\n\tif ( object instanceof THREE.Bone ) {\r\n\r\n\t\tboneList.push( object );\r\n\r\n\t}\r\n\r\n\tfor ( var i = 0; i < object.children.length; i ++ ) {\r\n\r\n\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\r\n\r\n\t}\r\n\r\n\treturn boneList;\r\n\r\n};\r\n\r\nTHREE.SkeletonHelper.prototype.update = function () {\r\n\r\n\tvar geometry = this.geometry;\r\n\r\n\tvar matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );\r\n\r\n\tvar boneMatrix = new THREE.Matrix4();\r\n\r\n\tvar j = 0;\r\n\r\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\r\n\r\n\t\tvar bone = this.bones[ i ];\r\n\r\n\t\tif ( bone.parent instanceof THREE.Bone ) {\r\n\r\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\r\n\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\r\n\r\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\r\n\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\r\n\r\n\t\t\tj += 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgeometry.verticesNeedUpdate = true;\r\n\r\n\tgeometry.computeBoundingSphere();\r\n\r\n};\r\n\r\n// File:src/extras/helpers/SpotLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.SpotLightHelper = function ( light ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tthis.matrix = light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\tvar positions = [\r\n\t\t0, 0, 0,   0,   0,   1,\r\n\t\t0, 0, 0,   1,   0,   1,\r\n\t\t0, 0, 0, - 1,   0,   1,\r\n\t\t0, 0, 0,   0,   1,   1,\r\n\t\t0, 0, 0,   0, - 1,   1\r\n\t];\r\n\r\n\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\r\n\r\n\t\tvar p1 = ( i / l ) * Math.PI * 2;\r\n\t\tvar p2 = ( j / l ) * Math.PI * 2;\r\n\r\n\t\tpositions.push(\r\n\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\r\n\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( positions, 3 ) );\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\r\n\r\n\tthis.cone = new THREE.LineSegments( geometry, material );\r\n\tthis.add( this.cone );\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\r\n\r\nTHREE.SpotLightHelper.prototype.dispose = function () {\r\n\r\n\tthis.cone.geometry.dispose();\r\n\tthis.cone.material.dispose();\r\n\r\n};\r\n\r\nTHREE.SpotLightHelper.prototype.update = function () {\r\n\r\n\tvar vector = new THREE.Vector3();\r\n\tvar vector2 = new THREE.Vector3();\r\n\r\n\treturn function () {\r\n\r\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\r\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\r\n\r\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\r\n\t\tthis.cone.lookAt( vector2.sub( vector ) );\r\n\r\n\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/VertexNormalsHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\r\n\r\n\tthis.object = object;\r\n\r\n\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\r\n\r\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t//\r\n\r\n\tvar nNormals = 0;\r\n\r\n\tvar objGeometry = this.object.geometry;\r\n\r\n\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\r\n\t\tnNormals = objGeometry.faces.length * 3;\r\n\r\n\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\tnNormals = objGeometry.attributes.normal.count;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\r\n\r\n\tgeometry.addAttribute( 'position', positions );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t//\r\n\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\r\n\r\nTHREE.VertexNormalsHelper.prototype.update = ( function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\tvar normalMatrix = new THREE.Matrix3();\r\n\r\n\treturn function update() {\r\n\r\n\t\tvar keys = [ 'a', 'b', 'c' ];\r\n\r\n\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t//\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\t\tvar faces = objGeometry.faces;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\r\n\r\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\r\n\r\n\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tvar objPos = objGeometry.attributes.position;\r\n\r\n\t\t\tvar objNorm = objGeometry.attributes.normal;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\r\n\r\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\r\n\r\n\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n}() );\r\n\r\n// File:src/extras/helpers/WireframeHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.WireframeHelper = function ( object, hex ) {\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\r\n\r\n\tTHREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );\r\n\r\n\tthis.matrix = object.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;\r\n\r\n// File:src/extras/objects/ImmediateRenderObject.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ImmediateRenderObject = function ( material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.material = material;\r\n\tthis.render = function ( renderCallback ) {};\r\n\r\n};\r\n\r\nTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;\r\n\r\n// File:src/extras/objects/MorphBlendMesh.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.MorphBlendMesh = function( geometry, material ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.animationsMap = {};\r\n\tthis.animationsList = [];\r\n\r\n\t// prepare default animation\r\n\t// (all frames played together in 1 second)\r\n\r\n\tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n\tvar name = \"__default\";\r\n\r\n\tvar startFrame = 0;\r\n\tvar endFrame = numFrames - 1;\r\n\r\n\tvar fps = numFrames / 1;\r\n\r\n\tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\tthis.setAnimationWeight( name, 1 );\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\r\nTHREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\r\n\r\nTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n\tvar animation = {\r\n\r\n\t\tstart: start,\r\n\t\tend: end,\r\n\r\n\t\tlength: end - start + 1,\r\n\r\n\t\tfps: fps,\r\n\t\tduration: ( end - start ) / fps,\r\n\r\n\t\tlastFrame: 0,\r\n\t\tcurrentFrame: 0,\r\n\r\n\t\tactive: false,\r\n\r\n\t\ttime: 0,\r\n\t\tdirection: 1,\r\n\t\tweight: 1,\r\n\r\n\t\tdirectionBackwards: false,\r\n\t\tmirroredLoop: false\r\n\r\n\t};\r\n\r\n\tthis.animationsMap[ name ] = animation;\r\n\tthis.animationsList.push( animation );\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n\tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\r\n\tvar firstAnimation, frameRanges = {};\r\n\r\n\tvar geometry = this.geometry;\r\n\r\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\tvar chunks = morph.name.match( pattern );\r\n\r\n\t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n\t\t\tvar name = chunks[ 1 ];\r\n\r\n\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\r\n\t\t\tvar range = frameRanges[ name ];\r\n\r\n\t\t\tif ( i < range.start ) range.start = i;\r\n\t\t\tif ( i > range.end ) range.end = i;\r\n\r\n\t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var name in frameRanges ) {\r\n\r\n\t\tvar range = frameRanges[ name ];\r\n\t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n\t}\r\n\r\n\tthis.firstAnimation = firstAnimation;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.direction = 1;\r\n\t\tanimation.directionBackwards = false;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.direction = - 1;\r\n\t\tanimation.directionBackwards = true;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.fps = fps;\r\n\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.duration = duration;\r\n\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.weight = weight;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.time = time;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n\tvar time = 0;\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\ttime = animation.time;\r\n\r\n\t}\r\n\r\n\treturn time;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n\tvar duration = - 1;\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tduration = animation.duration;\r\n\r\n\t}\r\n\r\n\treturn duration;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.time = 0;\r\n\t\tanimation.active = true;\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.active = false;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n\t\tvar animation = this.animationsList[ i ];\r\n\r\n\t\tif ( ! animation.active ) continue;\r\n\r\n\t\tvar frameTime = animation.duration / animation.length;\r\n\r\n\t\tanimation.time += animation.direction * delta;\r\n\r\n\t\tif ( animation.mirroredLoop ) {\r\n\r\n\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n\t\t\t\tanimation.direction *= - 1;\r\n\r\n\t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n\t\t\t\t\tanimation.time = animation.duration;\r\n\t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( animation.time < 0 ) {\r\n\r\n\t\t\t\t\tanimation.time = 0;\r\n\t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n\t\t}\r\n\r\n\t\tvar keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t\tvar weight = animation.weight;\r\n\r\n\t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n\t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t\t\tanimation.currentFrame = keyframe;\r\n\r\n\t\t}\r\n\r\n\t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n\t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n\t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// Export the THREE object for **Node.js**, with\r\n// backwards-compatibility for the old `require()` API. If we're in\r\n// the browser, add `_` as a global object via a string identifier,\r\n// for Closure Compiler \"advanced\" mode.\r\nif (typeof exports !== 'undefined') {\r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    exports = module.exports = THREE;\r\n  }\r\n  exports.THREE = THREE;\r\n} else {\r\n  this['THREE'] = THREE;\r\n}\r\n","import \"./styles.css\";\nimport * as THREE from \"three\";\n\ndocument.getElementById(\"app\").innerHTML = `\n<h1>Hello Vanilla!</h1>\n<div>\n  We use the same configuration as Parcel to bundle this sandbox, you can find more\n  info about Parcel \n  <a href=\"https://parceljs.org\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n</div>\n`;\n"]}